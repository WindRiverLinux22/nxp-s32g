From f298fd4a04a5f3f5cadcac08c4b04a93c0efca43 Mon Sep 17 00:00:00 2001
From: Ciprian Marian Costea <ciprianmarian.costea@nxp.com>
Date: Tue, 5 Oct 2021 11:51:14 +0300
Subject: [PATCH 04/20] s32: thermal: Remove S32-GEN1 rev 1 support

Issue: ALB-7916
Upstream-Status: Pending 

Signed-off-by: Ciprian Marian Costea <ciprianmarian.costea@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 .../boot/dts/freescale/fsl-s32-gen1.dtsi      |  2 -
 drivers/thermal/Kconfig                       |  2 +-
 drivers/thermal/s32_thermal.c                 | 77 +++----------------
 3 files changed, 12 insertions(+), 69 deletions(-)

diff --git a/arch/arm64/boot/dts/freescale/fsl-s32-gen1.dtsi b/arch/arm64/boot/dts/freescale/fsl-s32-gen1.dtsi
index 11055643dfde..bcf85552ec39 100644
--- a/arch/arm64/boot/dts/freescale/fsl-s32-gen1.dtsi
+++ b/arch/arm64/boot/dts/freescale/fsl-s32-gen1.dtsi
@@ -1067,8 +1067,6 @@
 		compatible = "fsl,s32gen1-tmu";
 		reg = <0x0 0x400A8000 0x0 0x3000>,
 			<0x0 0x400A4200 0x0 0x1FC>;
-		nvmem-cell-names = "soc_revision";
-		nvmem-cells = <&soc_revision>;
 		status = "okay";
 	};
 
diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index c4ba517fda4f..908e22ba8421 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -249,7 +249,7 @@ config S32V234_THERMAL
 
 config S32GEN1_THERMAL
 	bool "Temperature sensor driver for NXP s32G SoCs"
-	depends on SYSFS && THERMAL_HWMON && SOC_S32GEN1 && NVMEM_S32_SIUL2
+	depends on SYSFS && THERMAL_HWMON && SOC_S32GEN1
 	help
       Support for Temperature Monitoring Unit (TMU) found on NXP s32gen1
 	  SoCs. It supports reporting the immediate and average temperature
diff --git a/drivers/thermal/s32_thermal.c b/drivers/thermal/s32_thermal.c
index 1527400e98b6..23fcec879425 100644
--- a/drivers/thermal/s32_thermal.c
+++ b/drivers/thermal/s32_thermal.c
@@ -13,7 +13,6 @@
 #include <linux/mfd/syscon.h>
 #include <linux/platform_device.h>
 #include <linux/mfd/syscon/s32v234-src.h>
-#include <soc/s32/revision.h>
 
 #define DRIVER_NAME "s32tmu"
 
@@ -32,20 +31,10 @@
  * thermally controlled environment and are specific to each
  * revision of the SoC.
  */
-static const uint32_t rev1_calib_scfgr[] = {
-	0x2C, 0x26, 0x3D, 0x6B, 0x9B, 0xC9, 0xF7, 0x112, 0x125,
-	0x155, 0x16C, 0x172
-};
-
 static const uint32_t rev2_calib_scfgr[] = {
 	0x2C, 0x59, 0xC6, 0x167
 };
 
-static const uint32_t rev1_calib_trcr[] = {
-	0xE9, 0xE6, 0xF2, 0x10A, 0x123, 0x13B, 0x153, 0x161, 0x16B,
-	0x184, 0x190, 0x193
-};
-
 static const uint32_t rev2_calib_trcr[] = {
 	0xE9, 0x101, 0x13A, 0x18E
 };
@@ -149,29 +138,9 @@ struct tmu_driver_data {
 	void __iomem *tmu_registers;
 	void __iomem *fuse_base;
 	struct device *hwmon_device;
-	uint8_t	revision;
 	uint8_t calib_points;
 };
 
-static int s32gen1_get_soc_revision(struct device *dev, uint8_t *rev)
-{
-	struct s32_soc_rev soc_rev = {0};
-	u32 raw_rev = 0;
-	int ret;
-
-	ret = s32_siul2_nvmem_get_soc_revision(dev, "soc_revision", &soc_rev);
-	if (ret)
-		return ret;
-
-	raw_rev = (soc_rev.major << 8) | (soc_rev.minor << 4);
-	if (raw_rev == 0)
-		*rev = 1;
-	else
-		*rev = 2;
-
-	return 0;
-}
-
 static int get_site_idx_from_label(const char *label)
 {
 	int cmp_size = sizeof("temp1_label") - 1;
@@ -406,29 +375,15 @@ static void get_calib_with_fuses(struct device *dev,
 static void get_calib_table(struct device *dev,
 		uint32_t *calib_scfgr, uint32_t *calib_trcr)
 {
-	struct tmu_driver_data *tmu_dd = dev_get_drvdata(dev);
-
-	if (tmu_dd->revision == 1) {
-		const static uint32_t warm_idxes[] = {7, 8, 9, 10, 11};
-		const static uint32_t cold_idxes[] = {};
-
-		get_calib_with_fuses(dev,
-				calib_scfgr, calib_trcr,
-				rev1_calib_scfgr, rev1_calib_trcr,
-				warm_idxes, cold_idxes,
-				ARRAY_SIZE(warm_idxes), ARRAY_SIZE(cold_idxes),
-				sizeof(rev1_calib_scfgr));
-	} else {
-		const static uint32_t warm_idxes[] = {3};
-		const static uint32_t cold_idxes[] = {0};
-
-		get_calib_with_fuses(dev,
-				calib_scfgr, calib_trcr,
-				rev2_calib_scfgr, rev2_calib_trcr,
-				warm_idxes, cold_idxes,
-				ARRAY_SIZE(warm_idxes), ARRAY_SIZE(cold_idxes),
-				sizeof(rev2_calib_scfgr));
-	}
+	const static u32 warm_idxes[] = {3};
+	const static u32 cold_idxes[] = {0};
+
+	get_calib_with_fuses(dev,
+			     calib_scfgr, calib_trcr,
+			     rev2_calib_scfgr, rev2_calib_trcr,
+			     warm_idxes, cold_idxes,
+			     ARRAY_SIZE(warm_idxes), ARRAY_SIZE(cold_idxes),
+			     sizeof(rev2_calib_scfgr));
 }
 
 static int tmu_calibrate_s32gen1(struct device *dev)
@@ -628,17 +583,8 @@ static int tmu_probe(struct platform_device *pd)
 		}
 	}
 
-	if (tmu_chip->has_sites) {
-		return_code = s32gen1_get_soc_revision(&pd->dev,
-						       &tmu_dd->revision);
-		if (return_code)
-			goto revision_get_failed;
-
-		if (tmu_dd->revision == 1)
-			tmu_dd->calib_points = 12;
-		else
-			tmu_dd->calib_points = 4;
-	}
+	if (tmu_chip->has_sites)
+		tmu_dd->calib_points = 4;
 
 	tmu_dd->hwmon_device =
 		hwmon_device_register_with_info(
@@ -677,7 +623,6 @@ static int tmu_probe(struct platform_device *pd)
 	for (i = 0; i < device_files_created; i++)
 		device_remove_file(tmu_dd->hwmon_device, &dev_attrs[i]);
 	hwmon_device_unregister(tmu_dd->hwmon_device);
-revision_get_failed:
 hwmon_register_failed:
 	if (tmu_chip->has_clk)
 		clk_disable_unprepare(tmu_dd->clk);
-- 
2.17.1

