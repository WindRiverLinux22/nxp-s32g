From adc674bd1cfc6c866b272512d076e6cbd082b85a Mon Sep 17 00:00:00 2001
From: Bogdan-Gabriel Roman <bogdan-gabriel.roman@nxp.com>
Date: Wed, 7 Jul 2021 22:58:12 +0300
Subject: [PATCH 12/17] s32: pcie: create separate header file for ioctl calls
 definitions

commit adc674bd1cfc6c866b272512d076e6cbd082b85a from
https://source.codeaurora.org/external/autobsps32/linux

The same header file defining pcie ioctl calls should be exposed to
both the user-space and the kernel to avoid desynchronizations.

Upstream-Status: Pending

Issue: ALB-5982
Signed-off-by: Bogdan-Gabriel Roman <bogdan-gabriel.roman@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/pci/controller/dwc/pci-dma-s32.h   | 35 +--------
 drivers/pci/controller/dwc/pci-ioctl-s32.h | 87 ++++++++++++++++++++++
 drivers/pci/controller/dwc/pci-s32v234.c   | 22 +-----
 drivers/pci/controller/dwc/pci-s32v234.h   | 13 ----
 4 files changed, 90 insertions(+), 67 deletions(-)
 create mode 100644 drivers/pci/controller/dwc/pci-ioctl-s32.h

diff --git a/drivers/pci/controller/dwc/pci-dma-s32.h b/drivers/pci/controller/dwc/pci-dma-s32.h
index f7ac75d8f876..86cca425fb34 100644
--- a/drivers/pci/controller/dwc/pci-dma-s32.h
+++ b/drivers/pci/controller/dwc/pci-dma-s32.h
@@ -11,6 +11,7 @@
 #define PCIE_DMA_S32_H
 
 #include "pcie-designware.h"
+#include "pci-ioctl-s32.h"
 
 #define PCIE_DMA_BASE	0x970
 
@@ -60,16 +61,6 @@
 #define PCIE_DMA_LLP_LOW			(PCIE_DMA_BASE + 0x11C)
 #define PCIE_DMA_LLP_HIGH			(PCIE_DMA_BASE + 0x120)
 
-#define DMA_FLAG_LIE         BIT(0)
-#define DMA_FLAG_RIE         BIT(1)
-#define DMA_FLAG_LLP         BIT(2)
-#define DMA_FLAG_WRITE_ELEM			BIT(3)
-#define DMA_FLAG_READ_ELEM			BIT(4)
-#define DMA_FLAG_EN_DONE_INT		BIT(5)
-#define DMA_FLAG_EN_ABORT_INT		BIT(6)
-#define DMA_FLAG_EN_REMOTE_DONE_INT			BIT(7)
-#define DMA_FLAG_EN_REMOTE_ABORT_INT		BIT(8)
-
 #define NUM_DMA_RD_CHAN_MASK	0xF0000
 #define NUM_DMA_RD_CHAN_SHIFT	16
 #define NUM_DMA_WR_CHAN_MASK	0xF
@@ -94,14 +85,7 @@ enum DMA_ERROR {
 	DMA_ERR_CPL_TIMEOUT,
 	DMA_ERR_DATA_POISIONING
 };
-/* Linked list mode struct */
-struct dma_ll_info {
-	u32 direction;
-	u32 ch_num;
-	u32 nr_elem;
-	u32 phy_list_addr;
-	u32 next_phy_list_addr;
-};
+
 /* Channel info struct */
 struct dma_ch_info {
 	u32 direction;
@@ -115,21 +99,6 @@ struct dma_ch_info {
 	u8 current_elem_idx;
 	u8 current_list_size;
 };
-/* Single block DMA transfer struct */
-struct dma_data_elem {
-	u64 sar;
-	u64 dar;
-	u64 imwr;
-	u32 size;
-	u32 flags;
-	u32 ch_num;
-};
-/* Type of array of structures for passing linked list  */
-struct dma_list {
-	u64 sar;
-	u64 dar;
-	u32 size;
-};
 
 struct dma_info {
 	struct dma_ch_info	wr_ch;
diff --git a/drivers/pci/controller/dwc/pci-ioctl-s32.h b/drivers/pci/controller/dwc/pci-ioctl-s32.h
new file mode 100644
index 000000000000..c0225cba30eb
--- /dev/null
+++ b/drivers/pci/controller/dwc/pci-ioctl-s32.h
@@ -0,0 +1,87 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (C) 2013 Kosagi
+ *              http://www.kosagi.com
+ * Copyright (C) 2014-2015 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2016-2021 NXP
+ *
+ * Author: Sean Cross <xobs@kosagi.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef PCI_IOCTL_S32_H
+#define PCI_IOCTL_S32_H
+
+#define SETUP_OUTBOUND		_IOWR('S', 1, struct s32v_outbound_region)
+#define SETUP_INBOUND		_IOWR('S', 2, struct s32v_inbound_region)
+#define SEND_MSI			_IOWR('S', 3, unsigned long long)
+#define GET_BAR_INFO		_IOWR('S', 4, struct s32v_bar)
+#define SEND_SINGLE_DMA		_IOWR('S', 6, struct dma_data_elem)
+#define STORE_PID			_IOR('S', 7, unsigned int)
+#define SEND_SIGNAL			_IOR('S', 8,  unsigned int)
+#define GET_DMA_CH_ERRORS	_IOR('S', 9,  unsigned int)
+#define RESET_DMA_WRITE		_IOW('S', 10,  unsigned int)
+#define RESET_DMA_READ		_IOW('S', 11,  unsigned int)
+#define STORE_LL_INFO		_IOR('S', 12,  struct dma_ll_info)
+#define SEND_LL				_IOWR('S', 13, struct dma_list(*)[])
+#define START_LL			_IOWR('S', 14, unsigned int)
+
+#define DMA_FLAG_LIE					(1 << 0)
+#define DMA_FLAG_RIE					(1 << 1)
+#define DMA_FLAG_LLP					(1 << 2)
+#define DMA_FLAG_WRITE_ELEM				(1 << 3)
+#define DMA_FLAG_READ_ELEM				(1 << 4)
+#define DMA_FLAG_EN_DONE_INT			(1 << 5)
+#define DMA_FLAG_EN_ABORT_INT			(1 << 6)
+#define DMA_FLAG_EN_REMOTE_DONE_INT		(1 << 7)
+#define DMA_FLAG_EN_REMOTE_ABORT_INT	(1 << 8)
+
+struct s32v_inbound_region {
+	unsigned int  bar_nr;
+	unsigned int  target_addr;
+	unsigned int  region;
+};
+
+struct s32v_outbound_region {
+	unsigned long target_addr;
+	unsigned long base_addr;
+	unsigned int  size;
+	unsigned int  region;
+	unsigned int  region_type;
+};
+
+struct s32v_bar {
+	unsigned int bar_nr;
+	unsigned int size;
+	unsigned int addr;
+};
+
+/* Single block DMA transfer struct */
+struct dma_data_elem {
+	unsigned long sar;
+	unsigned long dar;
+	unsigned long imwr;
+	unsigned int size;
+	unsigned int flags;
+	unsigned int ch_num;
+};
+/* Type of array of structures for passing linked list  */
+struct dma_list {
+	unsigned long sar;
+	unsigned long dar;
+	unsigned int size;
+};
+
+/* Linked list mode struct */
+struct dma_ll_info {
+	unsigned int direction;
+	unsigned int ch_num;
+	unsigned int nr_elem;
+	unsigned int phy_list_addr;
+	unsigned int next_phy_list_addr;
+};
+
+#endif /* PCI_IOCTL_S32_H */
diff --git a/drivers/pci/controller/dwc/pci-s32v234.c b/drivers/pci/controller/dwc/pci-s32v234.c
index 763ecd50339c..47971c1e7512 100644
--- a/drivers/pci/controller/dwc/pci-s32v234.c
+++ b/drivers/pci/controller/dwc/pci-s32v234.c
@@ -30,6 +30,7 @@
 #include <linux/of_platform.h>
 
 #include "pci-s32v234.h"
+#include "pci-ioctl-s32.h"
 
 /* TODO: across the entire file:
  * - use dedicated dw_* functions for dbi_base access
@@ -40,22 +41,6 @@
  * and types
  */
 
-#define SETUP_OUTBOUND		_IOWR('S', 1, struct s32v_outbound_region)
-#define SETUP_INBOUND		_IOWR('S', 2, struct s32v_inbound_region)
-#define SEND_MSI		_IOWR('S', 3, u64)
-#define GET_BAR_INFO		_IOWR('S', 4, struct s32v_bar)
-#define STORE_PID		_IOR('S', 7,  s32)
-#define SEND_SIGNAL		_IOR('S', 8,  int)
-#ifdef CONFIG_PCI_DW_DMA
-#define SEND_SINGLE_DMA		_IOWR('S', 6, struct dma_data_elem)
-#define GET_DMA_CH_ERRORS	_IOR('S', 9,  u32)
-#define RESET_DMA_WRITE		_IOW('S', 10,  u32)
-#define RESET_DMA_READ		_IOW('S', 11,  u32)
-#define STORE_LL_INFO		_IOR('S', 12,  struct dma_ll_info)
-#define SEND_LL			_IOWR('S', 13, struct dma_list(*)[])
-#define START_LL		_IOWR('S', 14, u32)
-#endif
-
 #define PCIE_MSI_CAP			0x50
 #define PCIE_MSI_ADDR_LOWER		0x54
 #define PCIE_MSI_ADDR_UPPER		0x58
@@ -204,11 +189,6 @@ static int s32v234_pcie_get_soc_revision(void)
 }
 
 struct task_struct *task;
-struct s32v_bar {
-	u32 bar_nr;
-	u32 size;
-	u32 addr;
-};
 
 struct s32v_outbound_region restore_outb_arr[4];
 struct s32v_inbound_region restore_inb_arr[4];
diff --git a/drivers/pci/controller/dwc/pci-s32v234.h b/drivers/pci/controller/dwc/pci-s32v234.h
index 037ca734b07b..d313f6706527 100644
--- a/drivers/pci/controller/dwc/pci-s32v234.h
+++ b/drivers/pci/controller/dwc/pci-s32v234.h
@@ -48,17 +48,4 @@ struct s32v234_pcie {
 #endif
 };
 
-struct s32v_inbound_region {
-	u32 bar_nr;
-	u32 target_addr;
-	u32 region;
-};
-struct s32v_outbound_region {
-	u64 target_addr;
-	u64 base_addr;
-	u32 size;
-	u32 region;
-	u32 region_type;
-};
-
 #endif  /* _PCIE_S32V234_H */
-- 
2.17.1

