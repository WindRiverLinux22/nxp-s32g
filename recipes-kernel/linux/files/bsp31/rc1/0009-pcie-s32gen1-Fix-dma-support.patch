From 62ca3dabe3b43d7b1fd755e2a16a7dfb4dc0c7f2 Mon Sep 17 00:00:00 2001
From: Bogdan-Gabriel Roman <bogdan-gabriel.roman@nxp.com>
Date: Tue, 6 Apr 2021 10:15:02 +0300
Subject: [PATCH 09/17] pcie: s32gen1: Fix dma support

commit 62ca3dabe3b43d7b1fd755e2a16a7dfb4dc0c7f2 from
https://source.codeaurora.org/external/autobsps32/linux

Including the pci-dma-s32.h header in pci-s32gen1.c file raised an
compilation error because the dma_info type -- which is defined in
pci-dma-s32.h -- was also used in pci-s32gen1.h header file. Moving
the inclusion to pci-s32ge1.h solves the issue. Also, move
s32gen1_pcie_dma_handler from pci-dma-s32.c to pci-s32gen1.c because
it is s32gen1 specific.

Upstream-Status: Pending

Issue: ALB-5982
Signed-off-by: Bogdan-Gabriel Roman <bogdan-gabriel.roman@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/pci/controller/dwc/pci-dma-s32.c | 39 --------------------
 drivers/pci/controller/dwc/pci-dma-s32.h |  1 -
 drivers/pci/controller/dwc/pci-s32gen1.c | 46 +++++++++++++++++++++---
 drivers/pci/controller/dwc/pci-s32gen1.h |  5 +++
 4 files changed, 46 insertions(+), 45 deletions(-)

diff --git a/drivers/pci/controller/dwc/pci-dma-s32.c b/drivers/pci/controller/dwc/pci-dma-s32.c
index 7f7b37e9630a..39d89efbfffe 100644
--- a/drivers/pci/controller/dwc/pci-dma-s32.c
+++ b/drivers/pci/controller/dwc/pci-dma-s32.c
@@ -641,42 +641,3 @@ irqreturn_t dw_handle_dma_irq_read(struct dw_pcie *pci, struct dma_info *di,
 
 	return IRQ_HANDLED;
 }
-
-static irqreturn_t s32gen1_pcie_dma_handler(int irq, void *arg)
-{
-	struct s32gen1_pcie *s32_pp = arg;
-	struct dw_pcie *pcie = &(s32_pp->pcie);
-	struct dma_info *di = &(s32_pp->dma);
-
-	u32 val_write = 0;
-	u32 val_read = 0;
-
-	val_write = dw_pcie_readl_dbi(pcie, PCIE_DMA_WRITE_INT_STATUS);
-	val_read = dw_pcie_readl_dbi(pcie, PCIE_DMA_READ_INT_STATUS);
-
-	if (val_write) {
-#ifdef CONFIG_PCI_S32GEN1_ACCESS_FROM_USER
-		bool signal = (di->wr_ch.status == DMA_CH_RUNNING);
-#endif
-		dw_handle_dma_irq_write(pcie, di, val_write);
-#ifdef CONFIG_PCI_S32GEN1_ACCESS_FROM_USER
-		if (signal && s32_pp->uspace.send_signal_to_user)
-			s32_pp->uspace.send_signal_to_user(s32_pp);
-#endif
-
-		if (s32_pp->call_back)
-			s32_pp->call_back(val_write);
-	}
-	if (val_read) {
-#ifdef CONFIG_PCI_S32GEN1_ACCESS_FROM_USER
-		bool signal = (di->rd_ch.status == DMA_CH_RUNNING);
-#endif
-		dw_handle_dma_irq_read(pcie, di, val_read);
-#ifdef CONFIG_PCI_S32GEN1_ACCESS_FROM_USER
-		if (signal && s32_pp->uspace.send_signal_to_user)
-			s32_pp->uspace.send_signal_to_user(s32_pp);
-#endif
-	}
-
-	return IRQ_HANDLED;
-}
diff --git a/drivers/pci/controller/dwc/pci-dma-s32.h b/drivers/pci/controller/dwc/pci-dma-s32.h
index 150359a397f9..f7ac75d8f876 100644
--- a/drivers/pci/controller/dwc/pci-dma-s32.h
+++ b/drivers/pci/controller/dwc/pci-dma-s32.h
@@ -169,6 +169,5 @@ irqreturn_t dw_handle_dma_irq_write(struct dw_pcie *pci, struct dma_info *di,
 					u32 val_write);
 irqreturn_t dw_handle_dma_irq_read(struct dw_pcie *pci, struct dma_info *di,
 					u32 val_read);
-irqreturn_t s32gen1_pcie_dma_handler(int irq, void *arg);
 
 #endif  /* PCIE_DMA_S32_H */
diff --git a/drivers/pci/controller/dwc/pci-s32gen1.c b/drivers/pci/controller/dwc/pci-s32gen1.c
index e95ba7a9be16..9f31573e447c 100644
--- a/drivers/pci/controller/dwc/pci-s32gen1.c
+++ b/drivers/pci/controller/dwc/pci-s32gen1.c
@@ -36,11 +36,6 @@
 #include "pci-s32gen1.h"
 #include "../../pci.h"
 
-#ifdef CONFIG_PCI_DW_DMA
-#include <linux/dma-mapping.h>
-#include "pci-dma-s32.h"
-#endif
-
 #ifdef DEBUG
 #ifdef CONFIG_PCI_S32GEN1_DEBUG_READS
 #define DEBUG_R
@@ -275,6 +270,47 @@ u32 dw_pcie_readl_ctrl(struct s32gen1_pcie *pci, u32 reg)
 
 static struct s32gen1_pcie *s32gen1_pcie_ep;
 
+#ifdef CONFIG_PCI_DW_DMA
+static irqreturn_t s32gen1_pcie_dma_handler(int irq, void *arg)
+{
+	struct s32gen1_pcie *s32_pp = arg;
+	struct dw_pcie *pcie = &(s32_pp->pcie);
+	struct dma_info *di = &(s32_pp->dma);
+
+	u32 val_write = 0;
+	u32 val_read = 0;
+
+	val_write = dw_pcie_readl_dbi(pcie, PCIE_DMA_WRITE_INT_STATUS);
+	val_read = dw_pcie_readl_dbi(pcie, PCIE_DMA_READ_INT_STATUS);
+
+	if (val_write) {
+#ifdef CONFIG_PCI_S32GEN1_ACCESS_FROM_USER
+		bool signal = (di->wr_ch.status == DMA_CH_RUNNING);
+#endif
+		dw_handle_dma_irq_write(pcie, di, val_write);
+#ifdef CONFIG_PCI_S32GEN1_ACCESS_FROM_USER
+		if (signal && s32_pp->uspace.send_signal_to_user)
+			s32_pp->uspace.send_signal_to_user(s32_pp);
+#endif
+
+		if (s32_pp->call_back)
+			s32_pp->call_back(val_write);
+	}
+	if (val_read) {
+#ifdef CONFIG_PCI_S32GEN1_ACCESS_FROM_USER
+		bool signal = (di->rd_ch.status == DMA_CH_RUNNING);
+#endif
+		dw_handle_dma_irq_read(pcie, di, val_read);
+#ifdef CONFIG_PCI_S32GEN1_ACCESS_FROM_USER
+		if (signal && s32_pp->uspace.send_signal_to_user)
+			s32_pp->uspace.send_signal_to_user(s32_pp);
+#endif
+	}
+
+	return IRQ_HANDLED;
+}
+#endif /* CONFIG_PCI_DW_DMA */
+
 #ifdef CONFIG_PCI_S32GEN1_ACCESS_FROM_USER
 ssize_t s32gen1_ioctl(struct file *filp, u32 cmd,
 		unsigned long data);
diff --git a/drivers/pci/controller/dwc/pci-s32gen1.h b/drivers/pci/controller/dwc/pci-s32gen1.h
index 0f3efecd12df..1e9900f0313c 100644
--- a/drivers/pci/controller/dwc/pci-s32gen1.h
+++ b/drivers/pci/controller/dwc/pci-s32gen1.h
@@ -19,6 +19,11 @@
 #define BUILD_BIT_VALUE(field, x) (((x) & (1)) << field##_BIT)
 #define BUILD_MASK_VALUE(field, x) (((x) & (field##_MASK)) << field##_LSB)
 
+#ifdef CONFIG_PCI_DW_DMA
+#include <linux/dma-mapping.h>
+#include "pci-dma-s32.h"
+#endif
+
 /* PCIe MSI capabilities register */
 #define PCI_MSI_CAP		0x50
 /* MSI Enable bit */
-- 
2.17.1

