From 6eda76a8d7fdc718c1b51edbd1b307b7dbec1995 Mon Sep 17 00:00:00 2001
From: Zhantao Tang <zhantao.tang@windriver.com>
Date: Thu, 2 Mar 2023 15:04:16 +0800
Subject: [PATCH 3/3] xpcs: s32: rename functions s32gen1_xxx() to s32cc_xxx()
 in nxp-s32cc-xpcs.h

This patch is to update s32g xpcs driver by change the related names from
s32gen1_xxx to s32cc_xxx to compatible with pfe driver codes.

Upstream-Status: Pending

Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>

---
 .../net/ethernet/stmicro/stmmac/dwmac-s32cc.c |  8 +-
 drivers/net/pcs/fsl-s32gen1-xpcs.c            | 98 +++++++++----------
 .../phy/freescale/phy-fsl-s32gen1-serdes.c    | 10 +-
 include/linux/pcs/nxp-s32cc-xpcs.h            | 34 +++----
 4 files changed, 75 insertions(+), 75 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/dwmac-s32cc.c b/drivers/net/ethernet/stmicro/stmmac/dwmac-s32cc.c
index 5b23e3c477d9..eba22baf479e 100644
--- a/drivers/net/ethernet/stmicro/stmmac/dwmac-s32cc.c
+++ b/drivers/net/ethernet/stmicro/stmmac/dwmac-s32cc.c
@@ -48,8 +48,8 @@ struct s32cc_priv_data {
 	int link_an;
 	bool phyless_an;
 	struct phy *serdes_phy;
-	struct s32gen1_xpcs *xpcs;
-	const struct s32gen1_xpcs_ops *xpcs_ops;
+	struct s32cc_xpcs *xpcs;
+	const struct s32cc_xpcs_ops *xpcs_ops;
 };
 
 static int xpcs_config(struct phylink_pcs *pcs,
@@ -233,8 +233,8 @@ static int s32cc_configure_serdes(struct plat_stmmacenet_data *plat_dat,
 		return -EINVAL;
 	}
 
-	gmac->xpcs = s32gen1_phy2xpcs(gmac->serdes_phy);
-	gmac->xpcs_ops = s32gen1_xpcs_get_ops();
+	gmac->xpcs = s32cc_phy2xpcs(gmac->serdes_phy);
+	gmac->xpcs_ops = s32cc_xpcs_get_ops();
 
 	/* We have to know interface type due to platform limitations */
 	gmac->link_an = MLO_AN_PHY;
diff --git a/drivers/net/pcs/fsl-s32gen1-xpcs.c b/drivers/net/pcs/fsl-s32gen1-xpcs.c
index fc58d97a5bda..de43c7b3ec71 100644
--- a/drivers/net/pcs/fsl-s32gen1-xpcs.c
+++ b/drivers/net/pcs/fsl-s32gen1-xpcs.c
@@ -157,7 +157,7 @@
 #define XPCS_READ(xpcs, REG) \
 	xpcs_read(xpcs, #REG, REG)
 
-struct s32gen1_xpcs_params {
+struct s32cc_xpcs_params {
 	u32 addr1;
 	u32 addr2;
 };
@@ -167,8 +167,8 @@ enum s32gen1_xpc_pll {
 	XPCS_PLLB,	/* Fast PLL */
 };
 
-struct s32gen1_xpcs {
-	struct s32gen1_xpcs_params params;
+struct s32cc_xpcs {
+	struct s32cc_xpcs_params params;
 	enum s32gen1_xpc_pll ref;
 	void __iomem *base;
 	struct device *dev;
@@ -179,7 +179,7 @@ struct s32gen1_xpcs {
 	enum pcie_xpcs_mode pcie_shared;
 };
 
-typedef bool (*xpcs_poll_func_t)(struct s32gen1_xpcs *);
+typedef bool (*xpcs_poll_func_t)(struct s32cc_xpcs *);
 
 static const struct regmap_range xpcs_wr_ranges[] = {
 	regmap_reg_range(0x1F0000, 0x1F0000),
@@ -215,18 +215,18 @@ static const struct regmap_range xpcs_rd_ranges[] = {
 	regmap_reg_range(0x1F8098, 0x1F8098),
 };
 
-static int get_xpcs_id(struct s32gen1_xpcs *xpcs)
+static int get_xpcs_id(struct s32cc_xpcs *xpcs)
 {
 	return xpcs->id;
 }
 
-static struct device *get_xpcs_device(struct s32gen1_xpcs *xpcs)
+static struct device *get_xpcs_device(struct s32cc_xpcs *xpcs)
 {
 	return xpcs->dev;
 }
 
-static void init_params(u32 reg, struct s32gen1_xpcs *xpcs,
-			struct s32gen1_xpcs_params *params, u32 *data)
+static void init_params(u32 reg, struct s32cc_xpcs *xpcs,
+			struct s32cc_xpcs_params *params, u32 *data)
 {
 	u32 ofsleft = (reg >> 8) & 0xffffU;
 	u32 ofsright = (reg & 0xffU);
@@ -258,9 +258,9 @@ static bool xpcs_readable_reg(struct device *dev, unsigned int reg)
 static int xpcs_regmap_reg_read(void *context, unsigned int reg,
 				unsigned int *result)
 {
-	struct s32gen1_xpcs *xpcs = context;
+	struct s32cc_xpcs *xpcs = context;
 	struct device *dev = get_xpcs_device(xpcs);
-	struct s32gen1_xpcs_params params;
+	struct s32cc_xpcs_params params;
 	u32 data;
 
 	if (!xpcs_readable_reg(dev, reg)) {
@@ -279,9 +279,9 @@ static int xpcs_regmap_reg_read(void *context, unsigned int reg,
 static int xpcs_regmap_reg_write(void *context, unsigned int reg,
 				 unsigned int val)
 {
-	struct s32gen1_xpcs *xpcs = context;
+	struct s32cc_xpcs *xpcs = context;
 	struct device *dev = get_xpcs_device(xpcs);
-	struct s32gen1_xpcs_params params;
+	struct s32cc_xpcs_params params;
 	u32 data;
 
 	if (!xpcs_writeable_reg(dev, reg)) {
@@ -297,7 +297,7 @@ static int xpcs_regmap_reg_write(void *context, unsigned int reg,
 	return 0;
 }
 
-static void xpcs_write_bits(struct s32gen1_xpcs *xpcs, const char *name,
+static void xpcs_write_bits(struct s32cc_xpcs *xpcs, const char *name,
 			    unsigned int reg, unsigned int mask,
 			    unsigned int value)
 {
@@ -308,7 +308,7 @@ static void xpcs_write_bits(struct s32gen1_xpcs *xpcs, const char *name,
 		dev_err(dev, "Failed to write bits of XPCS reg: %s\n", name);
 }
 
-static void xpcs_write(struct s32gen1_xpcs *xpcs, const char *name,
+static void xpcs_write(struct s32cc_xpcs *xpcs, const char *name,
 		       unsigned int reg, unsigned int value)
 {
 	struct device *dev = get_xpcs_device(xpcs);
@@ -318,7 +318,7 @@ static void xpcs_write(struct s32gen1_xpcs *xpcs, const char *name,
 		dev_err(dev, "Failed to write XPCS reg: %s\n", name);
 }
 
-static unsigned int xpcs_read(struct s32gen1_xpcs *xpcs, const char *name,
+static unsigned int xpcs_read(struct s32cc_xpcs *xpcs, const char *name,
 			      unsigned int reg)
 {
 	struct device *dev = get_xpcs_device(xpcs);
@@ -342,11 +342,11 @@ static const struct regmap_config xpcs_regmap_config = {
 	.max_register = 0x1F80E1,
 };
 
-static int xpcs_init(struct s32gen1_xpcs **xpcs, struct device *dev,
+static int xpcs_init(struct s32cc_xpcs **xpcs, struct device *dev,
 		     unsigned char id, void __iomem *base, bool ext_clk,
 		     unsigned long rate, enum pcie_xpcs_mode pcie_shared)
 {
-	struct s32gen1_xpcs *xpcsp;
+	struct s32cc_xpcs *xpcsp;
 	struct regmap_config conf;
 	int ret;
 
@@ -381,13 +381,13 @@ static int xpcs_init(struct s32gen1_xpcs **xpcs, struct device *dev,
 		 * XPCS parameters based on Serdes Reference Manual,
 		 * chapter 5.2
 		 */
-		xpcsp->params = (struct s32gen1_xpcs_params) {
+		xpcsp->params = (struct s32cc_xpcs_params) {
 			.addr1 = 0x823FCU,
 			.addr2 = 0x82000U,
 		};
 		conf.name = "xpcs0";
 	} else {
-		xpcsp->params = (struct s32gen1_xpcs_params) {
+		xpcsp->params = (struct s32cc_xpcs_params) {
 			.addr1 = 0X82BFCU,
 			.addr2 = 0x82800U,
 		};
@@ -404,7 +404,7 @@ static int xpcs_init(struct s32gen1_xpcs **xpcs, struct device *dev,
 	return 0;
 }
 
-static bool is_pgood_state(struct s32gen1_xpcs *xpcs)
+static bool is_pgood_state(struct s32cc_xpcs *xpcs)
 {
 	unsigned int val;
 
@@ -418,7 +418,7 @@ static bool is_pgood_state(struct s32gen1_xpcs *xpcs)
 	return PSEQ_STATE(val) == POWER_GOOD_STATE;
 }
 
-static bool is_not_in_reset(struct s32gen1_xpcs *xpcs)
+static bool is_not_in_reset(struct s32cc_xpcs *xpcs)
 {
 	unsigned int val;
 
@@ -427,7 +427,7 @@ static bool is_not_in_reset(struct s32gen1_xpcs *xpcs)
 	return !(val & SR_RST);
 }
 
-static bool xpcs_poll_timeout(struct s32gen1_xpcs *xpcs, xpcs_poll_func_t func,
+static bool xpcs_poll_timeout(struct s32cc_xpcs *xpcs, xpcs_poll_func_t func,
 			      ktime_t timeout)
 {
 	ktime_t cur = ktime_get();
@@ -435,7 +435,7 @@ static bool xpcs_poll_timeout(struct s32gen1_xpcs *xpcs, xpcs_poll_func_t func,
 	return func(xpcs) || ktime_after(cur, timeout);
 }
 
-static int xpcs_wait(struct s32gen1_xpcs *xpcs, xpcs_poll_func_t func)
+static int xpcs_wait(struct s32cc_xpcs *xpcs, xpcs_poll_func_t func)
 {
 	ktime_t timeout = ktime_add_ms(ktime_get(), XPCS_TIMEOUT_MS);
 
@@ -446,7 +446,7 @@ static int xpcs_wait(struct s32gen1_xpcs *xpcs, xpcs_poll_func_t func)
 	return 0;
 }
 
-static int xpcs_wait_bits(struct s32gen1_xpcs *xpcs, unsigned int reg,
+static int xpcs_wait_bits(struct s32cc_xpcs *xpcs, unsigned int reg,
 			  unsigned int mask, unsigned int bits)
 {
 	ktime_t cur;
@@ -461,7 +461,7 @@ static int xpcs_wait_bits(struct s32gen1_xpcs *xpcs, unsigned int reg,
 	return 0;
 }
 
-static int wait_power_good_state(struct s32gen1_xpcs *xpcs)
+static int wait_power_good_state(struct s32cc_xpcs *xpcs)
 {
 	int ret;
 
@@ -473,7 +473,7 @@ static int wait_power_good_state(struct s32gen1_xpcs *xpcs)
 	return ret;
 }
 
-static int wait_reset(struct s32gen1_xpcs *xpcs)
+static int wait_reset(struct s32cc_xpcs *xpcs)
 {
 	int ret;
 
@@ -485,13 +485,13 @@ static int wait_reset(struct s32gen1_xpcs *xpcs)
 	return ret;
 }
 
-static int xpcs_power_on(struct s32gen1_xpcs *xpcs)
+static int xpcs_power_on(struct s32cc_xpcs *xpcs)
 {
 	/*Nothing for now*/
 	return 0;
 }
 
-static bool xpcs_has_valid_rx(struct s32gen1_xpcs *xpcs)
+static bool xpcs_has_valid_rx(struct s32cc_xpcs *xpcs)
 {
 	unsigned int val;
 
@@ -499,7 +499,7 @@ static bool xpcs_has_valid_rx(struct s32gen1_xpcs *xpcs)
 	return !!(val & RX_VALID_0);
 }
 
-static int xpcs_vreset(struct s32gen1_xpcs *xpcs)
+static int xpcs_vreset(struct s32cc_xpcs *xpcs)
 {
 	int ret = 0;
 
@@ -511,7 +511,7 @@ static int xpcs_vreset(struct s32gen1_xpcs *xpcs)
 	return ret;
 }
 
-static int xpcs_wait_vreset(struct s32gen1_xpcs *xpcs)
+static int xpcs_wait_vreset(struct s32cc_xpcs *xpcs)
 {
 	if (!xpcs)
 		return -EINVAL;
@@ -519,7 +519,7 @@ static int xpcs_wait_vreset(struct s32gen1_xpcs *xpcs)
 	return wait_reset(xpcs);
 }
 
-static int xpcs_reset_rx(struct s32gen1_xpcs *xpcs)
+static int xpcs_reset_rx(struct s32cc_xpcs *xpcs)
 {
 	struct device *dev = get_xpcs_device(xpcs);
 	int ret;
@@ -541,7 +541,7 @@ static int xpcs_reset_rx(struct s32gen1_xpcs *xpcs)
 	return 0;
 }
 
-static int xpcs_ref_clk_sel(struct s32gen1_xpcs *xpcs,
+static int xpcs_ref_clk_sel(struct s32cc_xpcs *xpcs,
 			    enum s32gen1_xpc_pll ref_pll)
 {
 	switch (ref_pll) {
@@ -562,7 +562,7 @@ static int xpcs_ref_clk_sel(struct s32gen1_xpcs *xpcs,
 	return 0;
 }
 
-static void xpcs_electrical_configure(struct s32gen1_xpcs *xpcs)
+static void xpcs_electrical_configure(struct s32cc_xpcs *xpcs)
 {
 	XPCS_WRITE_BITS(xpcs, VR_MII_GEN5_12G_16G_TX_EQ_CTRL0,
 			TX_EQ_MAIN_MASK, 0xC << TX_EQ_MAIN_OFF);
@@ -571,7 +571,7 @@ static void xpcs_electrical_configure(struct s32gen1_xpcs *xpcs)
 			TX0_TERM_MASK, 0x4 << TX0_TERM_OFF);
 }
 
-static int xpcs_vco_cfg(struct s32gen1_xpcs *xpcs, enum s32gen1_xpc_pll vco_pll)
+static int xpcs_vco_cfg(struct s32cc_xpcs *xpcs, enum s32gen1_xpc_pll vco_pll)
 {
 	unsigned int vco_ld = 0;
 	unsigned int vco_ref = 0;
@@ -629,7 +629,7 @@ static int xpcs_vco_cfg(struct s32gen1_xpcs *xpcs, enum s32gen1_xpc_pll vco_pll)
 	return 0;
 }
 
-static int xpcs_init_mplla(struct s32gen1_xpcs *xpcs)
+static int xpcs_init_mplla(struct s32cc_xpcs *xpcs)
 {
 	struct device *dev;
 	unsigned int val;
@@ -687,7 +687,7 @@ static int xpcs_init_mplla(struct s32gen1_xpcs *xpcs)
 	return 0;
 }
 
-static int xpcs_init_mpllb(struct s32gen1_xpcs *xpcs)
+static int xpcs_init_mpllb(struct s32cc_xpcs *xpcs)
 {
 	struct device *dev;
 	unsigned int val;
@@ -750,7 +750,7 @@ static int xpcs_init_mpllb(struct s32gen1_xpcs *xpcs)
 	return 0;
 }
 
-static void serdes_pma_high_freq_recovery(struct s32gen1_xpcs *xpcs)
+static void serdes_pma_high_freq_recovery(struct s32cc_xpcs *xpcs)
 {
 	/* PCS signal protection, PLL railout recovery */
 	XPCS_WRITE_BITS(xpcs, VR_MII_DBG_CTRL, SUPPRESS_LOS_DET | RX_DT_EN_CTL,
@@ -759,13 +759,13 @@ static void serdes_pma_high_freq_recovery(struct s32gen1_xpcs *xpcs)
 			PLL_CTRL, PLL_CTRL);
 }
 
-static void serdes_pma_configure_tx_eq_post(struct s32gen1_xpcs *xpcs)
+static void serdes_pma_configure_tx_eq_post(struct s32cc_xpcs *xpcs)
 {
 	XPCS_WRITE_BITS(xpcs, VR_MII_GEN5_12G_16G_TX_EQ_CTRL1,
 			TX_EQ_OVR_RIDE, TX_EQ_OVR_RIDE);
 }
 
-static int xpcs_init_plls(struct s32gen1_xpcs *xpcs)
+static int xpcs_init_plls(struct s32cc_xpcs *xpcs)
 {
 	int ret;
 	struct device *dev = get_xpcs_device(xpcs);
@@ -809,7 +809,7 @@ static int xpcs_init_plls(struct s32gen1_xpcs *xpcs)
 	return 0;
 }
 
-static int serdes_bifurcation_pll_transit(struct s32gen1_xpcs *xpcs,
+static int serdes_bifurcation_pll_transit(struct s32cc_xpcs *xpcs,
 					  enum s32gen1_xpc_pll target_pll)
 {
 	int ret = 0;
@@ -876,7 +876,7 @@ static int serdes_bifurcation_pll_transit(struct s32gen1_xpcs *xpcs,
 	return ret;
 }
 
-static int xpcs_configure(struct s32gen1_xpcs *xpcs,
+static int xpcs_configure(struct s32cc_xpcs *xpcs,
 			  const struct phylink_link_state *state)
 {
 	XPCS_WRITE_BITS(xpcs, SR_MII_CTRL, AN_ENABLE, 0);
@@ -889,7 +889,7 @@ static int xpcs_configure(struct s32gen1_xpcs *xpcs,
  * That means it should only modify link, duplex, speed
  * an_complete, pause.
  */
-static int xpcs_get_state(struct s32gen1_xpcs *xpcs,
+static int xpcs_get_state(struct s32cc_xpcs *xpcs,
 			  struct phylink_link_state *state)
 {
 	struct device *dev = get_xpcs_device(xpcs);
@@ -987,7 +987,7 @@ static int xpcs_get_state(struct s32gen1_xpcs *xpcs,
 	return 0;
 }
 
-static int xpcs_pre_pcie_2g5(struct s32gen1_xpcs *xpcs)
+static int xpcs_pre_pcie_2g5(struct s32cc_xpcs *xpcs)
 {
 	struct device *dev = get_xpcs_device(xpcs);
 	int ret;
@@ -1013,7 +1013,7 @@ static int xpcs_pre_pcie_2g5(struct s32gen1_xpcs *xpcs)
 	return ret;
 }
 
-static int xpcs_config(struct s32gen1_xpcs *xpcs,
+static int xpcs_config(struct s32cc_xpcs *xpcs,
 		       const struct phylink_link_state *state)
 {
 	struct device *dev = get_xpcs_device(xpcs);
@@ -1113,7 +1113,7 @@ static int xpcs_config(struct s32gen1_xpcs *xpcs,
 	return 0;
 }
 
-static void xpcs_release(struct s32gen1_xpcs *xpcs)
+static void xpcs_release(struct s32cc_xpcs *xpcs)
 {
 	if (xpcs) {
 		regmap_exit(xpcs->regmap);
@@ -1121,7 +1121,7 @@ static void xpcs_release(struct s32gen1_xpcs *xpcs)
 	}
 }
 
-static const struct s32gen1_xpcs_ops s32gen1_xpcs_ops = {
+static const struct s32cc_xpcs_ops s32cc_xpcs_ops = {
 	.init = xpcs_init,
 	.power_on = xpcs_power_on,
 	.config = xpcs_configure,
@@ -1136,9 +1136,9 @@ static const struct s32gen1_xpcs_ops s32gen1_xpcs_ops = {
 	.xpcs_config = xpcs_config,
 };
 
-const struct s32gen1_xpcs_ops *s32gen1_xpcs_get_ops(void)
+const struct s32cc_xpcs_ops *s32cc_xpcs_get_ops(void)
 {
-	return &s32gen1_xpcs_ops;
+	return &s32cc_xpcs_ops;
 }
-EXPORT_SYMBOL_GPL(s32gen1_xpcs_get_ops);
+EXPORT_SYMBOL_GPL(s32cc_xpcs_get_ops);
 MODULE_LICENSE("GPL v2");
diff --git a/drivers/phy/freescale/phy-fsl-s32gen1-serdes.c b/drivers/phy/freescale/phy-fsl-s32gen1-serdes.c
index 5b360e5df4d6..91d1a474e2e1 100644
--- a/drivers/phy/freescale/phy-fsl-s32gen1-serdes.c
+++ b/drivers/phy/freescale/phy-fsl-s32gen1-serdes.c
@@ -126,8 +126,8 @@ struct serdes_ctrl {
 };
 
 struct xpcs_ctrl {
-	struct s32gen1_xpcs *phys[2];
-	const struct s32gen1_xpcs_ops *ops;
+	struct s32cc_xpcs *phys[2];
+	const struct s32cc_xpcs_ops *ops;
 	void __iomem *base0, *base1;
 	bool powered_on[2];
 	bool initialized_clks;
@@ -615,7 +615,7 @@ static int serdes_phy_power_off(struct phy *p)
 	return 0;
 }
 
-struct s32gen1_xpcs *s32gen1_phy2xpcs(struct phy *phy)
+struct s32cc_xpcs *s32cc_phy2xpcs(struct phy *phy)
 {
 	struct serdes *serdes = phy_get_drvdata(phy);
 	struct xpcs_ctrl *xpcs = &serdes->xpcs;
@@ -623,7 +623,7 @@ struct s32gen1_xpcs *s32gen1_phy2xpcs(struct phy *phy)
 
 	return xpcs->phys[lane_id];
 }
-EXPORT_SYMBOL_GPL(s32gen1_phy2xpcs);
+EXPORT_SYMBOL_GPL(s32cc_phy2xpcs);
 
 static int xpcs_phy_configure(struct phy *phy, struct phylink_link_state *state)
 {
@@ -1005,7 +1005,7 @@ static int xpcs_dt_init(struct platform_device *pdev, struct serdes *serdes)
 		return -ENOMEM;
 	}
 
-	xpcs->ops = s32gen1_xpcs_get_ops();
+	xpcs->ops = s32cc_xpcs_get_ops();
 
 	return 0;
 }
diff --git a/include/linux/pcs/nxp-s32cc-xpcs.h b/include/linux/pcs/nxp-s32cc-xpcs.h
index 9ad2aee08571..1a9a7a8ce62b 100644
--- a/include/linux/pcs/nxp-s32cc-xpcs.h
+++ b/include/linux/pcs/nxp-s32cc-xpcs.h
@@ -10,7 +10,7 @@
 #include <linux/types.h>
 #include <linux/phylink.h>
 
-struct s32gen1_xpcs;
+struct s32cc_xpcs;
 
 enum pcie_xpcs_mode {
 	NOT_SHARED,
@@ -18,41 +18,41 @@ enum pcie_xpcs_mode {
 	PCIE_XPCS_2G5,
 };
 
-struct s32gen1_xpcs_ops {
-	int (*init)(struct s32gen1_xpcs **xpcs, struct device *dev,
+struct s32cc_xpcs_ops {
+	int (*init)(struct s32cc_xpcs **xpcs, struct device *dev,
 		    unsigned char id, void __iomem *base, bool ext_clk,
 		    unsigned long rate, enum pcie_xpcs_mode pcie_shared);
-	int (*power_on)(struct s32gen1_xpcs *xpcs);
-	int (*config)(struct s32gen1_xpcs *xpcs,
+	int (*power_on)(struct s32cc_xpcs *xpcs);
+	int (*config)(struct s32cc_xpcs *xpcs,
 		      const struct phylink_link_state *state);
-	int (*vreset)(struct s32gen1_xpcs *xpcs);
-	int (*wait_vreset)(struct s32gen1_xpcs *xpcs);
-	int (*init_plls)(struct s32gen1_xpcs *xpcs);
-	int (*reset_rx)(struct s32gen1_xpcs *xpcs);
-	void (*release)(struct s32gen1_xpcs *xpcs);
-	bool (*has_valid_rx)(struct s32gen1_xpcs *xpcs);
-	int (*pre_pcie_2g5)(struct s32gen1_xpcs *xpcs);
+	int (*vreset)(struct s32cc_xpcs *xpcs);
+	int (*wait_vreset)(struct s32cc_xpcs *xpcs);
+	int (*init_plls)(struct s32cc_xpcs *xpcs);
+	int (*reset_rx)(struct s32cc_xpcs *xpcs);
+	void (*release)(struct s32cc_xpcs *xpcs);
+	bool (*has_valid_rx)(struct s32cc_xpcs *xpcs);
+	int (*pre_pcie_2g5)(struct s32cc_xpcs *xpcs);
 
 	/* These function are planned to be used directly
 	 * by phylink in newer kernels (starting from 5.10).
 	 */
-	int (*xpcs_config)(struct s32gen1_xpcs *xpcs,
+	int (*xpcs_config)(struct s32cc_xpcs *xpcs,
 			const struct phylink_link_state *state);
-	int (*xpcs_get_state)(struct s32gen1_xpcs *xpcs,
+	int (*xpcs_get_state)(struct s32cc_xpcs *xpcs,
 			 struct phylink_link_state *state);
 };
 
-const struct s32gen1_xpcs_ops *s32gen1_xpcs_get_ops(void);
+const struct s32cc_xpcs_ops *s32cc_xpcs_get_ops(void);
 
 /**
- * s32gen1_phy2xpcs() - Get XPCS instance associated with a PHY
+ * s32cc_phy2xpcs() - Get XPCS instance associated with a PHY
  *
  * @phy: A generic PHY obtained from s32gen1 SerDes driver.
  *
  * The return value will be the XPCS instance associate with the
  * passed SerDes PHY.
  */
-struct s32gen1_xpcs *s32gen1_phy2xpcs(struct phy *phy);
+struct s32cc_xpcs *s32cc_phy2xpcs(struct phy *phy);
 
 #endif
 
-- 
2.25.1

