From eed4035eab087f18c34f1d2d043b8fdefb0143d4 Mon Sep 17 00:00:00 2001
From: Vlad Pelin <vlad.pelin@nxp.com>
Date: Tue, 29 Nov 2022 15:09:00 +0200
Subject: [PATCH 4/7] hse: add support for hse_memcpy and hse_memset

due to restrictions imposed on hse reserved memory
exposed through uio, it is not possible to use
standard string operations to access this memory

the solution is to add non-libc counterparts to
these operations that take care to respect the
alignement restrictions of this memory

Issue: ALB-9559
Upstream-Status: Pending 

Signed-off-by: Vlad Pelin <vlad.pelin@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 libhse/hse-mem.c | 71 ++++++++++++++++++++++++++++++++++++++++++++++++
 libhse/libhse.h  | 11 +++++++-
 2 files changed, 81 insertions(+), 1 deletion(-)

diff --git a/libhse/hse-mem.c b/libhse/hse-mem.c
index b2e392a..3d5954a 100644
--- a/libhse/hse-mem.c
+++ b/libhse/hse-mem.c
@@ -185,3 +185,74 @@ void hse_intl_mem_free(void *addr)
 {
 	_hse_mem_free(addr, true);
 }
+
+void *hse_memcpy(void *dest, const void *src, size_t size)
+{
+	const uint8_t *s = src;
+	uint8_t *d = dest;
+	const uint64_t *s64;
+	uint64_t *d64;
+
+	if (!size)
+		return dest;
+
+	/* write bytes if not 64bit-aligned */
+	while (((uintptr_t)d & 7)) {
+		*d++ = *s++;
+		if (!(--size))
+			return dest;
+	}
+
+	/* write 64bit if aligned */
+	d64 = (uint64_t *)d;
+	s64 = (uint64_t *)s;
+	for (; size >= 8; size -= 8)
+		*d64++ = *s64++;
+
+	/* write bytes for the rest of the buffer */
+	d = (uint8_t *)d64;
+	s = (uint8_t *)s64;
+	while (size-- > 0)
+		*d++ = *s++;
+
+	return dest;
+}
+
+void *hse_memset(void *dest, int fill, size_t size)
+{
+	uint8_t *d = dest;
+	uint64_t *d64;
+	uint64_t fill64 = (uint8_t)fill;
+
+	if (!size)
+		return dest;
+
+	/* write bytes if not 64bit-aligned */
+	while (((uintptr_t)d & 7)) {
+		*d = (uint8_t)fill;
+		d++;
+		if (!(--size))
+			return dest;
+	}
+
+	/* fill each byte with fill value */
+	fill64 |= fill64 << 8;
+	fill64 |= fill64 << 16;
+	fill64 |= fill64 << 32;
+
+	/* write 64bit */
+	d64 = (uint64_t *)d;
+	for (; size >= 8; size -= 8) {
+		*d64 = fill64;
+		d64++;
+	}
+
+	/* write bytes for the rest of the buffer */
+	d = (uint8_t *)d64;
+	while (size-- > 0)  {
+		*d = (uint8_t)fill;
+		d++;
+	}
+
+	return dest;
+}
diff --git a/libhse/libhse.h b/libhse/libhse.h
index 547482f..46f7e81 100644
--- a/libhse/libhse.h
+++ b/libhse/libhse.h
@@ -13,16 +13,25 @@
 #define HSE_CHANNEL_ANY    0xACu /* use any channel, no request ordering */
 #define HSE_CHANNEL_ADM    0u /* channel reserved for administrative services */
 
+#define DECLARE_SET_ZERO(stype, sname) \
+	typeof(stype) ((sname)) = {0}
+
 int hse_dev_open(void);
 void hse_dev_close(void);
 
 uint16_t hse_check_status(void);
 
-int hse_srv_req_sync(uint8_t channel, const void *srv_desc);
+int hse_srv_req_sync(uint8_t channel, const void *srv_desc, size_t size);
 
 void *hse_mem_alloc(size_t size);
 void hse_mem_free(void *addr);
 
+/* mapped hse-accesible memory has certain restrictions that makes the use of
+ * standard string routines impossible; these should be used instead of their
+ * libc counterparts */
+void *hse_memcpy(void *dest, const void *src, size_t size);
+void *hse_memset(void *dest, int fill, size_t size);
+
 uint64_t hse_virt_to_dma(const void *addr);
 
 #endif /* LIBHSE_H */
-- 
2.17.1

