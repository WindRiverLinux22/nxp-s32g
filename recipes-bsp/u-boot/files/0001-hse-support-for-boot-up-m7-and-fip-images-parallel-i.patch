From 569aa28a1c5c4c048ebd39b78ed9bdd374c257f6 Mon Sep 17 00:00:00 2001
From: Meng Li <Meng.Li@windriver.com>
Date: Sat, 25 Feb 2023 13:49:24 +0800
Subject: [PATCH] hse: support for boot up m7 and fip images parallel in secure
 mode

Issue: LINUXEXEC-25112

Install 2 core reset items for M7 and A53 cores separately so that
HSE firmware can boot up m7 and fip images parallel.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-s32/s32-cc/hse_adv_secboot.c | 53 ++++++++++++++++++----
 include/hse/hse_abi.h                      |  1 +
 2 files changed, 46 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
index 82c0bbb8b8..4fe55f33aa 100644
--- a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
+++ b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
@@ -239,11 +239,11 @@ int hse_import_key(struct hse_private *priv, u32 *recv_buf)
 	return 0;
 }
 
-int hse_install_cr_entry(struct hse_private *priv, u32 *recv_buf)
+int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf)
 {
 	int ret;
 
-	printf("\tGenerating Core Reset Entry...\n");
+	printf("\tGenerating Fip Core Reset Entry...\n");
 	memset((void *)&priv->cr_entry, 0, sizeof(struct hse_cr_entry));
 	memset((void *)&priv->srv_desc, 0, sizeof(struct hse_srv_desc));
 
@@ -254,12 +254,44 @@ int hse_install_cr_entry(struct hse_private *priv, u32 *recv_buf)
 #else
 	priv->cr_entry.core_id = HSE_APP_CORE3;
 #endif
-	priv->cr_entry.core_id = HSE_APP_M7_0;
 	priv->cr_entry.cr_sanction = HSE_CR_SANCTION_KEEP_CORE_IN_RESET;
-	priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_1 | HSE_SMR_ENTRY_2;
+	priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_2;
 	priv->cr_entry.pass_reset = priv->app_boot_hdr.ram_entry;
 	priv->cr_entry.start_option = HSE_CR_AUTO_START;
 
+	priv->srv_desc.srv_id = HSE_SRV_ID_CORE_RESET_ENTRY_INSTALL;
+	priv->srv_desc.cr_install_req.cr_entry_index = 2u;
+	priv->srv_desc.cr_install_req.cr_entry_addr =
+					(uintptr_t)&priv->cr_entry;
+
+	flush_dcache_range((u64)priv,
+			   (u64)priv + sizeof(struct hse_private));
+
+	ret = hse_send_recv(HSE_CHANNEL_GENERAL,
+			    (u32)(uintptr_t)&priv->srv_desc,
+			    recv_buf);
+	if (ret) {
+		printf("ERROR: core reset entry install failed!\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+int hse_install_m7_cr_entry(struct hse_private *priv, u32 *recv_buf)
+{
+	int ret;
+
+	printf("\tGenerating M7 Core Reset Entry...\n");
+	memset((void *)&priv->cr_entry, 0, sizeof(struct hse_cr_entry));
+	memset((void *)&priv->srv_desc, 0, sizeof(struct hse_srv_desc));
+
+	priv->cr_entry.core_id = HSE_APP_M7_0;
+	priv->cr_entry.cr_sanction = HSE_CR_SANCTION_KEEP_CORE_IN_RESET;
+	priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_1;
+	priv->cr_entry.pass_reset = priv->app_boot_hdr.m7_entry_bak;
+	priv->cr_entry.start_option = HSE_CR_AUTO_START;
+
 	priv->srv_desc.srv_id = HSE_SRV_ID_CORE_RESET_ENTRY_INSTALL;
 	priv->srv_desc.cr_install_req.cr_entry_index = 1u;
 	priv->srv_desc.cr_install_req.cr_entry_addr =
@@ -279,6 +311,7 @@ int hse_install_cr_entry(struct hse_private *priv, u32 *recv_buf)
 	return 0;
 }
 
+
 int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 {
 	struct hse_smr_entry *smr_entry;
@@ -377,9 +410,9 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	 *  For M7 code, it must align with 128 byte in ram,
 	 * so get the diff between load address and entry address
 	 */
-	align_diff = priv->app_boot_hdr.ram_entry - priv->app_boot_hdr.ram_load;
+	align_diff = priv->app_boot_hdr.m7_entry_bak - priv->app_boot_hdr.ram_load;
 	smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET + align_diff;
-	smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_entry;
+	smr_entry->smr_dst_addr = priv->app_boot_hdr.m7_entry_bak;
 	smr_entry->smr_size = m7_size;
 	smr_entry->config_flags = (HSE_SMR_CFG_FLAG_SD_FLASH |
 				   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
@@ -395,7 +428,7 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	smr_install_req->access_mode = HSE_ACCESS_MODE_ONE_PASS;
 	smr_install_req->entry_index = 1u;
 	smr_install_req->smr_entry_addr = (uintptr_t)smr_entry;
-	smr_install_req->smr_data_addr = priv->app_boot_hdr.ram_entry;
+	smr_install_req->smr_data_addr = priv->app_boot_hdr.m7_entry_bak;
 	smr_install_req->smr_data_len = m7_size;
 	smr_install_req->smr_auth_tag_addr = (uintptr_t)priv->m7_signature;
 	smr_install_req->smr_auth_tag_len = M7_SIGNATURE_SIZE;
@@ -652,7 +685,11 @@ static int do_hse_secboot_enable(cmd_tbl_t *cmdtp, int flag,
 	if (ret)
 		return ret;
 
-	ret = hse_install_cr_entry(priv, &hse_recv);
+	ret = hse_install_m7_cr_entry(priv, &hse_recv);
+	if (ret)
+		return ret;
+
+	ret = hse_install_fip_cr_entry(priv, &hse_recv);
 	if (ret)
 		return ret;
 
diff --git a/include/hse/hse_abi.h b/include/hse/hse_abi.h
index 90156b89a8..225ebbe66f 100644
--- a/include/hse/hse_abi.h
+++ b/include/hse/hse_abi.h
@@ -155,6 +155,7 @@ struct app_boot_hdr {
 	u32 ram_load;
 	u32 ram_entry;
 	u32 code_len;
+	u32 m7_entry_bak;
 };
 
 /**
-- 
2.36.1

