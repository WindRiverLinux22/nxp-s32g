From f2ae1a33b4e408aff5f4b9ba8811d46774c3245b Mon Sep 17 00:00:00 2001
From: Quanyang Wang <quanyang.wang@windriver.com>
Date: Thu, 6 Apr 2023 10:33:10 +0800
Subject: [PATCH] phy: s32cc-serdes: configure REF_USE_PAD bit during resetting

When Serdes asserts a reset, the registers as below should be configured
correctly according to the source code of s32_serdes_init in the git
repo u-boot-s32 bsp31.0-2020.04.

1. SUBSYS_MODE bits in SS_RW_REG_0 register
2. CLKEN bit in SS_RW_REG_0 register
3. REF_USE_PAD bit in PCIE_PHY_GEN_CTRL register

Despite the chapter 1.4 "Selecting a working mode" in the document "S32
SerDes Subsystem Reference Manual" doesn't mention the above 3rd point,
the result suggests that lacking it will result that pfe2 doesn't
function in serdes0 pcie0-xpcs1 share mode (mode 2) when "hwconfig" is set
to be:

"serdes0:mode=pcie&xpcs1,clock=int,fmhz=100;pcie0:mode=rc;xpcs0_1:speed=1G;serdes1:mode=xpcs0&xpcs1,clock=int,fmhz=100;xpcs1_0:speed=1G;xpcs1_1:speed=1G"

Upstream-Status: Pending

Signed-off-by: Quanyang Wang <quanyang.wang@windriver.com>
---
 drivers/phy/nxp/s32cc-serdes.c | 41 ++++++++++++++++++++--------------
 1 file changed, 24 insertions(+), 17 deletions(-)

diff --git a/drivers/phy/nxp/s32cc-serdes.c b/drivers/phy/nxp/s32cc-serdes.c
index 5005ce8444..1252d90f1e 100644
--- a/drivers/phy/nxp/s32cc-serdes.c
+++ b/drivers/phy/nxp/s32cc-serdes.c
@@ -252,7 +252,7 @@ static int pci_phy_power_on_common(struct serdes *serdes)
 {
 	struct serdes_ctrl *sctrl = &serdes->ctrl;
 	struct pcie_ctrl *pcie = &serdes->pcie;
-	u32 ctrl, reg0, val, mask;
+	u32 ctrl, reg0;
 	int ret;
 
 	if (pcie->initialized_phy)
@@ -268,23 +268,8 @@ static int pci_phy_power_on_common(struct serdes *serdes)
 	if (sctrl->phy_mode == SRIS)
 		ctrl |= RX_SRIS_MODE_MASK;
 
-	if (sctrl->ext_clk)
-		ctrl |= REF_USE_PAD_MASK;
-	else
-		ctrl &= ~REF_USE_PAD_MASK;
-
-	/* Monitor Serdes MPLL state */
 	writel(ctrl, UPTR(sctrl->ss_base) + PCIE_PHY_GEN_CTRL);
 
-	mask = MPLL_STATE_MASK;
-	ret = readl_poll_timeout(UPTR(serdes->ctrl.ss_base) + PCIE_PHY_MPLLA_CTRL,
-				 val, (val & mask) == mask,
-				 SERDES_LOCK_TIMEOUT_US);
-	if (ret) {
-		dev_err(serdes->dev, "Failed to lock PCIe phy\n");
-		return -ETIMEDOUT;
-	}
-
 	/* Set PHY register access to CR interface */
 	reg0 = readl(UPTR(sctrl->ss_base) + SS_RW_REG_0);
 	reg0 |=  PHY0_CR_PARA_SEL_MASK;
@@ -879,7 +864,7 @@ static int deassert_reset(struct serdes *serdes)
 static int init_serdes(struct serdes *serdes)
 {
 	struct serdes_ctrl *ctrl = &serdes->ctrl;
-	u32 reg0;
+	u32 reg0, gen_ctrl, mask, val;
 	int ret;
 
 	ret = assert_reset(serdes);
@@ -904,10 +889,32 @@ static int init_serdes(struct serdes *serdes)
 
 	udelay(100);
 
+	gen_ctrl = readl(UPTR(ctrl->ss_base) + PCIE_PHY_GEN_CTRL);
+	if (ctrl->ext_clk)
+		gen_ctrl |= REF_USE_PAD_MASK;
+	else
+		gen_ctrl &= ~REF_USE_PAD_MASK;
+	writel(gen_ctrl, UPTR(ctrl->ss_base) + PCIE_PHY_GEN_CTRL);
+
 	ret = deassert_reset(serdes);
 	if (ret)
 		return ret;
 
+	/* Only serdes mode 1, 2, 5 contains pcie component and we need
+	 * to monitor serdes MPLL state.
+	 */
+	if (ctrl->ss_mode == 1 || ctrl->ss_mode == 2 || ctrl->ss_mode == 5) {
+		/* Monitor Serdes MPLL state */
+		mask = MPLL_STATE_MASK;
+		ret = readl_poll_timeout(UPTR(serdes->ctrl.ss_base) + PCIE_PHY_MPLLA_CTRL,
+					val, (val & mask) == mask,
+					SERDES_LOCK_TIMEOUT_US);
+		if (ret) {
+			dev_err(serdes->dev, "Failed to lock PCIe phy\n");
+			return -ETIMEDOUT;
+		}
+	}
+
 	dev_info(serdes->dev, "Using mode %d for SerDes subsystem\n",
 		 ctrl->ss_mode);
 
-- 
2.36.1

