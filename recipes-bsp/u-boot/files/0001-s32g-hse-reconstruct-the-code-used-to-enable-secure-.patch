From 3c57f3664e85ba76c76dd530fa35bea58c163a40 Mon Sep 17 00:00:00 2001
From: Meng Li <Meng.Li@windriver.com>
Date: Tue, 28 Mar 2023 10:27:43 +0800
Subject: [PATCH] s32g: hse: reconstruct the code used to enable secure boot
 feature

Reconstruct the code used to enable secure boot feature, so
that it can support for extending more kinds of secure boot
type with consolidate code.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-s32/s32-cc/hse_adv_secboot.c | 252 +++++++++++++++------
 include/hse/hse_abi.h                      |  13 +-
 2 files changed, 199 insertions(+), 66 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
index cf5b21b99e..9879b0170a 100644
--- a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
+++ b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
@@ -88,7 +88,7 @@ static u64 get_fip_toc_offset(struct hse_private *priv, struct uuid *search)
 	struct fip_toc_entry *toc_entry;
 	uintptr_t fip_hdr_start, fip_hdr_end;
 
-	fip_hdr_start = (uintptr_t)priv->app_boot_hdr.ram_load;
+	fip_hdr_start = (uintptr_t)priv->buf_space + APP_CODE_OFFSET;
 	toc_header = (struct fip_toc_header *)fip_hdr_start;
 	toc_entry = (struct fip_toc_entry *)(toc_header + 1);
 
@@ -129,16 +129,43 @@ static u32 get_fip_sign_mmc(struct hse_private *priv)
 	return get_fip_start(priv) + sign_offset;
 }
 
-static uintptr_t get_fip_sign_sram(struct hse_private *priv)
+static uintptr_t get_fip_sign_data(struct hse_private *priv)
 {
-	uintptr_t fip_hdr_start = (uintptr_t)priv->app_boot_hdr.ram_load;
 	uintptr_t sign_offset;
+	u64 sign_addr;
+
+	switch (priv->ivt.boot_type) {
+		case NXP_SEC_BOOT:
+			memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
+			hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+					 (priv->app_boot_hdr.code_len / 512) + 1);
+			sign_offset = (uintptr_t)get_fip_sign_offset(priv);
+			if (!sign_offset) {
+				printf("ERROR: FIP signature read failed!\n");
+				return -ENOMEM;
+			}
+			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET + sign_offset;
+			memcpy((void *)priv->fip_signature, (void *)sign_addr, HSE_FIP_AUTH_LEN);
+			break;
+		default:
+			printf("ERROR: invalid secure boot type!\n");
+			return -1;
+	}
 
-	sign_offset = (uintptr_t)get_fip_sign_offset(priv);
-	if (!sign_offset)
-		return 0;
+	return 0;
+}
 
-	return fip_hdr_start + sign_offset;
+static int get_signature(struct hse_private *priv)
+{
+	int ret = 0;
+
+	ret = get_fip_sign_data(priv);
+	if (ret) {
+		printf("ERROR: get fip signature data failed!\n");
+		return ret;
+	}
+
+	return ret;
 }
 
 int hse_format_key_store(struct hse_private *priv, u32 *recv_buf)
@@ -223,10 +250,38 @@ int hse_install_cr_entry(struct hse_private *priv, u32 *recv_buf)
 {
 	int ret;
 
-	printf("\tGenerating Core Reset Entry...\n");
+	flush_dcache_range((u64)priv,
+			   (u64)priv + sizeof(struct hse_private));
+
+	ret = hse_send_recv(HSE_CHANNEL_GENERAL,
+			    (u32)(uintptr_t)&priv->srv_desc,
+			    recv_buf);
+	if (ret) {
+		printf("ERROR: core reset entry install failed!\n");
+		return ret;
+	}
+
+	return 0;
+}
+
+int hse_install_fip_cr_entry(struct hse_private *priv, u32 *recv_buf)
+{
+	int ret;
+
+	printf("\tGenerating Fip Core Reset Entry...\n");
 	memset((void *)&priv->cr_entry, 0, sizeof(struct hse_cr_entry));
 	memset((void *)&priv->srv_desc, 0, sizeof(struct hse_srv_desc));
 
+	switch (priv->ivt.boot_type) {
+		case NXP_SEC_BOOT:
+			priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_1;
+			priv->cr_entry.pass_reset = priv->app_boot_hdr.ram_entry;
+			break;
+		default:
+			printf("ERROR: invalid secure boot type!\n");
+			return -1;
+	}
+
 #if defined(CONFIG_ARCH_S32G2)
 	priv->cr_entry.core_id = HSE_APP_CORE3;
 #elif defined(CONFIG_ARCH_S32G3)
@@ -235,8 +290,6 @@ int hse_install_cr_entry(struct hse_private *priv, u32 *recv_buf)
 	priv->cr_entry.core_id = HSE_APP_CORE3;
 #endif
 	priv->cr_entry.cr_sanction = HSE_CR_SANCTION_KEEP_CORE_IN_RESET;
-	priv->cr_entry.preboot_smr_map = HSE_SMR_ENTRY_1;
-	priv->cr_entry.pass_reset = priv->app_boot_hdr.ram_entry;
 	priv->cr_entry.start_option = HSE_CR_AUTO_START;
 
 	priv->srv_desc.srv_id = HSE_SRV_ID_CORE_RESET_ENTRY_INSTALL;
@@ -244,6 +297,32 @@ int hse_install_cr_entry(struct hse_private *priv, u32 *recv_buf)
 	priv->srv_desc.cr_install_req.cr_entry_addr =
 					(uintptr_t)&priv->cr_entry;
 
+	ret = hse_install_cr_entry(priv, recv_buf);
+	if (ret) {
+		printf("ERROR: install FIP smr failed!\n");
+		return ret;
+	}
+
+	return ret;
+}
+
+int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
+{
+	int ret = 0;
+
+	ret = hse_install_fip_cr_entry(priv, recv_buf);
+	if (ret) {
+		printf("ERROR: fip core reset entry install failed!\n");
+		return ret;
+	}
+
+	return ret;
+}
+
+int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf)
+{
+	int ret = 0;
+
 	flush_dcache_range((u64)priv,
 			   (u64)priv + sizeof(struct hse_private));
 
@@ -251,33 +330,31 @@ int hse_install_cr_entry(struct hse_private *priv, u32 *recv_buf)
 			    (u32)(uintptr_t)&priv->srv_desc,
 			    recv_buf);
 	if (ret) {
-		printf("ERROR: core reset entry install failed!\n");
+		printf("ERROR: smr entry install failed!\n");
 		return ret;
 	}
 
 	return 0;
 }
 
-int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf)
+int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 {
 	struct hse_smr_entry *smr_entry;
 	struct hse_smr_install_srv *smr_install_req;
 	u32 fip_size;
-	int ret;
+	int ret = 0;
 
 	smr_entry = &(priv->smr_entry);
 	smr_install_req = &(priv->srv_desc.smr_install_req);
 
-	printf("\tGenerating Secure Memory Region entry...\n");
+	printf("\tGenerating Fip Secure Memory Region entry...\n");
 	memset((void *)&priv->smr_entry, 0, sizeof(struct hse_smr_entry));
 	memset((void *)&priv->srv_desc, 0, sizeof(struct hse_srv_desc));
 
-	/* need to recopy FIP to pass verification */
-	memset((void *)(uintptr_t)priv->app_boot_hdr.ram_load - APP_CODE_OFFSET, 0,
-	       priv->app_boot_hdr.code_len + APP_CODE_OFFSET);
-	hse_mmc_read((void *)(uintptr_t)priv->app_boot_hdr.ram_load - APP_CODE_OFFSET,
-		     priv->ivt.app_boot / 512,
-		     (priv->app_boot_hdr.code_len / 512) + 1);
+	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
+	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
+	hse_mmc_read((void *)priv->buf_space, priv->ivt.app_boot / 512,
+				 (priv->app_boot_hdr.code_len / 512) + 1);
 
 	fip_size = get_fip_size(priv);
 	if (!fip_size) {
@@ -285,12 +362,20 @@ int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf)
 		return -ENOMEM;
 	}
 
-	/**
-	 * no address of actual code start, need to reference app bl header
-	 * fip start is at app_bl_header + 0x40
-	 */
-	smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET;
-	smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load;
+	switch (priv->ivt.boot_type) {
+		case NXP_SEC_BOOT:
+			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET;
+			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load;
+			smr_entry->auth_tag = get_fip_sign_mmc(priv);
+
+			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET);
+			smr_install_req->smr_data_len = fip_size - HSE_FIP_AUTH_LEN;
+			break;
+		default:
+			printf("ERROR: invalid secure boot type!\n");
+			return -1;
+	}
+
 	smr_entry->smr_size = fip_size - HSE_FIP_AUTH_LEN;
 	smr_entry->config_flags = (HSE_SMR_CFG_FLAG_SD_FLASH |
 				   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
@@ -298,7 +383,6 @@ int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	smr_entry->key_handle = HSE_BOOT_KEY_HANDLE;
 	smr_entry->sign_sch.sign_scheme = HSE_SIGN_RSASSA_PKCS1_V15;
 	smr_entry->sign_sch.sch.hash_algo = HSE_HASH_ALGO_SHA_1;
-	smr_entry->auth_tag = get_fip_sign_mmc(priv);
 	smr_entry->decrypt_key_handle = HSE_SMR_DECRYPT_KEY_HANDLE_NOT_USED;
 	smr_entry->version_offset = 0;
 
@@ -306,23 +390,29 @@ int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf)
 	smr_install_req->access_mode = HSE_ACCESS_MODE_ONE_PASS;
 	smr_install_req->entry_index = 1u;
 	smr_install_req->smr_entry_addr = (uintptr_t)smr_entry;
-	smr_install_req->smr_data_addr = priv->app_boot_hdr.ram_load;
-	smr_install_req->smr_data_len = fip_size - HSE_FIP_AUTH_LEN;
 	smr_install_req->smr_auth_tag_addr = (uintptr_t)priv->fip_signature;
 	smr_install_req->smr_auth_tag_len = HSE_FIP_AUTH_LEN;
 
-	flush_dcache_range((u64)priv,
-			   (u64)priv + sizeof(struct hse_private));
+	ret = hse_install_smr_entry(priv, recv_buf);
+	if (ret) {
+		printf("ERROR: install FIP smr failed!\n");
+		return ret;
+	}
 
-	ret = hse_send_recv(HSE_CHANNEL_GENERAL,
-			    (u32)(uintptr_t)&priv->srv_desc,
-			    recv_buf);
+	return ret;
+}
+
+int hse_install_smr_entries(struct hse_private *priv, u32 *recv_buf)
+{
+	int ret = 0;
+
+	ret = hse_install_fip_smr_entry(priv, recv_buf);
 	if (ret) {
-		printf("ERROR: smr entry install failed!\n");
+		printf("ERROR: fip smr entry install failed!\n");
 		return ret;
 	}
 
-	return 0;
+	return ret;
 }
 
 int hse_generate_sys_img(struct hse_private *priv, u32 *recv_buf)
@@ -440,18 +530,64 @@ int hse_enable_mus(struct hse_private *priv, u32 *recv_buf)
 	return 0;
 }
 
+static int get_ivt(struct hse_private *priv)
+{
+	int ret = 0;
+
+	ret = hse_mmc_read((void *)&priv->ivt, HSE_IVT_BLK, 1);
+
+	return ret;
+}
+
+static int get_app_header(struct hse_private *priv)
+{
+	int ret = 0;
+
+	ret = hse_mmc_read((void *)&priv->app_boot_hdr,
+			   (priv->ivt.app_boot / 512), 1);
+
+	return ret;
+}
+
+static int get_public_key(struct hse_private *priv, char *pubkey_file)
+{
+	char mmcdevpart[4];
+	long long len_read;
+	int ret = 0;
+
+	snprintf(mmcdevpart, sizeof(mmcdevpart), "%s:%s",
+		 env_get("mmcdev"), env_get("mmcpart"));
+	ret = fs_set_blk_dev("mmc", mmcdevpart, FS_TYPE_FAT);
+	if (ret) {
+		printf("ERROR: could not set block device!\n");
+		return ret;
+	}
+	ret = fs_read(pubkey_file, (uintptr_t)priv->rsa_pubkey, 0, 0, &len_read);
+	if (ret < 0) {
+		printf("ERROR: could not read public key file!\n");
+		return ret;
+	}
+
+	memcpy(priv->rsa_modulus,
+		   (priv->rsa_pubkey + MODULUS_OFFSET),
+		   MODULUS_SIZE);
+	memcpy(priv->rsa_exponent,
+		   (priv->rsa_pubkey + EXPONENT_OFFSET),
+		   EXPONENT_SIZE);
+
+	return ret;
+}
+
+
 static int do_hse_secboot_enable(cmd_tbl_t *cmdtp, int flag,
 				 int argc, char * const argv[])
 {
 	struct hse_private *priv;
 	char *pubkey_file;
-	char mmcdevpart[4];
 	u16 hse_status_ret;
 	u32 hse_recv;
 	u64 hse_resmem;
-	long long len_read;
 	int hse_nodeoffset, ret;
-	uintptr_t fip_sign_sram;
 
 	/* check if hse has been initialised */
 	hse_status_ret = hse_mu_check_status();
@@ -487,48 +623,34 @@ static int do_hse_secboot_enable(cmd_tbl_t *cmdtp, int flag,
 	memset((void *)priv, 0, sizeof(struct hse_private));
 
 	/* read ivt block */
-	ret = hse_mmc_read((void *)&priv->ivt, HSE_IVT_BLK, 1);
+	ret = get_ivt(priv);
 	if (ret) {
 		printf("ERROR: ivt read failed!\n");
 		return ret;
 	}
 
 	/* read app boot code header */
-	ret = hse_mmc_read((void *)&priv->app_boot_hdr,
-			   (priv->ivt.app_boot / 512), 1);
+	ret = get_app_header(priv);
 	if (ret) {
 		printf("ERROR: app boot code header read failed!\n");
 		return ret;
 	}
 
-	fip_sign_sram = get_fip_sign_sram(priv);
-	if (!fip_sign_sram) {
-		printf("ERROR: FIP signature read failed!\n");
-		return -ENOMEM;
+	/* get signature data */
+	ret = get_signature(priv);
+	if (ret) {
+		printf("ERROR: get signature data failed!\n");
+		return ret;
 	}
-	memcpy((void *)priv->fip_signature, (void *)fip_sign_sram, HSE_FIP_AUTH_LEN);
 
 	/* read public key file */
-	snprintf(mmcdevpart, sizeof(mmcdevpart), "%s:%s",
-		 env_get("mmcdev"), env_get("mmcpart"));
-	ret = fs_set_blk_dev("mmc", mmcdevpart, FS_TYPE_FAT);
+	ret = get_public_key(priv, pubkey_file);
 	if (ret) {
-		printf("ERROR: could not set block device!\n");
+		printf("ERROR: get public key failed!\n");
 		return ret;
 	}
-	ret = fs_read(pubkey_file, (uintptr_t)priv->rsa_pubkey, 0, 0, &len_read);
-	if (ret < 0) {
-		printf("ERROR: could not read public key file!\n");
-		return ret;
-	}
-
-	memcpy(priv->rsa_modulus,
-	       (priv->rsa_pubkey + MODULUS_OFFSET),
-	       MODULUS_SIZE);
-	memcpy(priv->rsa_exponent,
-	       (priv->rsa_pubkey + EXPONENT_OFFSET),
-	       EXPONENT_SIZE);
 
+	/* enable hse mailbox */
 	ret = hse_enable_mus(priv, &hse_recv);
 	if (ret)
 		return ret;
@@ -546,11 +668,11 @@ static int do_hse_secboot_enable(cmd_tbl_t *cmdtp, int flag,
 	if (ret)
 		return ret;
 
-	ret = hse_install_smr_entry(priv, &hse_recv);
+	ret = hse_install_smr_entries(priv, &hse_recv);
 	if (ret)
 		return ret;
 
-	ret = hse_install_cr_entry(priv, &hse_recv);
+	ret = hse_install_cr_entries(priv, &hse_recv);
 	if (ret)
 		return ret;
 
diff --git a/include/hse/hse_abi.h b/include/hse/hse_abi.h
index de5ed212de..79616a539b 100644
--- a/include/hse/hse_abi.h
+++ b/include/hse/hse_abi.h
@@ -196,7 +196,8 @@ struct ivt {
 	u8 reserved3[168];
 	u32 gmac[4];
 	/* pad to block size - 512 bytes */
-	u8 reserved4[256];
+	u32 boot_type;
+	u8 reserved4[252];
 } __packed;
 
 /**
@@ -460,6 +461,8 @@ struct hse_srv_desc {
  * @publish_offset: offset at which to write the updated sys_img
  * @nvm_catalog: nvm key catalog
  * @ram_catalog: ram key catalog
+ * @buf_space: buffer used to save tmp data, size 0x150200,
+ *             this buffer is used to save the atf or autosar images that are all less than 1.3 MB
  */
 struct hse_private {
 	struct ivt ivt;
@@ -479,6 +482,14 @@ struct hse_private {
 	u32 publish_offset;
 	struct hse_key_group_cfg_entry nvm_catalog[20];
 	struct hse_key_group_cfg_entry ram_catalog[11];
+	u8 buf_space[1376768];
 };
 
+enum boot_type {
+	/* boot types defines */
+	NON_SEC_BOOT = 0,
+	NXP_SEC_BOOT,
+};
+
+
 #endif /* HSE_ABI_H */
-- 
2.17.1

