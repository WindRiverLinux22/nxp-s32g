From 6127b28ff902c8edcf5ecb508b674638196f1a7f Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Thu, 14 Jul 2022 10:43:24 +0300
Subject: [PATCH 029/102] pcie: s32cc: Remove PCIe mode reporting from SerDes
 driver

Issue: ALB-8357
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 .../mach-s32/include/s32-cc/serdes_hwconfig.h |  6 +--
 arch/arm/mach-s32/s32-cc/serdes_hwconfig.c    | 47 -------------------
 drivers/pci/pcie_s32gen1.c                    |  2 +-
 drivers/pci/serdes_s32gen1.c                  |  8 ----
 4 files changed, 3 insertions(+), 60 deletions(-)

diff --git a/arch/arm/mach-s32/include/s32-cc/serdes_hwconfig.h b/arch/arm/mach-s32/include/s32-cc/serdes_hwconfig.h
index 0fa83e97bc..3eac84e2d6 100644
--- a/arch/arm/mach-s32/include/s32-cc/serdes_hwconfig.h
+++ b/arch/arm/mach-s32/include/s32-cc/serdes_hwconfig.h
@@ -119,10 +119,8 @@ enum serdes_clock_fmhz s32_serdes_get_clock_fmhz_from_hwconfig(int id);
 enum serdes_xpcs_mode s32_serdes_get_xpcs_cfg_from_hwconfig(int id);
 enum serdes_mode s32_serdes_get_op_mode_from_hwconfig(int id);
 enum serdes_phy_mode s32_serdes_get_phy_mode_from_hwconfig(int id);
-bool s32_serdes_is_xpcs_cfg_valid(int id, enum serdes_clock_fmhz freq);
-int s32_serdes_get_mode_str(enum serdes_dev_type mode,
-			    enum serdes_xpcs_mode xpcs_mode,
-			    char *buf);
+bool s32_serdes_is_cfg_valid(int id);
+bool s32_serdes_has_mode5_enabled(int id);
 bool is_pcie_enabled_in_hwconfig(int id);
 int apply_dm_hwconfig_fixups(void);
 int apply_fdt_hwconfig_fixups(void *blob);
diff --git a/arch/arm/mach-s32/s32-cc/serdes_hwconfig.c b/arch/arm/mach-s32/s32-cc/serdes_hwconfig.c
index 78be1761df..353d529fae 100644
--- a/arch/arm/mach-s32/s32-cc/serdes_hwconfig.c
+++ b/arch/arm/mach-s32/s32-cc/serdes_hwconfig.c
@@ -17,53 +17,6 @@
 #define SERDES_SGMII_MODE_NONE_STR "None"
 #define SERDES_NAME_SIZE 32
 
-static const char xpcs_str[][64] = {
-	"[INVALID XPCS CFG]",
-	"[XPCS0 1G, XPCS1 OFF(PCIex1)]",
-	"[XPCS0 OFF(PCIex1), XPCS1 1G]",
-	"[XPCS0 1G, XPCS1 1G]",
-	"[XPCS0 2.5G, XPCS1 OFF]",
-};
-
-static inline
-const char *s32_serdes_get_xpcs_str(enum serdes_xpcs_mode mode)
-{
-	if (mode > SGMII_INAVALID && mode <= SGMII_XPCS_LAST)
-		return xpcs_str[mode];
-
-	return xpcs_str[SGMII_INAVALID];
-}
-
-int s32_serdes_get_mode_str(enum serdes_dev_type mode,
-			    enum serdes_xpcs_mode xpcs_mode,
-			    char *buf)
-{
-	char *start = buf;
-
-	if (mode & PCIE_RC)
-		start += sprintf(start, SERDES_RC_MODE_STR);
-	if (mode & PCIE_EP)
-		start += sprintf(start, SERDES_EP_MODE_STR);
-	if (mode & SGMII) {
-		if (xpcs_mode == SGMII_XPCS0 || xpcs_mode == SGMII_XPCS1) {
-			if (start != buf)
-				start += sprintf(start, "(x1)&");
-			start += sprintf(start, SERDES_SGMII_MODE_STR);
-		} else if (xpcs_mode != SGMII_INAVALID) {
-			start += sprintf(start, SERDES_SGMII_MODE_STR "(x2)");
-		}
-
-		start += sprintf(start, " %s",
-				s32_serdes_get_xpcs_str(xpcs_mode));
-	} else if (start != buf) {
-		start += sprintf(start, "(x2)");
-	} else {
-		start += sprintf(start, "Not configured");
-	}
-
-	return start - buf;
-}
-
 bool is_pcie_enabled_in_hwconfig(int id)
 {
 	enum serdes_dev_type pcie_mode;
diff --git a/drivers/pci/pcie_s32gen1.c b/drivers/pci/pcie_s32gen1.c
index 3e42abcedc..e6866ccc9f 100644
--- a/drivers/pci/pcie_s32gen1.c
+++ b/drivers/pci/pcie_s32gen1.c
@@ -599,7 +599,7 @@ static int s32_pcie_check_phy_mode(int id, const char *mode)
 static bool s32_pcie_init(void __iomem *dbi, int id, bool rc_mode,
 			  enum serdes_link_width linkwidth)
 {
-	debug("PCIe%d: Configure %s\n", id, PCIE_EP_RC_MODE(!rc_mode));
+	printf("Configuring PCIe%d as %s\n", id, PCIE_EP_RC_MODE(!rc_mode));
 
 	/* Set device type */
 	if (rc_mode)
diff --git a/drivers/pci/serdes_s32gen1.c b/drivers/pci/serdes_s32gen1.c
index cb2918e9de..9640c3b090 100644
--- a/drivers/pci/serdes_s32gen1.c
+++ b/drivers/pci/serdes_s32gen1.c
@@ -26,7 +26,6 @@
 #include "serdes_xpcs_regs.h"
 #include "sgmii.h"
 
-#define SERDES_MODE_SIZE 64
 #define SERDES_CLK_MODE(clk_type) \
 			((clk_type == CLK_INT) ? "internal" : "external")
 #define SERDES_CLK_FMHZ(clk_type) \
@@ -427,7 +426,6 @@ static int enable_serdes_clocks(struct udevice *dev)
 static int s32_serdes_probe(struct udevice *dev)
 {
 	struct s32_serdes *pcie = dev_get_priv(dev);
-	char mode[SERDES_MODE_SIZE];
 	const char *pcie_phy_mode;
 	int ret = 0;
 
@@ -493,9 +491,6 @@ static int s32_serdes_probe(struct udevice *dev)
 		       SERDES_CLK_FMHZ(pcie->fmhz),
 		       pcie->id);
 
-	s32_serdes_get_mode_str(pcie->devtype, pcie->xpcs_mode, mode);
-	printf("Configuring PCIe%d as %s\n", pcie->id, mode);
-
 	/* Apply the base SerDes/PHY settings */
 	if (!s32_serdes_init(pcie))
 		return ret;
@@ -519,9 +514,6 @@ static int s32_serdes_probe(struct udevice *dev)
 		}
 	}
 
-	s32_serdes_get_mode_str(pcie->devtype, pcie->xpcs_mode, mode);
-	debug("SerDes%d: Configure as %s\n", pcie->id, mode);
-
 	return ret;
 }
 
-- 
2.17.1

