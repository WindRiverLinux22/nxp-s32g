From 1e18fdf1a84a7c406f40ba11029af1bfbb1f2a3e Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Thu, 14 Jul 2022 14:44:27 +0300
Subject: [PATCH 032/102] arm: s32cc: Make SERDES_SKIP interpretation part of
 hwconfig fixups

Issue: ALB-8357
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/mach-s32/s32-cc/hwconfig_fixups.c | 65 ++++++++++++++++++++++
 drivers/pci/serdes_s32gen1.c               | 11 +---
 2 files changed, 66 insertions(+), 10 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/hwconfig_fixups.c b/arch/arm/mach-s32/s32-cc/hwconfig_fixups.c
index f8408f2f97..1da7b23594 100644
--- a/arch/arm/mach-s32/s32-cc/hwconfig_fixups.c
+++ b/arch/arm/mach-s32/s32-cc/hwconfig_fixups.c
@@ -492,6 +492,66 @@ static int set_serdes_lines(struct dts_node *node, int id)
 	return 0;
 }
 
+static int skip_dts_node(struct dts_node *root, const char *alias_fmt, u32 id)
+{
+	int ret;
+	struct dts_node node;
+
+	ret = node_by_alias(root, &node, alias_fmt, id);
+	if (ret) {
+		pr_err("Failed to get 'pcie%u' alias\n", id);
+		return ret;
+	}
+
+	/**
+	 * Nothing to be performed on Linux device tree as skip option has
+	 * effect on U-Boot drivers only
+	 */
+	if (root->fdt)
+		return 0;
+
+	ret = disable_node(&node);
+	if (ret) {
+		pr_err("Failed to disable %s%u\n", alias_fmt, id);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int skip_dts_nodes_config(struct dts_node *root, int id, bool *skip)
+{
+	int ret;
+	enum serdes_dev_type mode;
+	struct dts_node serdes;
+
+	ret = node_by_alias(root, &serdes, SERDES_ALIAS_FMT, id);
+	if (ret) {
+		pr_err("Failed to get 'serdes%u' alias\n", id);
+		return ret;
+	}
+
+	mode = s32_serdes_get_mode_from_hwconfig(id);
+
+	if (!(mode & SERDES_SKIP)) {
+		*skip = false;
+		return 0;
+	}
+
+	printf("Skipping configuration for SerDes%d.\n", id);
+	*skip = true;
+
+	ret = skip_dts_node(root, PCIE_ALIAS_FMT, id);
+	if (ret)
+		return ret;
+
+	ret = skip_dts_node(root, SERDES_ALIAS_FMT, id);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
 static int prepare_pcie_node(struct dts_node *root, int id)
 {
 	int ret;
@@ -700,6 +760,7 @@ static void disable_serdes_pcie_nodes(struct dts_node *root, u32 id)
 
 static int apply_hwconfig_fixups(bool fdt, void *blob)
 {
+	bool skip;
 	int ret;
 	unsigned int id;
 	struct dts_node root = {
@@ -715,6 +776,10 @@ static int apply_hwconfig_fixups(bool fdt, void *blob)
 			continue;
 		}
 
+		ret = skip_dts_nodes_config(&root, id, &skip);
+		if (skip || ret)
+			continue;
+
 		ret = prepare_pcie_node(&root, id);
 		if (ret) {
 			pr_err("Failed to PCIe ofnode%d\n", id);
diff --git a/drivers/pci/serdes_s32gen1.c b/drivers/pci/serdes_s32gen1.c
index ea4eaa81aa..48f4eff31b 100644
--- a/drivers/pci/serdes_s32gen1.c
+++ b/drivers/pci/serdes_s32gen1.c
@@ -410,22 +410,13 @@ static int s32_serdes_probe(struct udevice *dev)
 	if (ret)
 		return ret;
 
-	pcie->devtype = s32_serdes_get_mode_from_hwconfig(pcie->id);
-
-	if (pcie->devtype & SERDES_SKIP) {
-		printf("Skipping configuration for SerDes%d,", pcie->id);
-
-		/* Skip the 'skip' flag for other settings */
-		pcie->devtype &= ~(uint32_t)(SERDES_SKIP);
-		return ret;
-	}
-
 	ret = enable_serdes_clocks(dev);
 	if (ret) {
 		dev_err(dev, "Failed to enable SERDES clocks\n");
 		return ret;
 	}
 
+	pcie->devtype = s32_serdes_get_mode_from_hwconfig(pcie->id);
 	pcie->clktype = s32_serdes_get_clock_from_hwconfig(pcie->id);
 	/* Get XPCS configuration */
 	pcie->xpcs_mode = s32_serdes_get_xpcs_cfg_from_hwconfig(pcie->id);
-- 
2.17.1

