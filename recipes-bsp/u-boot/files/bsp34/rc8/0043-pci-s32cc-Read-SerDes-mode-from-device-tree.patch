From 9d937218b6b024e27ebf645a514094de4d8ec6de Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Thu, 21 Jul 2022 10:29:19 +0300
Subject: [PATCH 043/102] pci: s32cc: Read SerDes mode from device tree

Issue: ALB-8357
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/include/asm/arch-s32/s32-cc/sgmii.h |  3 +--
 arch/arm/mach-s32/s32-cc/sgmii/sgmii.c       | 22 ++++++++++++++++++--
 drivers/pci/serdes_s32gen1.c                 | 20 +++++++++++-------
 3 files changed, 33 insertions(+), 12 deletions(-)

diff --git a/arch/arm/include/asm/arch-s32/s32-cc/sgmii.h b/arch/arm/include/asm/arch-s32/s32-cc/sgmii.h
index 8a9bfbf81d..e1477299a4 100644
--- a/arch/arm/include/asm/arch-s32/s32-cc/sgmii.h
+++ b/arch/arm/include/asm/arch-s32/s32-cc/sgmii.h
@@ -8,7 +8,6 @@
 #ifndef SERDES_SGMII_H
 #define SERDES_SGMII_H
 
-enum serdes_mode;
 enum serdes_xpcs_mode;
 enum serdes_xpcs_mode_gen2;
 
@@ -16,7 +15,7 @@ void serdes_pma_mode5(void __iomem *base);
 void serdes_pcs_mode5(void __iomem *base);
 
 int s32_eth_xpcs_init(void __iomem *xpcs0, void __iomem *xpcs1,
-		      int platform_serdes_id, enum serdes_mode ss_mode,
+		      int platform_serdes_id, u32 ss_mode,
 		      enum serdes_xpcs_mode xpcs_mode,
 		      bool ext_clk,
 		      unsigned long fmhz,
diff --git a/arch/arm/mach-s32/s32-cc/sgmii/sgmii.c b/arch/arm/mach-s32/s32-cc/sgmii/sgmii.c
index 590ae1bc3f..302f107b2d 100644
--- a/arch/arm/mach-s32/s32-cc/sgmii/sgmii.c
+++ b/arch/arm/mach-s32/s32-cc/sgmii/sgmii.c
@@ -211,8 +211,26 @@ static void s32_serdes_post_init(struct s32_xpcs_cfg *serdes, u32 xpcs)
 	serdes_pcs_speed_select(xpcs_base, 1);
 }
 
+static enum serdes_mode u32_to_serdes_mode(u32 ss_mode)
+{
+	switch (ss_mode) {
+	case 0:
+		return SERDES_MODE_PCIE_PCIE;
+	case 1:
+		return SERDES_MODE_PCIE_SGMII0;
+	case 2:
+		return SERDES_MODE_PCIE_SGMII1;
+	case 3:
+		return SERDES_MODE_SGMII_SGMII;
+	case 4:
+		return SERDES_MODE_SGMII_SGMII_ALT;
+	default:
+		return SERDES_MODE_INVAL;
+	}
+}
+
 int s32_eth_xpcs_init(void __iomem *xpcs0, void __iomem *xpcs1,
-		      int platform_serdes_id, enum serdes_mode ss_mode,
+		      int platform_serdes_id, u32 ss_mode,
 		      enum serdes_xpcs_mode xpcs_mode,
 		      bool ext_clk,
 		      unsigned long fmhz,
@@ -232,7 +250,7 @@ int s32_eth_xpcs_init(void __iomem *xpcs0, void __iomem *xpcs1,
 	serdes->xpcs1 = xpcs1;
 	serdes->xpcs_mode = SGMII_INAVALID;
 	serdes->ext_clk = ext_clk;
-	serdes->ss_mode = ss_mode;
+	serdes->ss_mode = u32_to_serdes_mode(ss_mode);
 	serdes->fmhz = fmhz;
 
 	if (serdes->ss_mode == SERDES_MODE_PCIE_SGMII0 ||
diff --git a/drivers/pci/serdes_s32gen1.c b/drivers/pci/serdes_s32gen1.c
index 2263857f2b..fd3d6310b7 100644
--- a/drivers/pci/serdes_s32gen1.c
+++ b/drivers/pci/serdes_s32gen1.c
@@ -100,6 +100,7 @@ struct serdes_ctrl {
 		struct clk clk;
 		bool enabled;
 	} clks[5];
+	u32 ss_mode;
 	bool ext_clk;
 };
 
@@ -112,7 +113,6 @@ struct serdes {
 	struct serdes_ctrl ctrl;
 	struct xpcs_ctrl xpcs;
 	struct udevice *dev;
-	enum serdes_mode ss_mode;
 
 	int id;
 	enum serdes_dev_type devtype;
@@ -175,7 +175,7 @@ static int wait_read32(void __iomem *address, u32 expected,
 	return 0;
 }
 
-static int s32_serdes_set_mode(void __iomem *ss_base, enum serdes_mode mode)
+static int s32_serdes_set_mode(void __iomem *ss_base, u32 mode)
 {
 	BSET32(UPTR(ss_base) + SS_RW_REG_0, SUBMODE_MASK & mode);
 
@@ -345,14 +345,12 @@ static bool s32_serdes_init(struct serdes *serdes)
 {
 	int ret;
 
-	serdes->ss_mode = s32_serdes_get_op_mode_from_hwconfig(serdes->id);
-
 	/* Reset the Serdes module */
 	ret = s32_serdes_assert_reset(serdes);
 	if (ret)
 		return false;
 
-	if (s32_serdes_set_mode(serdes->ctrl.ss_base, serdes->ss_mode))
+	if (s32_serdes_set_mode(serdes->ctrl.ss_base, serdes->ctrl.ss_mode))
 		return false;
 
 	/* Set the clock for the Serdes module */
@@ -403,7 +401,7 @@ static bool s32_serdes_init(struct serdes *serdes)
 }
 
 __weak int s32_eth_xpcs_init(void __iomem *xpcs0, void __iomem *xpcs1,
-			     int id, enum serdes_mode ss_mode,
+			     int id, u32 ss_mode,
 			     enum serdes_xpcs_mode xpcs_mode,
 			     bool ext_clk,
 			     unsigned long fmhz,
@@ -458,7 +456,13 @@ static int ss_dt_init(struct udevice *dev, struct serdes *serdes)
 		return ret;
 	}
 
-	ret = ofnode_read_resource_byname(node, "ss_pcie", &res);
+	ret = dev_read_u32(dev, "fsl,sys-mode", &ctrl->ss_mode);
+	if (ret) {
+		dev_err(dev, "Failed to get SerDes subsystem mode\n");
+		return -EINVAL;
+	}
+
+	ret = dev_read_resource_byname(dev, "ss_pcie", &res);
 	if (ret) {
 		dev_err(dev, "Missing 'ss_pcie' reg region.\n");
 		return -EIO;
@@ -636,7 +640,7 @@ static int serdes_probe(struct udevice *dev)
 
 		ret = s32_eth_xpcs_init(serdes->xpcs.base0, serdes->xpcs.base1,
 					serdes->id,
-					serdes->ss_mode,
+					serdes->ctrl.ss_mode,
 					serdes->xpcs_mode,
 					serdes->ctrl.ext_clk,
 					rate,
-- 
2.17.1

