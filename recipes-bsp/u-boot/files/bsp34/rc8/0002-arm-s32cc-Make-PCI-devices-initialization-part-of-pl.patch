From 423a436a1cfa33058f843cdc19a64eca882c4294 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Wed, 29 Jun 2022 08:27:15 +0300
Subject: [PATCH 002/102] arm: s32cc: Make PCI devices initialization part of
 platform code

Issue: ALB-8357
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/mach-s32/s32-cc/soc.c | 40 ++++++++++++++++++++++++++++++++++
 drivers/pci/serdes_s32gen1.c   | 37 -------------------------------
 2 files changed, 40 insertions(+), 37 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/soc.c b/arch/arm/mach-s32/s32-cc/soc.c
index 5bf7df0f8e..6cb195542e 100644
--- a/arch/arm/mach-s32/s32-cc/soc.c
+++ b/arch/arm/mach-s32/s32-cc/soc.c
@@ -9,6 +9,7 @@
 #include <asm/sections.h>
 #include <asm/armv8/mmu.h>
 #include <dm/ofnode.h>
+#include <dm/uclass.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -113,3 +114,42 @@ int arch_cpu_init(void)
 	return 0;
 }
 
+static void serdes_init(void)
+{
+	struct udevice *bus;
+
+	/*
+	 * Enumerate all known UCLASS_PCI_GENERIC devices. This will
+	 * also probe them, so the SerDes devices will be enumerated too.
+	 * TODO: Enumerate first the EPs, so that loopback between
+	 * the two PCIe interfaces will also work if PCIe1 is EP.
+	 */
+	for (uclass_first_device(UCLASS_PCI_GENERIC, &bus);
+	     bus;
+	     uclass_next_device(&bus)) {
+		;
+	}
+}
+
+__weak void show_pcie_devices(void)
+{
+}
+
+int initr_pci(void)
+{
+	debug("%s\n", __func__);
+
+	serdes_init();
+	/*
+	 * Enumerate all known PCIe controller devices. Enumeration has
+	 * the side-effect of probing them, so PCIe devices will be
+	 * enumerated too.
+	 * This is inspired from commands `pci` and `dm tree`.
+	 */
+	pci_init();
+
+	/* now show the devices */
+	show_pcie_devices();
+
+	return 0;
+}
diff --git a/drivers/pci/serdes_s32gen1.c b/drivers/pci/serdes_s32gen1.c
index d248bd6f26..914ed0c1ed 100644
--- a/drivers/pci/serdes_s32gen1.c
+++ b/drivers/pci/serdes_s32gen1.c
@@ -962,43 +962,6 @@ static int s32_serdes_probe(struct udevice *dev)
 	return ret;
 }
 
-__weak void show_pcie_devices(void)
-{
-}
-
-/* pci_init - called before the probe function */
-int initr_pci(void)
-{
-	struct udevice *bus;
-
-	debug("%s\n", __func__);
-
-	/*
-	 * Enumerate all known UCLASS_PCI_GENERIC devices. This will
-	 * also probe them, so the SerDes devices will be enumerated too.
-	 * TODO: Enumerate first the EPs, so that loopback between
-	 * the two PCIe interfaces will also work if PCIe1 is EP.
-	 */
-	for (uclass_first_device(UCLASS_PCI_GENERIC, &bus);
-	     bus;
-	     uclass_next_device(&bus)) {
-		;
-	}
-
-	/*
-	 * Enumerate all known PCIe controller devices. Enumeration has
-	 * the side-effect of probing them, so PCIe devices will be
-	 * enumerated too.
-	 * This is inspired from commands `pci` and `dm tree`.
-	 */
-	pci_init();
-
-	/* now show the devices */
-	show_pcie_devices();
-
-	return 0;
-}
-
 static const struct udevice_id s32_serdes_ids[] = {
 	{ .compatible = "nxp,s32cc-serdes" },
 	{ }
-- 
2.17.1

