From ba8443d5125919f266f9bd2e1b3058b8eb33efc8 Mon Sep 17 00:00:00 2001
From: Meng Li <Meng.Li@windriver.com>
Date: Fri, 7 Apr 2023 15:03:12 +0800
Subject: [PATCH] s32g: hse: improve the code of enable secure boot command

Remove the rediundant code and reuse the code as much as possible.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 arch/arm/mach-s32/s32-cc/hse_adv_secboot.c | 224 +++++++++++----------
 include/hse/hse_abi.h                      |  12 ++
 2 files changed, 125 insertions(+), 111 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
index eaaa87a6ed..32e8e3d95e 100644
--- a/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
+++ b/arch/arm/mach-s32/s32-cc/hse_adv_secboot.c
@@ -72,6 +72,8 @@ static const struct hse_key_group_cfg_entry ram_orig_cat[] = {
 	HSE_RAM_KEY_CATALOG_CFG
 };
 
+static struct hse_smr_dynamic_config smr_dynamic_config;
+
 /* return 0 for equal uuids */
 static inline int compare_uuids(const struct uuid *uuid1,
 				const struct uuid *uuid2)
@@ -79,12 +81,17 @@ static inline int compare_uuids(const struct uuid *uuid1,
 	return memcmp(uuid1, uuid2, sizeof(struct uuid));
 }
 
+static uintptr_t get_image_start(uintptr_t base, uintptr_t offset)
+{
+	return base + offset;
+}
+
 static u32 get_m7_start(struct hse_private *priv)
 {
 	if (priv->ivt.boot_type < APTIV_PARALLEL_SEC_BOOT) {
-		return priv->ivt.app_boot + APP_CODE_OFFSET;
+		return get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET);
 	} else {
-		return priv->ivt.autosar_image_off + APP_CODE_OFFSET;
+		return get_image_start((uintptr_t)priv->ivt.autosar_image_off, APP_CODE_OFFSET);
 	}
 }
 
@@ -94,15 +101,15 @@ static u32 get_fip_start(struct hse_private *priv)
 
 	switch (priv->ivt.boot_type) {
 		case NXP_SEC_BOOT:
-			fip_start = priv->ivt.app_boot + APP_CODE_OFFSET;
+			fip_start = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET);
 			break;
 		case NXP_M7_SEC_BOOT:
 		case NXP_PARALLEL_SEC_BOOT:
-			fip_start = priv->ivt.app_boot + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
+			fip_start = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET) + M7_BOOT_CODE_SIZE;
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
 		case APTIV_PARALLEL_SEC_BOOT:
-			fip_start = priv->ivt.fip_image_off + APP_CODE_OFFSET;
+			fip_start = get_image_start((uintptr_t)priv->ivt.fip_image_off, APP_CODE_OFFSET);
 			break;
 		default:
 			printf("ERROR: invalid fip start offset!\n");
@@ -122,11 +129,11 @@ static u64 get_fip_toc_offset(struct hse_private *priv, struct uuid *search)
 		case NXP_SEC_BOOT:
 		case APTIV_AUTOSAR_SEC_BOOT:
 		case APTIV_PARALLEL_SEC_BOOT:
-			fip_hdr_start = (uintptr_t)priv->buf_space + APP_CODE_OFFSET;
+			fip_hdr_start = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
 			break;
 		case NXP_M7_SEC_BOOT:
 		case NXP_PARALLEL_SEC_BOOT:
-			fip_hdr_start = (uintptr_t)priv->buf_space + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
+			fip_hdr_start = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET) + M7_BOOT_CODE_SIZE;
 			break;
 		default:
 			printf("ERROR: invalid fip start location!\n");
@@ -210,8 +217,8 @@ static int get_m7_sign_data(struct hse_private *priv)
 				printf("ERROR: M7 signature read failed!\n");
 				return ret;
 			}
-			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET +
-						M7_BOOT_CODE_SIZE - M7_SIGNATURE_SIZE;
+			sign_addr = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET) +
+						M7_BOOT_CODE_SIZE - M7_SIGNATURE_SIZE; 
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
 			hse_mmc_read((void *)priv->buf_space,
@@ -220,7 +227,7 @@ static int get_m7_sign_data(struct hse_private *priv)
 				printf("ERROR: M7 signature read failed!\n");
 				return ret;
 			}
-			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET;
+			sign_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
 			break;
 		case APTIV_PARALLEL_SEC_BOOT:
 			hse_mmc_read((void *)priv->buf_space,
@@ -229,7 +236,7 @@ static int get_m7_sign_data(struct hse_private *priv)
 				printf("ERROR: M7 signature read failed!\n");
 				return ret;
 			}
-			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET;
+			sign_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
 			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
@@ -243,9 +250,9 @@ static int get_m7_sign_data(struct hse_private *priv)
 
 static int get_fip_sign_data(struct hse_private *priv)
 {
-	uintptr_t sign_offset;
+	uintptr_t sign_offset = 0;;
 	u64 sign_addr;
-	u32 fip_size;
+	u32 fip_size = 0;
 	u32 fip_sig_blk_off;
 	u32 fip_sig_off;
 	int ret = 0;
@@ -280,17 +287,17 @@ static int get_fip_sign_data(struct hse_private *priv)
 
 	switch (priv->ivt.boot_type) {
 		case NXP_SEC_BOOT:
-			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET + sign_offset;
+			sign_addr = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET) + sign_offset;
 			break;
 		case NXP_M7_SEC_BOOT:
 		case NXP_PARALLEL_SEC_BOOT:
-			sign_addr = (u64)priv->buf_space + APP_CODE_OFFSET +
+			sign_addr = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET) +
 						M7_BOOT_CODE_SIZE + sign_offset;
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
 		case APTIV_PARALLEL_SEC_BOOT:
-			fip_sig_blk_off = (priv->ivt.fip_image_off + APP_CODE_OFFSET + fip_size) /512;
-			fip_sig_off = (priv->ivt.fip_image_off + APP_CODE_OFFSET + fip_size) %512;
+			fip_sig_blk_off = (get_image_start((uintptr_t)priv->ivt.fip_image_off, APP_CODE_OFFSET) + fip_size) /512;
+			fip_sig_off = (get_image_start((uintptr_t)priv->ivt.fip_image_off, APP_CODE_OFFSET) + fip_size) %512;
 			ret = hse_mmc_read((void *)priv->buf_space, fip_sig_blk_off, 2);
 			if (ret) {
 				printf("ERROR: FIP signature read failed!\n");
@@ -555,10 +562,41 @@ int hse_install_cr_entries(struct hse_private *priv, u32 *recv_buf)
 	return ret;
 }
 
-int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf)
+int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf,
+								struct hse_smr_dynamic_config *dynamic_config)
 {
+	struct hse_smr_entry *smr_entry;
+	struct hse_smr_install_srv *smr_install_req;
 	int ret = 0;
 
+	smr_entry = &(priv->smr_entry);
+	smr_install_req = &(priv->srv_desc.smr_install_req);
+
+	memset((void *)&priv->smr_entry, 0, sizeof(struct hse_smr_entry));
+	memset((void *)&priv->srv_desc, 0, sizeof(struct hse_srv_desc));
+
+	smr_entry->smr_src = dynamic_config->entry_smr_src;
+	smr_entry->smr_dst_addr = dynamic_config->entry_smr_dst_addr;
+	smr_entry->smr_size = dynamic_config->entry_smr_size;
+	smr_entry->config_flags = (HSE_SMR_CFG_FLAG_SD_FLASH |
+				   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
+	smr_entry->check_period = 0;
+	smr_entry->key_handle = HSE_BOOT_KEY_HANDLE;
+	smr_entry->sign_sch.sign_scheme = HSE_SIGN_RSASSA_PKCS1_V15;
+	smr_entry->sign_sch.sch.hash_algo = HSE_HASH_ALGO_SHA_1;
+	smr_entry->auth_tag = dynamic_config->entry_auth_tag;
+	smr_entry->decrypt_key_handle = HSE_SMR_DECRYPT_KEY_HANDLE_NOT_USED;
+	smr_entry->version_offset = 0;
+
+	priv->srv_desc.srv_id = HSE_SRV_ID_SMR_ENTRY_INSTALL;
+	smr_install_req->access_mode = HSE_ACCESS_MODE_ONE_PASS;
+	smr_install_req->entry_index = dynamic_config->req_entry_index;
+	smr_install_req->smr_entry_addr = (u64)smr_entry;
+	smr_install_req->smr_data_addr = dynamic_config->req_smr_data_addr;
+	smr_install_req->smr_data_len = dynamic_config->req_smr_data_len;
+	smr_install_req->smr_auth_tag_addr = dynamic_config->req_smr_auth_tag_addr;
+	smr_install_req->smr_auth_tag_len = dynamic_config->req_smr_auth_tag_len;
+
 	flush_dcache_range((u64)priv,
 			   (u64)priv + sizeof(struct hse_private));
 
@@ -575,17 +613,11 @@ int hse_install_smr_entry(struct hse_private *priv, u32 *recv_buf)
 
 int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 {
-	struct hse_smr_entry *smr_entry;
-	struct hse_smr_install_srv *smr_install_req;
 	u32 fip_size;
 	int ret = 0;
 
-	smr_entry = &(priv->smr_entry);
-	smr_install_req = &(priv->srv_desc.smr_install_req);
-
 	printf("\tGenerating Fip Secure Memory Region entry...\n");
-	memset((void *)&priv->smr_entry, 0, sizeof(struct hse_smr_entry));
-	memset((void *)&priv->srv_desc, 0, sizeof(struct hse_srv_desc));
+	memset((void *)&smr_dynamic_config, 0, sizeof(struct hse_smr_dynamic_config));
 
 	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
@@ -610,58 +642,46 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 
 	switch (priv->ivt.boot_type) {
 		case NXP_SEC_BOOT:
-			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET;
-			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load;
-			smr_entry->smr_size = fip_size - HSE_FIP_AUTH_LEN;
-			smr_entry->auth_tag = get_fip_sign_mmc(priv);
-
-			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET);
-			smr_install_req->smr_data_len = fip_size - HSE_FIP_AUTH_LEN;
-			smr_install_req->entry_index = 1u;
+			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET);
+			smr_dynamic_config.entry_smr_dst_addr = priv->app_boot_hdr.ram_load;
+			smr_dynamic_config.entry_smr_size = fip_size - HSE_FIP_AUTH_LEN;
+			smr_dynamic_config.entry_auth_tag = get_fip_sign_mmc(priv);
+
+			smr_dynamic_config.req_smr_data_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
+			smr_dynamic_config.req_smr_data_len = fip_size - HSE_FIP_AUTH_LEN;
+			smr_dynamic_config.req_entry_index = 1u;
 			break;
 		case NXP_M7_SEC_BOOT:
 		case NXP_PARALLEL_SEC_BOOT:
-			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE;
-			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load + M7_BOOT_CODE_SIZE;
-			smr_entry->smr_size = fip_size - HSE_FIP_AUTH_LEN;
-			smr_entry->auth_tag = get_fip_sign_mmc(priv);
-
-			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET + M7_BOOT_CODE_SIZE);
-			smr_install_req->smr_data_len = fip_size - HSE_FIP_AUTH_LEN;
-			smr_install_req->entry_index = 2u;
+			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET) + M7_BOOT_CODE_SIZE;
+			smr_dynamic_config.entry_smr_dst_addr = priv->app_boot_hdr.ram_load + M7_BOOT_CODE_SIZE;
+			smr_dynamic_config.entry_smr_size = fip_size - HSE_FIP_AUTH_LEN;
+			smr_dynamic_config.entry_auth_tag = get_fip_sign_mmc(priv);
+
+			smr_dynamic_config.req_smr_data_addr = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET) + M7_BOOT_CODE_SIZE;
+			smr_dynamic_config.req_smr_data_len = fip_size - HSE_FIP_AUTH_LEN;
+			smr_dynamic_config.req_entry_index = 2u;
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
 		case APTIV_PARALLEL_SEC_BOOT:
-			smr_entry->smr_src =  priv->ivt.fip_image_off + APP_CODE_OFFSET;
-			smr_entry->smr_dst_addr =((struct app_boot_hdr *)priv->buf_space)->ram_load;
-			smr_entry->smr_size = fip_size;
-			smr_entry->auth_tag = priv->ivt.fip_image_off + APP_CODE_OFFSET + fip_size;
-
-			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET);
-			smr_install_req->smr_data_len = fip_size;
-			smr_install_req->entry_index = 2u;
+			smr_dynamic_config.entry_smr_src =  get_image_start((uintptr_t)priv->ivt.fip_image_off, APP_CODE_OFFSET);
+			smr_dynamic_config.entry_smr_dst_addr =((struct app_boot_hdr *)priv->buf_space)->ram_load;
+			smr_dynamic_config.entry_smr_size = fip_size;
+			smr_dynamic_config.entry_auth_tag = get_image_start((uintptr_t)priv->ivt.fip_image_off, APP_CODE_OFFSET) + fip_size;
+
+			smr_dynamic_config.req_smr_data_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
+			smr_dynamic_config.req_smr_data_len = fip_size;
+			smr_dynamic_config.req_entry_index = 2u;
 			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
 			return -1;
 	}
 
-	smr_entry->config_flags = (HSE_SMR_CFG_FLAG_SD_FLASH |
-				   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
-	smr_entry->check_period = 0;
-	smr_entry->key_handle = HSE_BOOT_KEY_HANDLE;
-	smr_entry->sign_sch.sign_scheme = HSE_SIGN_RSASSA_PKCS1_V15;
-	smr_entry->sign_sch.sch.hash_algo = HSE_HASH_ALGO_SHA_1;
-	smr_entry->decrypt_key_handle = HSE_SMR_DECRYPT_KEY_HANDLE_NOT_USED;
-	smr_entry->version_offset = 0;
-
-	priv->srv_desc.srv_id = HSE_SRV_ID_SMR_ENTRY_INSTALL;
-	smr_install_req->access_mode = HSE_ACCESS_MODE_ONE_PASS;
-	smr_install_req->smr_entry_addr = (uintptr_t)smr_entry;
-	smr_install_req->smr_auth_tag_addr = (uintptr_t)priv->fip_signature;
-	smr_install_req->smr_auth_tag_len = HSE_FIP_AUTH_LEN;
+	smr_dynamic_config.req_smr_auth_tag_addr = (uintptr_t)priv->fip_signature;
+	smr_dynamic_config.req_smr_auth_tag_len = HSE_FIP_AUTH_LEN;
 
-	ret = hse_install_smr_entry(priv, recv_buf);
+	ret = hse_install_smr_entry(priv, recv_buf, &smr_dynamic_config);
 	if (ret) {
 		printf("ERROR: install FIP smr failed!\n");
 		return ret;
@@ -672,17 +692,11 @@ int hse_install_fip_smr_entry(struct hse_private *priv, u32 *recv_buf)
 
 int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 {
-	struct hse_smr_entry *smr_entry;
-	struct hse_smr_install_srv *smr_install_req;
 	u32 align_diff;
 	int ret = 0;
 
-	smr_entry = &(priv->smr_entry);
-	smr_install_req = &(priv->srv_desc.smr_install_req);
-
 	printf("\tGenerating M7 Secure Memory Region entry...\n");
-	memset((void *)&priv->smr_entry, 0, sizeof(struct hse_smr_entry));
-	memset((void *)&priv->srv_desc, 0, sizeof(struct hse_srv_desc));
+	memset((void *)&smr_dynamic_config, 0, sizeof(struct hse_smr_dynamic_config));
 
 	/* copy fip code to pass verification, it needs to copy code from the address aligning with 512 bytes */
 	memset((void *)priv->buf_space, 0, sizeof(priv->buf_space));
@@ -705,13 +719,13 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			  *  so get the diff between load address and entry address
 			  */
 			align_diff = priv->app_boot_hdr.ram_entry - priv->app_boot_hdr.ram_load;
-			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET + align_diff;
-			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_entry;
-			smr_entry->smr_size = priv->ivt.m7_image_size;
-			smr_entry->auth_tag = get_m7_sign_mmc(priv);
+			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET) + align_diff;
+			smr_dynamic_config.entry_smr_dst_addr = priv->app_boot_hdr.ram_entry;
+			smr_dynamic_config.entry_smr_size = priv->ivt.m7_image_size;
+			smr_dynamic_config.entry_auth_tag = get_m7_sign_mmc(priv);
 
-			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET + align_diff);
-			smr_install_req->smr_data_len = priv->ivt.m7_image_size;
+			smr_dynamic_config.req_smr_data_addr = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET) + align_diff;
+			smr_dynamic_config.req_smr_data_len = priv->ivt.m7_image_size;
 			break;
 		case NXP_PARALLEL_SEC_BOOT:
 			/*
@@ -719,54 +733,42 @@ int hse_install_m7_smr_entry(struct hse_private *priv, u32 *recv_buf)
 			  *  so get the diff between load address and entry address
 			  */
 			align_diff = priv->ivt.m7_image_entry_bak - priv->app_boot_hdr.ram_load;
-			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET + align_diff;
-			smr_entry->smr_dst_addr = priv->ivt.m7_image_entry_bak;
-			smr_entry->smr_size = priv->ivt.m7_image_size;
-			smr_entry->auth_tag = get_m7_sign_mmc(priv);
+			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET) + align_diff;
+			smr_dynamic_config.entry_smr_dst_addr = priv->ivt.m7_image_entry_bak;
+			smr_dynamic_config.entry_smr_size = priv->ivt.m7_image_size;
+			smr_dynamic_config.entry_auth_tag = get_m7_sign_mmc(priv);
 
-			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET + align_diff);
-			smr_install_req->smr_data_len = priv->ivt.m7_image_size;
+			smr_dynamic_config.req_smr_data_addr = get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET) + align_diff;
+			smr_dynamic_config.req_smr_data_len = priv->ivt.m7_image_size;
 			break;
 		case APTIV_AUTOSAR_SEC_BOOT:
-			smr_entry->smr_src = priv->ivt.app_boot + APP_CODE_OFFSET;
-			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load;
-			smr_entry->smr_size = priv->app_boot_hdr.code_len;
-			smr_entry->auth_tag = get_m7_sign_mmc(priv);
+			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.app_boot, APP_CODE_OFFSET);
+			smr_dynamic_config.entry_smr_dst_addr = priv->app_boot_hdr.ram_load;
+			smr_dynamic_config.entry_smr_size = priv->app_boot_hdr.code_len;
+			smr_dynamic_config.entry_auth_tag = get_m7_sign_mmc(priv);
 
-			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET);
-			smr_install_req->smr_data_len = priv->app_boot_hdr.code_len;
+			smr_dynamic_config.req_smr_data_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
+			smr_dynamic_config.req_smr_data_len = priv->app_boot_hdr.code_len;
 			break;
 		case APTIV_PARALLEL_SEC_BOOT:
-			smr_entry->smr_src = priv->ivt.autosar_image_off + APP_CODE_OFFSET;
-			smr_entry->smr_dst_addr = priv->app_boot_hdr.ram_load;
-			smr_entry->smr_size = priv->app_boot_hdr.code_len;
-			smr_entry->auth_tag = get_m7_sign_mmc(priv);
+			smr_dynamic_config.entry_smr_src = get_image_start((uintptr_t)priv->ivt.autosar_image_off, APP_CODE_OFFSET);
+			smr_dynamic_config.entry_smr_dst_addr = priv->app_boot_hdr.ram_load;
+			smr_dynamic_config.entry_smr_size = priv->app_boot_hdr.code_len;
+			smr_dynamic_config.entry_auth_tag = get_m7_sign_mmc(priv);
 
-			smr_install_req->smr_data_addr = (u64)(priv->buf_space + APP_CODE_OFFSET);
-			smr_install_req->smr_data_len = priv->app_boot_hdr.code_len;
+			smr_dynamic_config.req_smr_data_addr = (u64)get_image_start((uintptr_t)priv->buf_space, APP_CODE_OFFSET);
+			smr_dynamic_config.req_smr_data_len = priv->app_boot_hdr.code_len;
 			break;
 		default:
 			printf("ERROR: invalid secure boot type!\n");
 			return -1;
 	}
 
-	smr_entry->config_flags = (HSE_SMR_CFG_FLAG_SD_FLASH |
-				   HSE_SMR_CFG_FLAG_INSTALL_AUTH);
-	smr_entry->check_period = 0;
-	smr_entry->key_handle = HSE_BOOT_KEY_HANDLE;
-	smr_entry->sign_sch.sign_scheme = HSE_SIGN_RSASSA_PKCS1_V15;
-	smr_entry->sign_sch.sch.hash_algo = HSE_HASH_ALGO_SHA_1;
-	smr_entry->decrypt_key_handle = HSE_SMR_DECRYPT_KEY_HANDLE_NOT_USED;
-	smr_entry->version_offset = 0;
-
-	priv->srv_desc.srv_id = HSE_SRV_ID_SMR_ENTRY_INSTALL;
-	smr_install_req->access_mode = HSE_ACCESS_MODE_ONE_PASS;
-	smr_install_req->entry_index = 1u;
-	smr_install_req->smr_entry_addr = (uintptr_t)smr_entry;
-	smr_install_req->smr_auth_tag_addr = (uintptr_t)priv->m7_signature;
-	smr_install_req->smr_auth_tag_len = M7_SIGNATURE_SIZE;
+	smr_dynamic_config.req_entry_index = 1u;
+	smr_dynamic_config.req_smr_auth_tag_addr = (u64)priv->m7_signature;
+	smr_dynamic_config.req_smr_auth_tag_len = M7_SIGNATURE_SIZE;
 
-	ret = hse_install_smr_entry(priv, recv_buf);
+	ret = hse_install_smr_entry(priv, recv_buf, &smr_dynamic_config);
 	if (ret) {
 		printf("ERROR: install M7 smr failed!\n");
 		return ret;
diff --git a/include/hse/hse_abi.h b/include/hse/hse_abi.h
index 32b1b28254..c8a308e5a9 100644
--- a/include/hse/hse_abi.h
+++ b/include/hse/hse_abi.h
@@ -502,5 +502,17 @@ enum boot_type {
 	APTIV_PARALLEL_SEC_BOOT,
 };
 
+struct hse_smr_dynamic_config {
+	u32 entry_smr_src;
+	u64 entry_smr_dst_addr;
+	u32 entry_smr_size;
+	u32 entry_auth_tag;
+
+	u64 req_smr_data_addr;
+	u32 req_smr_data_len;
+	u8 req_entry_index;
+	u64 req_smr_auth_tag_addr;
+	u16 req_smr_auth_tag_len;
+} __packed;
 
 #endif /* HSE_ABI_H */
-- 
2.36.1

