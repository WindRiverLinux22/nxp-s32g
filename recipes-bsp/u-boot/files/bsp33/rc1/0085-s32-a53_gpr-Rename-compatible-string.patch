From c4947180e07c449ee0f1d2062893f9b901897a81 Mon Sep 17 00:00:00 2001
From: Ciprian Costea <ciprianmarian.costea@nxp.com>
Date: Mon, 21 Mar 2022 13:48:41 +0200
Subject: [PATCH 085/103] s32: a53_gpr: Rename compatible string

Also, as part of this commit we make use of 'OF_SYSTEM_SETUP'
which will enable a callback to be executed before Linux boot.

Issue: ALB-8588
Upstream-Status: Pending 

Signed-off-by: Ciprian Costea <ciprianmarian.costea@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/dts/fsl-s32-gen1.dtsi                |  2 +-
 arch/arm/mach-s32/Kconfig                     |  1 +
 .../arm/mach-s32/include/s32-cc/a53_gpr.h     |  6 +-
 arch/arm/mach-s32/s32-cc/fdt.c                | 50 ++++++++++++-----
 drivers/misc/Makefile                         |  2 +-
 .../{s32gen1_a53_gpr.c => s32cc_a53_gpr.c}    | 56 +++++++++----------
 6 files changed, 69 insertions(+), 48 deletions(-)
 rename drivers/misc/s32gen1_a53_gpr.h => arch/arm/mach-s32/include/s32-cc/a53_gpr.h (54%)
 rename drivers/misc/{s32gen1_a53_gpr.c => s32cc_a53_gpr.c} (56%)

diff --git a/arch/arm/dts/fsl-s32-gen1.dtsi b/arch/arm/dts/fsl-s32-gen1.dtsi
index f232ae5669..1b7dca32f5 100644
--- a/arch/arm/dts/fsl-s32-gen1.dtsi
+++ b/arch/arm/dts/fsl-s32-gen1.dtsi
@@ -370,7 +370,7 @@
 	};
 
 	a53_gpr {
-		compatible = "fsl,s32gen1-a53-gpr";
+		compatible = "nxp,s32cc-a53-gpr";
 		reg = <0x0 0x4007C400 0x0 0x100>;
 		status = "okay";
 	};
diff --git a/arch/arm/mach-s32/Kconfig b/arch/arm/mach-s32/Kconfig
index 3e38afa0ff..ee96d53c5d 100644
--- a/arch/arm/mach-s32/Kconfig
+++ b/arch/arm/mach-s32/Kconfig
@@ -53,6 +53,7 @@ config NXP_S32CC
 	select MMC_HS400_SUPPORT
 	select OF_CONTROL
 	select OF_SEPARATE
+	select OF_SYSTEM_SETUP
 	select PINCTRL
 	select PINCTRL_FULL
 	select PINCTRL_S32CC
diff --git a/drivers/misc/s32gen1_a53_gpr.h b/arch/arm/mach-s32/include/s32-cc/a53_gpr.h
similarity index 54%
rename from drivers/misc/s32gen1_a53_gpr.h
rename to arch/arm/mach-s32/include/s32-cc/a53_gpr.h
index 6473e55397..7c4ac9394b 100644
--- a/drivers/misc/s32gen1_a53_gpr.h
+++ b/arch/arm/mach-s32/include/s32-cc/a53_gpr.h
@@ -2,10 +2,10 @@
 /*
  * Copyright 2022 NXP
  */
-#ifndef S32GEN1_A53_GPR_H
-#define S32GEN1_A53_GPR_H
+#ifndef S32CC_A53_GPR_H
+#define S32CC_A53_GPR_H
 
 /* A53 GPR6 */
-#define S32GEN1_A53_GPR_LOCKSTEP_EN	0x0
+#define S32CC_A53_GPR_LOCKSTEP_EN	0x0
 
 #endif
diff --git a/arch/arm/mach-s32/s32-cc/fdt.c b/arch/arm/mach-s32/s32-cc/fdt.c
index cd1d8a3a0a..e7e0da0665 100644
--- a/arch/arm/mach-s32/s32-cc/fdt.c
+++ b/arch/arm/mach-s32/s32-cc/fdt.c
@@ -10,12 +10,12 @@
 #include <hwconfig.h>
 #include <malloc.h>
 #include <misc.h>
-#include <s32gen1_a53_gpr.h>
 #include <asm/arch-s32/s32-cc/serdes_hwconfig.h>
 #include <dm/uclass.h>
 #include <linux/ctype.h>
 #include <linux/libfdt.h>
 #include <linux/sizes.h>
+#include <s32-cc/a53_gpr.h>
 #include <s32-cc/siul2_nvram.h>
 #include <dt-bindings/phy/phy.h>
 
@@ -90,16 +90,16 @@ static bool is_lockstep_enabled(void)
 	int ret;
 	u32 lockstep_enabled = 0;
 	const char *dev_name = "a53_gpr";
-	struct udevice *s32gen1_a53_gpr = NULL;
+	struct udevice *s32cc_a53_gpr = NULL;
 
 	ret = uclass_get_device_by_name(UCLASS_MISC, dev_name,
-					&s32gen1_a53_gpr);
+					&s32cc_a53_gpr);
 	if (ret) {
 		printf("%s: No A53 GPR (err = %d)\n", __func__, ret);
 		return false;
 	}
 
-	ret = misc_read(s32gen1_a53_gpr, S32GEN1_A53_GPR_LOCKSTEP_EN,
+	ret = misc_read(s32cc_a53_gpr, S32CC_A53_GPR_LOCKSTEP_EN,
 			&lockstep_enabled, sizeof(lockstep_enabled));
 	if (ret != sizeof(lockstep_enabled)) {
 		printf("%s: Failed to read if Lockstep Enabled (err = %d)\n",
@@ -110,22 +110,23 @@ static bool is_lockstep_enabled(void)
 	return !!lockstep_enabled;
 }
 
-static void ft_fixup_cpu(void *blob)
+static int ft_fixup_cpu(void *blob)
 {
-	int off, addr_cells = 0;
+	int ret, off, addr_cells = 0;
 	int off_prev = -1;
 	u32 max_cores_per_cluster = 0;
 	u32 cpu_mask = 0;
 	u64 core_mpidr, core_id;
 	fdt32_t *reg;
 
-	if (get_cores_info(&max_cores_per_cluster, &cpu_mask))
-		return;
+	ret = get_cores_info(&max_cores_per_cluster, &cpu_mask);
+	if (ret)
+		return ret;
 
 	off = fdt_path_offset(blob, "/cpus");
 	if (off < 0) {
 		puts("couldn't find /cpus node\n");
-		return;
+		return -ENODEV;
 	}
 
 	fdt_support_default_count_cells(blob, off, &addr_cells, NULL);
@@ -158,9 +159,11 @@ static void ft_fixup_cpu(void *blob)
 		off = fdt_node_offset_by_prop_value(blob, off_prev,
 						    "device_type", "cpu", 4);
 	}
+
+	return 0;
 }
 
-static void ft_fixup_ddr_polling(const void *old_blob, void *new_blob)
+static int ft_fixup_ddr_polling(const void *old_blob, void *new_blob)
 {
 	int off, ret;
 	const char *status;
@@ -171,7 +174,7 @@ static void ft_fixup_ddr_polling(const void *old_blob, void *new_blob)
 	if (off < 0) {
 		printf("%s: Couldn't find \"%s\" node: %s\n", __func__,
 		       exp_compatible, fdt_strerror(off));
-		return;
+		return -ENODEV;
 	}
 
 	/* Check "status" property */
@@ -179,22 +182,29 @@ static void ft_fixup_ddr_polling(const void *old_blob, void *new_blob)
 	if (!status) {
 		printf("%s: Node \"%s\" does not have \"status\" set",
 		       __func__, exp_compatible);
-		return;
+		return -EINVAL;
 	}
 
+	if (!strncmp("disabled", status, 8))
+		return 0;
+
 	/* Get node offset in Linux DT */
 	off = fdt_node_offset_by_compatible(new_blob, -1, exp_compatible);
 	if (off < 0) {
 		printf("%s: Couldn't find \"%s\" node: %s\n", __func__,
 		       exp_compatible, fdt_strerror(off));
-		return;
+		return -ENODEV;
 	}
 
 	/* Copy the status from the U-Boot DT */
 	ret = fdt_setprop_string(new_blob, off, "status", status);
-	if (ret)
+	if (ret) {
 		printf("WARNING: Could not fix up the Linux DT, err=%s\n",
 		       fdt_strerror(ret));
+		return ret;
+	}
+
+	return 0;
 }
 
 static void apply_memory_fixups(void *blob, bd_t *bd)
@@ -707,9 +717,19 @@ void ft_cpu_setup(void *blob, bd_t *bd)
 {
 	ft_fixup_cpu(blob);
 	ft_fixup_memory(blob, bd);
-	ft_fixup_ddr_polling(gd->fdt_blob, blob);
 	ft_fixup_atf(gd->fdt_blob, blob);
 #ifdef CONFIG_PCIE_S32GEN1
 	ft_fixup_serdes(blob);
 #endif
 }
+
+int ft_system_setup(void *blob, bd_t *bd)
+{
+	int ret;
+
+	ret = ft_fixup_cpu(blob);
+	if (ret)
+		return ret;
+
+	return ft_fixup_ddr_polling(gd->fdt_blob, blob);
+}
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index cd7b4922a5..a25c4cbfe6 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -52,6 +52,7 @@ obj-$(CONFIG_MPC83XX_SERDES) += mpc83xx_serdes.o
 obj-$(CONFIG_MXC_OCOTP) += mxc_ocotp.o
 obj-$(CONFIG_MXS_OCOTP) += mxs_ocotp.o
 obj-$(CONFIG_NUVOTON_NCT6102D) += nuvoton_nct6102d.o
+obj-$(CONFIG_NXP_S32CC) += s32cc_a53_gpr.o
 obj-$(CONFIG_NXP_S32CC) += s32cc_siul2_nvram.o
 obj-$(CONFIG_P2SB) += p2sb-uclass.o
 obj-$(CONFIG_PCA9551_LED) += pca9551_led.o
@@ -61,7 +62,6 @@ obj-$(CONFIG_ROCKCHIP_EFUSE) += rockchip-efuse.o
 obj-$(CONFIG_ROCKCHIP_OTP) += rockchip-otp.o
 obj-$(CONFIG_NXP_S32CC) += s32gen1_fuse.o
 obj-$(CONFIG_NXP_S32CC) += s32gen1_ocotp.o
-obj-$(CONFIG_NXP_S32CC) += s32gen1_a53_gpr.o
 obj-$(CONFIG_SANDBOX) += syscon_sandbox.o misc_sandbox.o
 obj-$(CONFIG_SMSC_LPC47M) += smsc_lpc47m.o
 obj-$(CONFIG_SMSC_SIO1007) += smsc_sio1007.o
diff --git a/drivers/misc/s32gen1_a53_gpr.c b/drivers/misc/s32cc_a53_gpr.c
similarity index 56%
rename from drivers/misc/s32gen1_a53_gpr.c
rename to drivers/misc/s32cc_a53_gpr.c
index fe41226e58..3908702872 100644
--- a/drivers/misc/s32gen1_a53_gpr.c
+++ b/drivers/misc/s32cc_a53_gpr.c
@@ -4,19 +4,19 @@
  */
 
 #include <common.h>
-#include <dm/device.h>
-#include <dm/fdtaddr.h>
+#include <dm.h>
 #include <misc.h>
 #include <asm/io.h>
-#include "s32gen1_a53_gpr.h"
+#include <dm/device.h>
+#include <s32-cc/a53_gpr.h>
 
 #define A53_CLUSTER_GPR_GPR(x) ((x) * 0x4)
 #define GPR06_CA53_LOCKSTEP_EN_MASK	BIT(0)
 #define GPR06_CA53_LOCKSTEP_EN_SHIFT	0
 
 struct a53_gpr {
-	const struct a53_gpr_platdata *platdata;
-	fdt_addr_t base;
+	const struct a53_gpr_plat *plat;
+	void __iomem *base;
 };
 
 struct a53_gpr_mapping {
@@ -26,22 +26,22 @@ struct a53_gpr_mapping {
 	u32 shift;
 };
 
-struct a53_gpr_platdata {
+struct a53_gpr_plat {
 	const struct a53_gpr_mapping *mappings;
 	size_t n_mappings;
-	const struct a53_gpr_platdata *next;
+	const struct a53_gpr_plat *next;
 };
 
 static const struct a53_gpr_mapping a53_gpr_mappings[] = {
 	{
-		.gpr_misc_off = S32GEN1_A53_GPR_LOCKSTEP_EN,
+		.gpr_misc_off = S32CC_A53_GPR_LOCKSTEP_EN,
 		.gpr_off = A53_CLUSTER_GPR_GPR(6),
 		.mask = GPR06_CA53_LOCKSTEP_EN_MASK,
 		.shift = GPR06_CA53_LOCKSTEP_EN_SHIFT,
 	},
 };
 
-static const struct a53_gpr_platdata s32gen1_a53_gpr_platdata = {
+static const struct a53_gpr_plat s32cc_a53_gpr_plat = {
 	.mappings = &a53_gpr_mappings[0],
 	.n_mappings = ARRAY_SIZE(a53_gpr_mappings),
 };
@@ -51,17 +51,17 @@ static int a53_gpr_read(struct udevice *dev,
 {
 	struct a53_gpr *a53_gpr_data = dev_get_platdata(dev);
 	const struct a53_gpr_mapping *mapping = NULL;
-	const struct a53_gpr_platdata *platdata = a53_gpr_data->platdata;
+	const struct a53_gpr_plat *plat = a53_gpr_data->plat;
 	size_t i;
 	u32 val;
 
 	if (size != sizeof(u32))
 		return 0;
 
-	while (platdata) {
-		for (i = 0u; i < platdata->n_mappings; i++) {
-			if (platdata->mappings[i].gpr_misc_off == offset) {
-				mapping = &platdata->mappings[i];
+	while (plat) {
+		for (i = 0u; i < plat->n_mappings; i++) {
+			if (plat->mappings[i].gpr_misc_off == offset) {
+				mapping = &plat->mappings[i];
 				break;
 			}
 		}
@@ -69,7 +69,7 @@ static int a53_gpr_read(struct udevice *dev,
 		if (mapping)
 			break;
 
-		platdata = platdata->next;
+		plat = plat->next;
 	}
 
 	if (!mapping)
@@ -82,37 +82,37 @@ static int a53_gpr_read(struct udevice *dev,
 	return size;
 }
 
-static int a53_gpr_set_platdata(struct udevice *dev)
+static int a53_gpr_set_plat(struct udevice *dev)
 {
 	struct a53_gpr *a53_gpr_data = dev_get_platdata(dev);
 
-	a53_gpr_data->base = devfdt_get_addr(dev);
-	if (a53_gpr_data->base == (fdt_addr_t)FDT_ADDR_T_NONE)
+	a53_gpr_data->base = dev_read_addr_ptr(dev);
+	if (!a53_gpr_data->base)
 		return -EINVAL;
 
-	a53_gpr_data->platdata = (struct a53_gpr_platdata *)
+	a53_gpr_data->plat = (struct a53_gpr_plat *)
 		dev_get_driver_data(dev);
 
 	return 0;
 }
 
-static const struct misc_ops s32gen1_a53_gpr_ops = {
+static const struct misc_ops s32cc_a53_gpr_ops = {
 	.read = a53_gpr_read,
 };
 
-static const struct udevice_id s32gen1_a53_gpr_ids[] = {
-	{ .compatible = "fsl,s32gen1-a53-gpr",
-	  .data = (ulong)&s32gen1_a53_gpr_platdata,
+static const struct udevice_id s32cc_a53_gpr_ids[] = {
+	{ .compatible = "nxp,s32cc-a53-gpr",
+	  .data = (ulong)&s32cc_a53_gpr_plat,
 	},
 	{ /* sentinel */ }
 };
 
-U_BOOT_DRIVER(s32gen1_a53_gpr) = {
-	.name = "s32gen1-a53-gpr",
+U_BOOT_DRIVER(s32cc_a53_gpr) = {
+	.name = "s32cc-a53-gpr",
 	.id = UCLASS_MISC,
-	.ops = &s32gen1_a53_gpr_ops,
-	.of_match = s32gen1_a53_gpr_ids,
+	.ops = &s32cc_a53_gpr_ops,
+	.of_match = s32cc_a53_gpr_ids,
 	.platdata_auto_alloc_size = sizeof(struct a53_gpr),
-	.ofdata_to_platdata = a53_gpr_set_platdata,
+	.ofdata_to_platdata = a53_gpr_set_plat,
 };
 
-- 
2.25.1

