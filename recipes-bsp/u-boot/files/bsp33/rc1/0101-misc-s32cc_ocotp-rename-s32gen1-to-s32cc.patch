From 17fff6e95c2377786575b7abf65877ea81045318 Mon Sep 17 00:00:00 2001
From: Andrei Botila <andrei.botila@nxp.com>
Date: Thu, 7 Apr 2022 10:32:59 +0300
Subject: [PATCH 101/103] misc: s32cc_ocotp: rename s32gen1 to s32cc

Change s32gen1 into s32cc for OCOTP and the fuse API.

Issue: ALB-8601
Upstream-Status: Pending 

Signed-off-by: Andrei Botila <andrei.botila@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 .../arm/mach-s32/include/s32-cc/s32cc_ocotp.h |  25 +++
 drivers/misc/Makefile                         |   4 +-
 drivers/misc/{s32gen1_fuse.c => s32cc_fuse.c} |  36 ++-
 .../misc/{s32gen1_ocotp.c => s32cc_ocotp.c}   | 208 +++++++++---------
 drivers/misc/s32gen1_ocotp.h                  |  25 ---
 5 files changed, 146 insertions(+), 152 deletions(-)
 create mode 100644 arch/arm/mach-s32/include/s32-cc/s32cc_ocotp.h
 rename drivers/misc/{s32gen1_fuse.c => s32cc_fuse.c} (64%)
 rename drivers/misc/{s32gen1_ocotp.c => s32cc_ocotp.c} (53%)
 delete mode 100644 drivers/misc/s32gen1_ocotp.h

diff --git a/arch/arm/mach-s32/include/s32-cc/s32cc_ocotp.h b/arch/arm/mach-s32/include/s32-cc/s32cc_ocotp.h
new file mode 100644
index 0000000000..72c79c38aa
--- /dev/null
+++ b/arch/arm/mach-s32/include/s32-cc/s32cc_ocotp.h
@@ -0,0 +1,25 @@
+/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause */
+/*
+ * Copyright 2021-2022 NXP
+ */
+#ifndef S32CC_OCOTP_H
+#define S32CC_OCOTP_H
+
+#define S32CC_OCOTP_BANK_OFFSET		0x200U
+#define S32CC_OCOTP_BANK_SIZE		0x20U
+#define S32CC_OCOTP_WORD_SIZE		0x4U
+
+/* Bank 0, word 6 */
+#define S32CC_OCOTP_DIE_PROCESS_ADDR	0x218
+#define S32CC_OCOTP_DIE_PROCESS_MASK	0x3
+
+#define S32CC_OCOTP_READ_FUSE_CMD	0x1
+#define S32CC_OCOTP_WRITE_FUSE_CMD	0x2
+
+struct s32cc_ocotp_cmd {
+	int offset;
+	void *buf;
+	int size;
+};
+
+#endif
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index a25c4cbfe6..06b04bd5ec 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -53,6 +53,8 @@ obj-$(CONFIG_MXC_OCOTP) += mxc_ocotp.o
 obj-$(CONFIG_MXS_OCOTP) += mxs_ocotp.o
 obj-$(CONFIG_NUVOTON_NCT6102D) += nuvoton_nct6102d.o
 obj-$(CONFIG_NXP_S32CC) += s32cc_a53_gpr.o
+obj-$(CONFIG_NXP_S32CC) += s32cc_fuse.o
+obj-$(CONFIG_NXP_S32CC) += s32cc_ocotp.o
 obj-$(CONFIG_NXP_S32CC) += s32cc_siul2_nvram.o
 obj-$(CONFIG_P2SB) += p2sb-uclass.o
 obj-$(CONFIG_PCA9551_LED) += pca9551_led.o
@@ -60,8 +62,6 @@ obj-$(CONFIG_$(SPL_)PWRSEQ) += pwrseq-uclass.o
 obj-$(CONFIG_QFW) += qfw.o
 obj-$(CONFIG_ROCKCHIP_EFUSE) += rockchip-efuse.o
 obj-$(CONFIG_ROCKCHIP_OTP) += rockchip-otp.o
-obj-$(CONFIG_NXP_S32CC) += s32gen1_fuse.o
-obj-$(CONFIG_NXP_S32CC) += s32gen1_ocotp.o
 obj-$(CONFIG_SANDBOX) += syscon_sandbox.o misc_sandbox.o
 obj-$(CONFIG_SMSC_LPC47M) += smsc_lpc47m.o
 obj-$(CONFIG_SMSC_SIO1007) += smsc_sio1007.o
diff --git a/drivers/misc/s32gen1_fuse.c b/drivers/misc/s32cc_fuse.c
similarity index 64%
rename from drivers/misc/s32gen1_fuse.c
rename to drivers/misc/s32cc_fuse.c
index 1782c57e03..6c0d9e988e 100644
--- a/drivers/misc/s32gen1_fuse.c
+++ b/drivers/misc/s32cc_fuse.c
@@ -1,14 +1,12 @@
 // SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
 /*
- * Copyright 2021 NXP
+ * Copyright 2021-2022 NXP
  */
-
-#include "s32gen1_ocotp.h"
 #include <common.h>
-#include <dm/device.h>
-#include <dm/uclass.h>
+#include <dm.h>
 #include <fuse.h>
 #include <misc.h>
+#include <s32-cc/s32cc_ocotp.h>
 
 static struct udevice *get_ocotp_driver(void)
 {
@@ -19,10 +17,10 @@ static struct udevice *get_ocotp_driver(void)
 		return dev;
 
 	ret = uclass_get_device_by_driver(UCLASS_MISC,
-					  DM_GET_DRIVER(s32gen1_ocotp),
+					  DM_GET_DRIVER(s32cc_ocotp),
 					  &dev);
 	if (ret) {
-		log_err("Failed to get 's32gen1_ocotp' driver\n");
+		log_err("Failed to get %s driver\n", dev->driver->name);
 		return NULL;
 	}
 
@@ -33,9 +31,9 @@ static u32 get_offset(u32 bank, u32 word)
 {
 	u32 offset;
 
-	offset = S32GEN1_OCOTP_BANK_OFFSET;
-	offset += bank * S32GEN1_OCOTP_BANK_SIZE;
-	offset += word * S32GEN1_OCOTP_WORD_SIZE;
+	offset = S32CC_OCOTP_BANK_OFFSET;
+	offset += bank * S32CC_OCOTP_BANK_SIZE;
+	offset += word * S32CC_OCOTP_WORD_SIZE;
 
 	return offset;
 }
@@ -53,10 +51,10 @@ int fuse_read(u32 bank, u32 word, u32 *val)
 	offset = get_offset(bank, word);
 
 	/* Read from shadow cache */
-	ret = misc_read(dev, offset, val, S32GEN1_OCOTP_WORD_SIZE);
+	ret = misc_read(dev, offset, val, S32CC_OCOTP_WORD_SIZE);
 
 	/* Read less than 4 bytes */
-	if (ret == S32GEN1_OCOTP_WORD_SIZE)
+	if (ret == S32CC_OCOTP_WORD_SIZE)
 		ret = 0;
 
 	return ret;
@@ -75,8 +73,8 @@ int fuse_override(u32 bank, u32 word, u32 val)
 	offset = get_offset(bank, word);
 
 	/* Write shadow value */
-	ret = misc_write(dev, offset, &val, S32GEN1_OCOTP_WORD_SIZE);
-	if (ret == S32GEN1_OCOTP_WORD_SIZE)
+	ret = misc_write(dev, offset, &val, S32CC_OCOTP_WORD_SIZE);
+	if (ret == S32CC_OCOTP_WORD_SIZE)
 		ret = 0;
 
 	return ret;
@@ -86,7 +84,7 @@ static int fuse_ioctl(u32 bank, u32 word, int command, u32 *val)
 {
 	struct udevice *dev;
 	u32 offset;
-	struct s32gen1_ocotp_cmd cmd;
+	struct s32cc_ocotp_cmd cmd;
 
 	dev = get_ocotp_driver();
 	if (!dev)
@@ -94,10 +92,10 @@ static int fuse_ioctl(u32 bank, u32 word, int command, u32 *val)
 
 	offset = get_offset(bank, word);
 
-	cmd = (struct s32gen1_ocotp_cmd) {
+	cmd = (struct s32cc_ocotp_cmd) {
 		.offset = offset,
 		.buf = val,
-		.size = S32GEN1_OCOTP_WORD_SIZE,
+		.size = S32CC_OCOTP_WORD_SIZE,
 	};
 
 	/* Read/write from/to fuses */
@@ -106,11 +104,11 @@ static int fuse_ioctl(u32 bank, u32 word, int command, u32 *val)
 
 int fuse_sense(u32 bank, u32 word, u32 *val)
 {
-	return fuse_ioctl(bank, word, S32GEN1_OCOTP_READ_FUSE_CMD, val);
+	return fuse_ioctl(bank, word, S32CC_OCOTP_READ_FUSE_CMD, val);
 }
 
 int fuse_prog(u32 bank, u32 word, u32 val)
 {
-	return fuse_ioctl(bank, word, S32GEN1_OCOTP_WRITE_FUSE_CMD, &val);
+	return fuse_ioctl(bank, word, S32CC_OCOTP_WRITE_FUSE_CMD, &val);
 }
 
diff --git a/drivers/misc/s32gen1_ocotp.c b/drivers/misc/s32cc_ocotp.c
similarity index 53%
rename from drivers/misc/s32gen1_ocotp.c
rename to drivers/misc/s32cc_ocotp.c
index 3f24c98862..b0ae84bd7f 100644
--- a/drivers/misc/s32gen1_ocotp.c
+++ b/drivers/misc/s32cc_ocotp.c
@@ -1,63 +1,62 @@
 // SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
 /*
- * Copyright 2021 NXP
+ * Copyright 2021-2022 NXP
  */
-#include "s32gen1_ocotp.h"
-#include <dm/device.h>
-#include <dm/fdtaddr.h>
-#include <linux/bitops.h>
-#include <linux/errno.h>
-#include <log.h>
+#include <dm.h>
 #include <misc.h>
+#include <log.h>
 #include <asm/io.h>
-
-#define OCOTP_WORD(X)		BIT(X)
-#define OCOTP_WORD_RANGE(L, H)	GENMASK(H, L)
-
-#define CTRL_SYS		0x0
-#define   CTRL_AUTH_KEY		(0x12 << 16)
-#define   CTRL_RD_WR(X)		((X) << 2)
-#define   CTRL_READ_FUSE	1
-#define   CTRL_WRITE_FUSE	2
-#define ADDR_SYS		0x4
-#define WRDATA_SYS		0x8
-#define RDATA_SYS		0xC
-#define STATUS_SYS		0x50
-#define   STATUS_BUSY		BIT(0)
-#define   STATUS_CRC_FAIL	BIT(1)
-#define   STATUS_ERROR		BIT(2)
+#include <linux/bitops.h>
+#include <linux/errno.h>
+#include <s32-cc/s32cc_ocotp.h>
+
+#define	OCOTP_WORD(X)		BIT(X)
+#define	OCOTP_WORD_RANGE(L, H)	GENMASK(H, L)
+
+#define	CTRL_SYS		0x0
+#define	CTRL_AUTH_KEY		(0x12 << 16)
+#define	CTRL_RD_WR(X)		((X) << 2)
+#define	CTRL_READ_FUSE		1
+#define	CTRL_WRITE_FUSE		2
+#define	ADDR_SYS		0x4
+#define	WRDATA_SYS		0x8
+#define	RDATA_SYS		0xC
+#define	STATUS_SYS		0x50
+#define	STATUS_BUSY		BIT(0)
+#define	STATUS_CRC_FAIL		BIT(1)
+#define	STATUS_ERROR		BIT(2)
 
 /* Write is allowed without a lock */
-#define NO_LOCK			0xFF
+#define	NO_LOCK			0xFF
 /* Read only */
-#define RO_ONLY_LOCK		0
-
-#define GP1_LOCK		1
-#define GP2_LOCK		3
-#define BOOT_CFG_LOCK		5
-#define MISC_CONF_LOCK		7
-#define MAC_ADDR_LOCK		9
-#define GP5_LOCK		11
-#define LOCK_CUSTOMER_LOCK	31
-#define GP6_LOCK		33
-
-struct s32gen1_fuse {
+#define	RO_ONLY_LOCK		0
+
+#define	GP1_LOCK		1
+#define	GP2_LOCK		3
+#define	BOOT_CFG_LOCK		5
+#define	MISC_CONF_LOCK		7
+#define	MAC_ADDR_LOCK		9
+#define	GP5_LOCK		11
+#define	LOCK_CUSTOMER_LOCK	31
+#define	GP6_LOCK		33
+
+struct s32cc_fuse {
 	u8 bank;
 	u8 words_mask;
 	u8 lock;
 };
 
-struct s32gen1_fuse_map {
-	const struct s32gen1_fuse *map;
+struct s32cc_fuse_map {
+	const struct s32cc_fuse *map;
 	size_t n_entries;
 };
 
-struct s32gen1_ocotp_platdata {
-	fdt_addr_t base;
-	const struct s32gen1_fuse_map *fuses;
+struct s32cc_ocotp_platdata {
+	void __iomem *base;
+	const struct s32cc_fuse_map *fuses;
 };
 
-static const struct s32gen1_fuse s32gen1_fuse_map[] = {
+static const struct s32cc_fuse s32cc_fuse_map[] = {
 	{ .bank = 0, .words_mask = OCOTP_WORD_RANGE(2, 6),
 		.lock = LOCK_CUSTOMER_LOCK },
 	{ .bank = 1, .words_mask = OCOTP_WORD_RANGE(5, 7),
@@ -93,23 +92,23 @@ static const struct s32gen1_fuse s32gen1_fuse_map[] = {
 		.lock = RO_ONLY_LOCK },
 };
 
-static const struct s32gen1_fuse_map s32gen1_map = {
-	.map = s32gen1_fuse_map,
-	.n_entries = ARRAY_SIZE(s32gen1_fuse_map),
+static const struct s32cc_fuse_map s32cc_map = {
+	.map = s32cc_fuse_map,
+	.n_entries = ARRAY_SIZE(s32cc_fuse_map),
 };
 
 static u32 get_bank_index(int offset)
 {
-	return (offset - S32GEN1_OCOTP_BANK_OFFSET) / S32GEN1_OCOTP_BANK_SIZE;
+	return (offset - S32CC_OCOTP_BANK_OFFSET) / S32CC_OCOTP_BANK_SIZE;
 }
 
 static u32 get_word_index(int offset)
 {
-	return offset % S32GEN1_OCOTP_BANK_SIZE / S32GEN1_OCOTP_WORD_SIZE;
+	return offset % S32CC_OCOTP_BANK_SIZE / S32CC_OCOTP_WORD_SIZE;
 }
 
-static const struct s32gen1_fuse *get_fuse(const struct s32gen1_fuse_map *map,
-					   u32 bank, u32 word)
+static const struct s32cc_fuse *get_fuse(const struct s32cc_fuse_map *map,
+					 u32 bank, u32 word)
 {
 	size_t i;
 
@@ -122,7 +121,7 @@ static const struct s32gen1_fuse *get_fuse(const struct s32gen1_fuse_map *map,
 	return NULL;
 }
 
-static bool is_valid_word(const struct s32gen1_fuse_map *map,
+static bool is_valid_word(const struct s32cc_fuse_map *map,
 			  u32 bank, u32 word)
 {
 	if (bank >= map->n_entries)
@@ -134,7 +133,7 @@ static bool is_valid_word(const struct s32gen1_fuse_map *map,
 	return false;
 }
 
-static u32 wait_if_busy(fdt_addr_t base)
+static u32 wait_if_busy(void __iomem *base)
 {
 	u32 status;
 
@@ -145,20 +144,17 @@ static u32 wait_if_busy(fdt_addr_t base)
 	return status;
 }
 
-static u32 wait_and_clear_err(fdt_addr_t base)
+static u32 wait_and_clear_err(void __iomem *base)
 {
 	u32 status = wait_if_busy(base);
 
-	if (status & STATUS_ERROR) {
+	if (status & STATUS_ERROR)
 		writel(status, base + STATUS_SYS);
 
-		status = wait_if_busy(base);
-	}
-
 	return readl(base + STATUS_SYS);
 }
 
-static int read_ocotp(fdt_addr_t base, u32 reg, u32 *val)
+static int read_ocotp(void __iomem *base, u32 reg, u32 *val)
 {
 	u32 status;
 
@@ -180,7 +176,7 @@ static int read_ocotp(fdt_addr_t base, u32 reg, u32 *val)
 	return 0;
 }
 
-static int init_word_bank(struct s32gen1_ocotp_platdata *plat, int offset,
+static int init_word_bank(struct s32cc_ocotp_platdata *plat, int offset,
 			  int size, u32 *bank, u32 *word)
 {
 	if (offset < 0)
@@ -201,10 +197,10 @@ static int init_word_bank(struct s32gen1_ocotp_platdata *plat, int offset,
 	return 0;
 }
 
-static int s32gen1_ocotp_shadow_read(struct udevice *dev, int offset,
-				     void *buf, int size)
+static int s32cc_ocotp_shadow_read(struct udevice *dev, int offset,
+				   void *buf, int size)
 {
-	struct s32gen1_ocotp_platdata *plat = dev_get_platdata(dev);
+	struct s32cc_ocotp_platdata *plat = dev_get_platdata(dev);
 	u32 bank, word;
 	int ret;
 
@@ -217,10 +213,10 @@ static int s32gen1_ocotp_shadow_read(struct udevice *dev, int offset,
 	return size;
 }
 
-static int s32gen1_ocotp_shadow_write(struct udevice *dev, int offset,
-				      const void *buf, int size)
+static int s32cc_ocotp_shadow_write(struct udevice *dev, int offset,
+				    const void *buf, int size)
 {
-	struct s32gen1_ocotp_platdata *plat = dev_get_platdata(dev);
+	struct s32cc_ocotp_platdata *plat = dev_get_platdata(dev);
 	u32 bank, word, *val;
 	int ret;
 
@@ -237,8 +233,8 @@ static int s32gen1_ocotp_shadow_write(struct udevice *dev, int offset,
 	return size;
 }
 
-static int s32gen1_ocotp_fuse_read(struct s32gen1_ocotp_platdata *plat,
-				   int offset, void *buf, int size)
+static int s32cc_ocotp_fuse_read(struct s32cc_ocotp_platdata *plat,
+				 int offset, void *buf, int size)
 {
 	u32 bank, word;
 	int ret;
@@ -250,8 +246,8 @@ static int s32gen1_ocotp_fuse_read(struct s32gen1_ocotp_platdata *plat,
 	return read_ocotp(plat->base, offset, buf);
 }
 
-static int check_write_lock(struct s32gen1_ocotp_platdata *plat,
-			    const struct s32gen1_fuse *fuse)
+static int check_write_lock(struct s32cc_ocotp_platdata *plat,
+			    const struct s32cc_fuse *fuse)
 {
 	int ret;
 	u32 offset, value, lock_mask, word;
@@ -263,15 +259,15 @@ static int check_write_lock(struct s32gen1_ocotp_platdata *plat,
 		return -EPERM;
 
 	/* All locks are placed in bank 0, words 2-3 */
-	word = 2 + fuse->lock / S32GEN1_OCOTP_BANK_SIZE;
+	word = 2 + fuse->lock / S32CC_OCOTP_BANK_SIZE;
 
-	offset = S32GEN1_OCOTP_BANK_OFFSET + word * S32GEN1_OCOTP_WORD_SIZE;
+	offset = S32CC_OCOTP_BANK_OFFSET + word * S32CC_OCOTP_WORD_SIZE;
 
-	ret = s32gen1_ocotp_fuse_read(plat, offset, &value, sizeof(value));
+	ret = s32cc_ocotp_fuse_read(plat, offset, &value, sizeof(value));
 	if (ret)
 		return ret;
 
-	lock_mask = BIT(fuse->lock % S32GEN1_OCOTP_BANK_SIZE);
+	lock_mask = BIT(fuse->lock % S32CC_OCOTP_BANK_SIZE);
 
 	if (!(value & lock_mask))
 		return 0;
@@ -279,11 +275,11 @@ static int check_write_lock(struct s32gen1_ocotp_platdata *plat,
 	return -EPERM;
 }
 
-static int write_ocotp(struct s32gen1_ocotp_platdata *plat, u32 reg, u32 bank,
+static int write_ocotp(struct s32cc_ocotp_platdata *plat, u32 reg, u32 bank,
 		       u32 word, u32 val)
 {
-	const struct s32gen1_fuse *fuse = get_fuse(plat->fuses, bank, word);
-	fdt_addr_t base = plat->base;
+	const struct s32cc_fuse *fuse = get_fuse(plat->fuses, bank, word);
+	void __iomem *base = plat->base;
 	u32 status;
 	int ret;
 
@@ -313,8 +309,8 @@ static int write_ocotp(struct s32gen1_ocotp_platdata *plat, u32 reg, u32 bank,
 	return 0;
 }
 
-static int s32gen1_ocotp_fuse_write(struct s32gen1_ocotp_platdata *plat,
-				    int offset, const void *buf, int size)
+static int s32cc_ocotp_fuse_write(struct s32cc_ocotp_platdata *plat,
+				  int offset, const void *buf, int size)
 {
 	u32 bank, word;
 	int ret;
@@ -326,56 +322,56 @@ static int s32gen1_ocotp_fuse_write(struct s32gen1_ocotp_platdata *plat,
 	return write_ocotp(plat, offset, bank, word, *(const u32 *)buf);
 }
 
-static int s32gen1_ocotp_ioctl(struct udevice *dev, unsigned long request,
-			       void *buf)
+static int s32cc_ocotp_ioctl(struct udevice *dev, unsigned long request,
+			     void *buf)
 {
-	struct s32gen1_ocotp_platdata *plat = dev_get_platdata(dev);
-	struct s32gen1_ocotp_cmd *cmd = buf;
-
-	if (request == S32GEN1_OCOTP_READ_FUSE_CMD) {
-		return s32gen1_ocotp_fuse_read(plat, cmd->offset,
-					       cmd->buf, cmd->size);
-	} else if (request == S32GEN1_OCOTP_WRITE_FUSE_CMD) {
-		return s32gen1_ocotp_fuse_write(plat, cmd->offset,
-						cmd->buf, cmd->size);
+	struct s32cc_ocotp_platdata *plat = dev_get_platdata(dev);
+	struct s32cc_ocotp_cmd *cmd = buf;
+
+	if (request == S32CC_OCOTP_READ_FUSE_CMD) {
+		return s32cc_ocotp_fuse_read(plat, cmd->offset,
+					     cmd->buf, cmd->size);
+	} else if (request == S32CC_OCOTP_WRITE_FUSE_CMD) {
+		return s32cc_ocotp_fuse_write(plat, cmd->offset,
+					      cmd->buf, cmd->size);
 	}
 
 	return -EINVAL;
 }
 
-static int s32gen1_ocotp_platdata(struct udevice *bus)
+static int s32cc_ocotp_platdata(struct udevice *bus)
 {
-	struct s32gen1_ocotp_platdata *plat = dev_get_platdata(bus);
+	struct s32cc_ocotp_platdata *plat = dev_get_platdata(bus);
 
-	plat->base = devfdt_get_addr(bus);
-	if (plat->base == FDT_ADDR_T_NONE) {
+	plat->base = dev_read_addr_ptr(bus);
+	if (!plat->base) {
 		log_err("OCOTP: Can't get base address or size\n");
 		return -ENOMEM;
 	}
 
-	plat->fuses = (const struct s32gen1_fuse_map *)dev_get_driver_data(bus);
+	plat->fuses = (const struct s32cc_fuse_map *)dev_get_driver_data(bus);
 
 	return 0;
 }
 
-static const struct misc_ops s32gen1_ocotp_ops = {
-	.read = s32gen1_ocotp_shadow_read,
-	.write = s32gen1_ocotp_shadow_write,
-	.ioctl = s32gen1_ocotp_ioctl,
+static const struct misc_ops s32cc_ocotp_ops = {
+	.read = s32cc_ocotp_shadow_read,
+	.write = s32cc_ocotp_shadow_write,
+	.ioctl = s32cc_ocotp_ioctl,
 };
 
-static const struct udevice_id s32gen1_ocotp_ids[] = {
-	{ .compatible = "fsl,s32g-ocotp",  .data = (ulong)&s32gen1_map },
-	{ .compatible = "fsl,s32r45-ocotp",  .data = (ulong)&s32gen1_map },
+static const struct udevice_id s32cc_ocotp_ids[] = {
+	{ .compatible = "nxp,s32g-ocotp",  .data = (ulong)&s32cc_map },
+	{ .compatible = "nxp,s32r45-ocotp",  .data = (ulong)&s32cc_map },
 	{ /* sentinel */ }
 };
 
-U_BOOT_DRIVER(s32gen1_ocotp) = {
-	.name = "s32gen1-ocotp",
+U_BOOT_DRIVER(s32cc_ocotp) = {
+	.name = "s32cc_ocotp",
 	.id = UCLASS_MISC,
-	.ops = &s32gen1_ocotp_ops,
-	.of_match = s32gen1_ocotp_ids,
-	.platdata_auto_alloc_size = sizeof(struct s32gen1_ocotp_platdata),
-	.ofdata_to_platdata = s32gen1_ocotp_platdata,
+	.ops = &s32cc_ocotp_ops,
+	.of_match = s32cc_ocotp_ids,
+	.platdata_auto_alloc_size = sizeof(struct s32cc_ocotp_platdata),
+	.ofdata_to_platdata = s32cc_ocotp_platdata,
 };
 
diff --git a/drivers/misc/s32gen1_ocotp.h b/drivers/misc/s32gen1_ocotp.h
deleted file mode 100644
index 3dc16f2661..0000000000
--- a/drivers/misc/s32gen1_ocotp.h
+++ /dev/null
@@ -1,25 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause */
-/*
- * Copyright 2021 NXP
- */
-#ifndef S32GEN1_OCOTP_H
-#define S32GEN1_OCOTP_H
-
-#define S32GEN1_OCOTP_BANK_OFFSET	0x200U
-#define S32GEN1_OCOTP_BANK_SIZE		0x20U
-#define S32GEN1_OCOTP_WORD_SIZE		0x4U
-
-/* Bank 0, word 6 */
-#define S32GEN1_OCOTP_DIE_PROCESS_ADDR	0x218
-#define S32GEN1_OCOTP_DIE_PROCESS_MASK	0x3
-
-#define S32GEN1_OCOTP_READ_FUSE_CMD	0x1
-#define S32GEN1_OCOTP_WRITE_FUSE_CMD	0x2
-
-struct s32gen1_ocotp_cmd {
-	int offset;
-	void *buf;
-	int size;
-};
-
-#endif
-- 
2.25.1

