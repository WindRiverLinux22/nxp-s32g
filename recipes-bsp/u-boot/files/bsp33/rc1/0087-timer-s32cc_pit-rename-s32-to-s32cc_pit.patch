From ede535bfac35cb864fff466db18461f0927fe9cc Mon Sep 17 00:00:00 2001
From: Andrei Botila <andrei.botila@nxp.com>
Date: Thu, 24 Mar 2022 09:41:05 +0200
Subject: [PATCH 087/103] timer: s32cc_pit: rename s32 to s32cc_pit

Issue: ALB-8591
Upstream-Status: Pending 

Signed-off-by: Andrei Botila <andrei.botila@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/mach-s32/Kconfig                     |  2 +-
 drivers/timer/Kconfig                         |  6 +-
 drivers/timer/Makefile                        |  2 +-
 .../timer/{s32_timer.c => s32cc_pit_timer.c}  | 56 +++++++++++--------
 4 files changed, 38 insertions(+), 28 deletions(-)
 rename drivers/timer/{s32_timer.c => s32cc_pit_timer.c} (60%)

diff --git a/arch/arm/mach-s32/Kconfig b/arch/arm/mach-s32/Kconfig
index ee96d53c5d..fc010061f0 100644
--- a/arch/arm/mach-s32/Kconfig
+++ b/arch/arm/mach-s32/Kconfig
@@ -31,9 +31,9 @@ config NXP_S32CC
 	imply FSL_QSPI
 	imply MISC
 	imply MP
+	imply NXP_S32CC_PIT_TIMER
 	imply PCI
 	imply PCIE_S32GEN1
-	imply S32_TIMER
 	imply SPI
 	imply SYS_I2C_MXC
 	imply TIMER
diff --git a/drivers/timer/Kconfig b/drivers/timer/Kconfig
index 277bab24f9..d5bb1d9b3b 100644
--- a/drivers/timer/Kconfig
+++ b/drivers/timer/Kconfig
@@ -177,12 +177,12 @@ config STM32_TIMER
 	  Select this to enable support for the timer found on
 	  STM32 devices.
 
-config S32_TIMER
-	bool "S32 PIT timer support"
+config NXP_S32CC_PIT_TIMER
+	bool "NXP S32CC PIT timer support"
 	depends on TIMER
 	help
 	  Select this to enable Periodic Interrupt Timer (PIT)
-	  for NXP S32.
+	  for NXP S32CC.
 
 config X86_TSC_TIMER
 	bool "x86 Time-Stamp Counter (TSC) timer support"
diff --git a/drivers/timer/Makefile b/drivers/timer/Makefile
index 2ef7cf1fe3..3b546577f6 100644
--- a/drivers/timer/Makefile
+++ b/drivers/timer/Makefile
@@ -13,6 +13,7 @@ obj-$(CONFIG_CADENCE_TTC_TIMER)	+= cadence-ttc.o
 obj-$(CONFIG_DESIGNWARE_APB_TIMER)	+= dw-apb-timer.o
 obj-$(CONFIG_MPC83XX_TIMER) += mpc83xx_timer.o
 obj-$(CONFIG_NOMADIK_MTU_TIMER)	+= nomadik-mtu-timer.o
+obj-$(CONFIG_NXP_S32CC_PIT_TIMER)	+= s32cc_pit_timer.o
 obj-$(CONFIG_OMAP_TIMER)	+= omap-timer.o
 obj-$(CONFIG_RENESAS_OSTM_TIMER) += ostm_timer.o
 obj-$(CONFIG_RISCV_TIMER) += riscv_timer.o
@@ -20,6 +21,5 @@ obj-$(CONFIG_ROCKCHIP_TIMER) += rockchip_timer.o
 obj-$(CONFIG_SANDBOX_TIMER)	+= sandbox_timer.o
 obj-$(CONFIG_STI_TIMER)		+= sti-timer.o
 obj-$(CONFIG_STM32_TIMER)	+= stm32_timer.o
-obj-$(CONFIG_S32_TIMER)		+= s32_timer.o
 obj-$(CONFIG_X86_TSC_TIMER)	+= tsc_timer.o
 obj-$(CONFIG_MTK_TIMER)		+= mtk_timer.o
diff --git a/drivers/timer/s32_timer.c b/drivers/timer/s32cc_pit_timer.c
similarity index 60%
rename from drivers/timer/s32_timer.c
rename to drivers/timer/s32cc_pit_timer.c
index 602dbbebfe..43e65fdce7 100644
--- a/drivers/timer/s32_timer.c
+++ b/drivers/timer/s32cc_pit_timer.c
@@ -6,7 +6,6 @@
 #include <common.h>
 #include <dm.h>
 #include <errno.h>
-#include <fdtdec.h>
 #include <timer.h>
 #include <asm/io.h>
 
@@ -25,11 +24,11 @@
 /* Timer start value for count down */
 #define TSV	0xFFFFFFFF
 
-struct s32_timer_priv {
-	fdt_addr_t base;
+struct s32cc_pit_priv {
+	void __iomem *base;
 };
 
-static u64 s32_time_get_lifetime_counter(struct s32_timer_priv *priv)
+static u64 s32cc_pit_get_lifetime_counter(struct s32cc_pit_priv *priv)
 {
 	u64 ltmr64h, ltmr64l;
 	u64 cntr;
@@ -42,10 +41,15 @@ static u64 s32_time_get_lifetime_counter(struct s32_timer_priv *priv)
 	return cntr;
 }
 
-static int s32_timer_get_count(struct udevice *dev, u64 *count)
+static int s32cc_pit_get_count(struct udevice *dev, u64 *count)
 {
-	struct s32_timer_priv *priv = dev_get_priv(dev);
-	u64 cntr = s32_time_get_lifetime_counter(priv);
+	struct s32cc_pit_priv *priv = dev_get_priv(dev);
+	u64 cntr;
+
+	if (!priv)
+		return -EINVAL;
+
+	cntr = s32cc_pit_get_lifetime_counter(priv);
 
 	*count = ~0ull - cntr;
 
@@ -71,11 +75,14 @@ ulong timer_get_boot_us(void)
 	return us;
 }
 
-static int s32_timer_probe(struct udevice *dev)
+static int s32cc_pit_probe(struct udevice *dev)
 {
-	struct s32_timer_priv *priv = dev_get_priv(dev);
+	struct s32cc_pit_priv *priv = dev_get_priv(dev);
 	u32 tmp;
 
+	if (!priv)
+		return -EINVAL;
+
 	/* Load timer0 and timer1 start value */
 	writel(TSV, priv->base + PIT_LDVAL(0));
 	writel(TSV, priv->base + PIT_LDVAL(1));
@@ -94,32 +101,35 @@ static int s32_timer_probe(struct udevice *dev)
 	return 0;
 }
 
-static int s32_timer_ofdata_to_platdata(struct udevice *dev)
+static int s32cc_pit_ofdata_to_platdata(struct udevice *dev)
 {
-	struct s32_timer_priv *priv = dev_get_priv(dev);
+	struct s32cc_pit_priv *priv = dev_get_priv(dev);
+
+	if (!priv)
+		return -EINVAL;
 
-	priv->base = devfdt_get_addr(dev);
-	if (priv->base == (fdt_addr_t)FDT_ADDR_T_NONE)
+	priv->base = dev_read_addr_ptr(dev);
+	if (!priv->base)
 		return -EINVAL;
 
 	return 0;
 }
 
-static const struct timer_ops s32_timer_ops = {
-	.get_count = s32_timer_get_count,
+static const struct timer_ops s32cc_pit_ops = {
+	.get_count = s32cc_pit_get_count,
 };
 
-static const struct udevice_id s32_timer_ids[] = {
+static const struct udevice_id s32cc_pit_ids[] = {
 	{ .compatible = "fsl,s32gen1-timer" },
 	{}
 };
 
-U_BOOT_DRIVER(s32_timer) = {
-	.name	= "s32_timer",
+U_BOOT_DRIVER(s32cc_pit_timer) = {
+	.name	= "s32cc_pit_timer",
 	.id	= UCLASS_TIMER,
-	.of_match = s32_timer_ids,
-	.probe	= s32_timer_probe,
-	.ofdata_to_platdata = s32_timer_ofdata_to_platdata,
-	.priv_auto_alloc_size = sizeof(struct s32_timer_priv),
-	.ops	= &s32_timer_ops,
+	.of_match = s32cc_pit_ids,
+	.probe	= s32cc_pit_probe,
+	.ofdata_to_platdata = s32cc_pit_ofdata_to_platdata,
+	.priv_auto_alloc_size = sizeof(struct s32cc_pit_priv),
+	.ops	= &s32cc_pit_ops,
 };
-- 
2.25.1

