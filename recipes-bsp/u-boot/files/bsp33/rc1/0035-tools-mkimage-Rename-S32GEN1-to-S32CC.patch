From 45a771869e6ae268f10e22858fc28bf88c612581 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Fri, 18 Mar 2022 09:38:54 +0200
Subject: [PATCH 035/103] tools: mkimage: Rename S32GEN1 to S32CC

Issue: ALB-8580
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/mach-s32/s32-cc/s32cc.cfg            |   4 +-
 common/image.c                                |   2 +-
 ...{README.s32gen1image => README.s32ccimage} |  18 +--
 include/image.h                               |   2 +-
 tools/s32ccimage.c                            | 112 +++++++++---------
 5 files changed, 69 insertions(+), 69 deletions(-)
 rename doc/{README.s32gen1image => README.s32ccimage} (89%)

diff --git a/arch/arm/mach-s32/s32-cc/s32cc.cfg b/arch/arm/mach-s32/s32-cc/s32cc.cfg
index f9f692c55a..749fb18410 100644
--- a/arch/arm/mach-s32/s32-cc/s32cc.cfg
+++ b/arch/arm/mach-s32/s32-cc/s32cc.cfg
@@ -2,8 +2,8 @@
  * Copyright 2022 NXP
  * SPDX-License-Identifier:	GPL-2.0+
  *
- * Refer doc/README.s32gen1image for more details about how-to configure
- * and create an S32GEN1 boot image
+ * Refer doc/README.s32ccimage for more details about how-to configure
+ * and create a boot image for SoC's part of S32 Common Chassis family
  *
  */
 
diff --git a/common/image.c b/common/image.c
index 25bf8de226..b757c7b42b 100644
--- a/common/image.c
+++ b/common/image.c
@@ -153,9 +153,9 @@ static const table_entry_t uimage_type[] = {
 	{	IH_TYPE_KERNEL_NOLOAD, "kernel_noload",  "Kernel Image (no loading done)", },
 	{	IH_TYPE_KWBIMAGE,   "kwbimage",   "Kirkwood Boot Image",},
 	{	IH_TYPE_IMXIMAGE,   "imximage",   "Freescale i.MX Boot Image",},
-	{	IH_TYPE_S32GEN1IMAGE,	"s32gen1image",	"NXP S32GEN1 Boot Image",},
 	{	IH_TYPE_IMX8IMAGE,  "imx8image",  "NXP i.MX8 Boot Image",},
 	{	IH_TYPE_IMX8MIMAGE, "imx8mimage", "NXP i.MX8M Boot Image",},
+	{	IH_TYPE_S32CCIMAGE, "s32ccimage", "NXP S32 Common Chassis Boot Image",},
 	{	IH_TYPE_INVALID,    "invalid",	  "Invalid Image",	},
 	{	IH_TYPE_MULTI,	    "multi",	  "Multi-File Image",	},
 	{	IH_TYPE_OMAPIMAGE,  "omapimage",  "TI OMAP SPL With GP CH",},
diff --git a/doc/README.s32gen1image b/doc/README.s32ccimage
similarity index 89%
rename from doc/README.s32gen1image
rename to doc/README.s32ccimage
index 20cf692949..e23abb6bc7 100644
--- a/doc/README.s32gen1image
+++ b/doc/README.s32ccimage
@@ -1,36 +1,36 @@
 ---------------------------------------------
-S32GEN1 Boot Image generation using mkimage
+S32 Common Chassis Boot Image generation using mkimage
 ---------------------------------------------
 
 This document describes the U-Boot feature as it
-is implemented for the NXP S32GEN1 family of SoCs.
+is implemented for the SoCs part of NXP S32 Common Chassis family.
 
-The S32GEN1 SoC's can boot directly from QSPI, EMMC and SD
+The S32CC SoC's can boot directly from QSPI, EMMC and SD
 using its internal BootROM support.
 
 For more details refer chapter 'Boot' from SoC's Reference Manual.
 
 Command syntax:
 --------------
-./tools/mkimage -T "s32gen1image" \
+./tools/mkimage -T "s32ccimage" \
 		-n <board specific configuration file> \
 		-a <load address> \
 		-e <execution entrypoit> \
 		-d <binary path> <output image>
 
 Example:
-	./tools/mkimage -T "s32gen1image" \
+	./tools/mkimage -T "s32ccimage" \
 			-n fip.cfgout \
 			-a 0x34300910 \
 			-e 0x34302000 \
 			-d fip.bin fip.s32
 
-s32gen1image support available with mkimage utility will generate a S32GEN1 boot
+s32ccimage support available with mkimage utility will generate a S32CC boot
 image that can be flashed on the board's QSPI, EMMC or SD.
 
 Board specific configuration file specifications:
 ------------------------------------------------
-1. This file must be specified using CONFIG_S32GEN1_CONFIG_FILE
+1. This file must be specified using CONFIG_S32CC_CONFIG_FILE
 2. This file can have empty lines and lines starting with "#" as first
    character to put comments
 3. This file can have configuration command lines as mentioned below,
@@ -43,7 +43,7 @@ Available commands
 	This enables secure boot when added to configuration file.
 
 	Usage:
-		SECBOOT "s32gen1_hse_fw.bin"
+		SECBOOT "s32cc_hse_fw.bin"
 
 2. BOOT_FROM
 	Selects the boot storage.
@@ -119,7 +119,7 @@ Available commands
 
 	This will make BootROM to load the range: [0x0, 0x3CB47]
 
-Typical example of s32gen1.cfg file:
+Typical example of s32cc.cfg file:
 -----------------------------------
 # Boot from QSPI
 BOOT_FROM qspi
diff --git a/include/image.h b/include/image.h
index 1216ef8c4d..acac81eb2f 100644
--- a/include/image.h
+++ b/include/image.h
@@ -260,7 +260,7 @@ enum {
 	IH_TYPE_FLATDT,			/* Binary Flat Device Tree Blob	*/
 	IH_TYPE_KWBIMAGE,		/* Kirkwood Boot Image		*/
 	IH_TYPE_IMXIMAGE,		/* Freescale IMXBoot Image	*/
-	IH_TYPE_S32GEN1IMAGE,		/* NXP S32GEN1 Boot Image	*/
+	IH_TYPE_S32CCIMAGE,		/* NXP S32 Common Chassis Boot Image */
 	IH_TYPE_UBLIMAGE,		/* Davinci UBL Image		*/
 	IH_TYPE_OMAPIMAGE,		/* TI OMAP Config Header Image	*/
 	IH_TYPE_AISIMAGE,		/* TI Davinci AIS Image		*/
diff --git a/tools/s32ccimage.c b/tools/s32ccimage.c
index dfae6ac838..370bed8a30 100644
--- a/tools/s32ccimage.c
+++ b/tools/s32ccimage.c
@@ -11,28 +11,28 @@
 #include <sys/types.h>
 #include <unistd.h>
 
-#define UNSPECIFIED	-1
+#define UNSPECIFIED			-1
 
 #define BCW_BOOT_TARGET_A53_0		(1)
 
 #define MBR_OFFSET			0x0
 #define MBR_SIZE			0x200
 
-#define S32GEN1_QSPI_IVT_OFFSET		0x0
-#define S32GEN1_SD_IVT_OFFSET		0x1000
+#define QSPI_IVT_OFFSET			0x0
+#define SD_IVT_OFFSET			0x1000
 #define IVT_VERSION			(0x60)
 #define IVT_TAG				(0xd1)
 
-#define S32GEN1_QSPI_PARAMS_SIZE	(0x200U)
-#define S32GEN1_QSPI_PARAMS_OFFSET	(0x200U)
+#define QSPI_PARAMS_SIZE		(0x200U)
+#define QSPI_PARAMS_OFFSET		(0x200U)
 
-#define S32GEN1_HSE_FW_MAX_SIZE		(0x80000ul)
-#define S32GEN1_HSE_SYS_IMG_MAX_SIZE	(0xc000ul)
+#define HSE_FW_MAX_SIZE			(0x80000ul)
+#define HSE_SYS_IMG_MAX_SIZE		(0xc000ul)
 
 #define APPLICATION_BOOT_CODE_TAG	(0xd5)
 #define APPLICATION_BOOT_CODE_VERSION	(0x60)
 
-#define S32_AUTO_OFFSET ((size_t)(-1))
+#define AUTO_OFFSET			((size_t)(-1))
 
 #define DCD_HEADER			(0x600000d2)
 #define DCD_MAXIMUM_SIZE		(8192)
@@ -209,27 +209,27 @@ static struct program_image image_layout = {
 		.size = sizeof(struct ivt),
 	},
 	.qspi_params = {
-		.offset = S32GEN1_QSPI_PARAMS_OFFSET,
-		.size = S32GEN1_QSPI_PARAMS_SIZE,
+		.offset = QSPI_PARAMS_OFFSET,
+		.size = QSPI_PARAMS_SIZE,
 	},
 	.dcd = {
-		.offset = S32_AUTO_OFFSET,
+		.offset = AUTO_OFFSET,
 		.size = DCD_MAXIMUM_SIZE,
 	},
 	.hse_fw = {
-		.offset = S32_AUTO_OFFSET,
-		.size = S32GEN1_HSE_FW_MAX_SIZE,
+		.offset = AUTO_OFFSET,
+		.size = HSE_FW_MAX_SIZE,
 	},
 	.hse_sys_img = {
-		.offset = S32_AUTO_OFFSET,
-		.size = S32GEN1_HSE_SYS_IMG_MAX_SIZE,
+		.offset = AUTO_OFFSET,
+		.size = HSE_SYS_IMG_MAX_SIZE,
 	},
 	.app_code = {
-		.offset = S32_AUTO_OFFSET,
+		.offset = AUTO_OFFSET,
 		.size = sizeof(struct application_boot_code),
 	},
 	.code = {
-		.offset = S32_AUTO_OFFSET,
+		.offset = AUTO_OFFSET,
 		.alignment = 0x8U,
 		.size = 0,
 	},
@@ -360,7 +360,7 @@ static void s32_compute_dyn_offsets(struct image_comp **parts, size_t n_parts)
 
 	/* First image with auto offset */
 	while ((start_index < n_parts) &&
-	       (parts[start_index]->offset != S32_AUTO_OFFSET))
+	       (parts[start_index]->offset != AUTO_OFFSET))
 		start_index++;
 
 	for (aindex = start_index; aindex < n_parts; aindex++) {
@@ -376,19 +376,19 @@ static void s32_compute_dyn_offsets(struct image_comp **parts, size_t n_parts)
 
 			/* Does it fit between i - 1 and i ? */
 			if (is_in_overlap(parts[aindex], parts[i])) {
-				parts[aindex]->offset = S32_AUTO_OFFSET;
+				parts[aindex]->offset = AUTO_OFFSET;
 				continue;
 			}
 
 			if (is_in_overlap(parts[aindex], parts[i - 1])) {
-				parts[aindex]->offset = S32_AUTO_OFFSET;
+				parts[aindex]->offset = AUTO_OFFSET;
 				continue;
 			}
 
 			break;
 		}
 
-		if (parts[aindex]->offset != S32_AUTO_OFFSET) {
+		if (parts[aindex]->offset != AUTO_OFFSET) {
 			/* Move freshly allocated aindex */
 			qsort(&parts[0], aindex + 1, sizeof(parts[0]),
 			      image_parts_comp);
@@ -404,13 +404,13 @@ static struct qspi_params *get_qspi_params(struct program_image *image)
 	return (struct qspi_params *)image->qspi_params.data;
 }
 
-static void s32gen1_set_qspi_params(struct qspi_params *qspi_params)
+static void s32cc_set_qspi_params(struct qspi_params *qspi_params)
 {
 	memcpy(qspi_params, iconfig.qspi_params.data,
 	       iconfig.qspi_params.size);
 }
 
-static void s32gen1_set_hse_fw(struct program_image *image)
+static void s32cc_set_hse_fw(struct program_image *image)
 {
 	uint8_t *data = iconfig.secboot.fw_data;
 	size_t size = iconfig.secboot.fw_size;
@@ -432,8 +432,8 @@ static void set_data_pointers(struct program_image *layout, void *header)
 	layout->hse_fw.data = data + layout->hse_fw.offset;
 }
 
-static void s32gen1_set_header(void *header, struct stat *sbuf, int unused,
-			       struct image_tool_params *tool_params)
+static void s32cc_set_header(void *header, struct stat *sbuf, int unused,
+			     struct image_tool_params *tool_params)
 {
 	size_t dcd_data_size;
 	uint8_t *dcd;
@@ -501,11 +501,11 @@ static void s32gen1_set_header(void *header, struct stat *sbuf, int unused,
 					app_code->ram_start_pointer,
 					app_code->code_length);
 	} else {
-		s32gen1_set_qspi_params(get_qspi_params(&image_layout));
+		s32cc_set_qspi_params(get_qspi_params(&image_layout));
 	}
 
 	if (iconfig.secboot.enable)
-		s32gen1_set_hse_fw(&image_layout);
+		s32cc_set_hse_fw(&image_layout);
 
 	image_layout.code.size = sbuf->st_size - image_layout.app_code.offset -
 		image_layout.app_code.size;
@@ -517,9 +517,9 @@ static void s32gen1_set_header(void *header, struct stat *sbuf, int unused,
 		munmap(iconfig.qspi_params.data, iconfig.qspi_params.size);
 }
 
-static int s32gen1_check_image_type(uint8_t type)
+static int s32cc_check_image_type(uint8_t type)
 {
-	if (type == IH_TYPE_S32GEN1IMAGE)
+	if (type == IH_TYPE_S32CCIMAGE)
 		return EXIT_SUCCESS;
 	else
 		return EXIT_FAILURE;
@@ -591,10 +591,10 @@ static void set_headers_size(struct program_image *program_image)
 	}
 
 	program_image->hse_fw.size = iconfig.secboot.fw_size;
-	if (program_image->hse_fw.size > S32GEN1_HSE_FW_MAX_SIZE) {
+	if (program_image->hse_fw.size > HSE_FW_MAX_SIZE) {
 		fprintf(stderr,
 			"HSE FW area exceeds the maximum allowed size (0x%lx\n)",
-			S32GEN1_HSE_FW_MAX_SIZE);
+			HSE_FW_MAX_SIZE);
 		exit(EXIT_FAILURE);
 	}
 }
@@ -676,7 +676,7 @@ static struct ivt *get_ivt_from_raw_blob(const unsigned char *ptr, int size,
 {
 	uint32_t offset, min_size;
 
-	offset = S32GEN1_QSPI_IVT_OFFSET;
+	offset = QSPI_IVT_OFFSET;
 	min_size = offset + sizeof(struct ivt);
 
 	if (size < min_size)
@@ -688,7 +688,7 @@ static struct ivt *get_ivt_from_raw_blob(const unsigned char *ptr, int size,
 		return (struct ivt *)ptr;
 	}
 
-	offset = S32GEN1_SD_IVT_OFFSET;
+	offset = SD_IVT_OFFSET;
 	min_size = offset + sizeof(struct ivt);
 
 	if (size < min_size)
@@ -739,7 +739,7 @@ static void print_layout(struct layout_comp **comps, size_t n)
 	fprintf(stderr, "\n");
 }
 
-static void s32gen1_print_header(const void *data)
+static void s32cc_print_header(const void *data)
 {
 	const struct ivt *ivt;
 	const uint8_t *data8 = data;
@@ -747,7 +747,7 @@ static void s32gen1_print_header(const void *data)
 	const struct application_boot_code *app;
 	bool qspi_boot;
 	size_t i;
-	int min_size = S32GEN1_SD_IVT_OFFSET + sizeof(struct ivt);
+	int min_size = SD_IVT_OFFSET + sizeof(struct ivt);
 	struct layout_comp ivt_comp, qspi, dcd, hse_fw,
 			   hse_img, app_hdr, app_comp;
 	struct layout_comp *comps[] = { &ivt_comp, &qspi, &dcd, &hse_fw,
@@ -765,8 +765,8 @@ static void s32gen1_print_header(const void *data)
 	ivt_comp.line_desc = "IVT:\t\t\t";
 
 	if (qspi_boot) {
-		qspi.offset = S32GEN1_QSPI_PARAMS_OFFSET;
-		qspi.size = S32GEN1_QSPI_PARAMS_SIZE;
+		qspi.offset = QSPI_PARAMS_OFFSET;
+		qspi.size = QSPI_PARAMS_SIZE;
 		qspi.line_desc = "QSPI Parameters:\t";
 	}
 
@@ -785,7 +785,7 @@ static void s32gen1_print_header(const void *data)
 
 	if (ivt->hse_sys_img_pointer) {
 		hse_img.offset = ivt->hse_sys_img_pointer;
-		hse_img.size = S32GEN1_HSE_SYS_IMG_MAX_SIZE;
+		hse_img.size = HSE_SYS_IMG_MAX_SIZE;
 		hse_img.line_desc = "HSE SYS Image:\t\t";
 	}
 
@@ -849,9 +849,9 @@ static int parse_boot_cmd(char *line)
 
 	if (boot == QSPI_BOOT) {
 		iconfig.flash_boot = true;
-		image_layout.ivt.offset = S32GEN1_QSPI_IVT_OFFSET;
+		image_layout.ivt.offset = QSPI_IVT_OFFSET;
 	} else {
-		image_layout.ivt.offset = S32GEN1_SD_IVT_OFFSET;
+		image_layout.ivt.offset = SD_IVT_OFFSET;
 	}
 
 	return 0;
@@ -1207,7 +1207,7 @@ static int build_conf(FILE *fconf)
 	return 0;
 }
 
-static int s32gen1_parse_config(struct image_tool_params *mparams)
+static int s32cc_parse_config(struct image_tool_params *mparams)
 {
 	FILE *fconf;
 	int ret;
@@ -1225,14 +1225,14 @@ static int s32gen1_parse_config(struct image_tool_params *mparams)
 	return ret;
 }
 
-static int s32gen1_vrec_header(struct image_tool_params *tool_params,
-			       struct image_type_params *type_params)
+static int s32cc_vrec_header(struct image_tool_params *tool_params,
+			     struct image_type_params *type_params)
 {
 	size_t header_size;
 	void *image = NULL;
 	int ret;
 
-	ret = s32gen1_parse_config(tool_params);
+	ret = s32cc_parse_config(tool_params);
 	if (ret)
 		exit(ret);
 
@@ -1243,14 +1243,14 @@ static int s32gen1_vrec_header(struct image_tool_params *tool_params,
 	return 0;
 }
 
-static int s32gen1_check_params(struct image_tool_params *params)
+static int s32cc_check_params(struct image_tool_params *params)
 {
 	if (!params)
 		return -EINVAL;
 
 	if (!strlen(params->imagename)) {
 		fprintf(stderr,
-			"Error: %s - Configuration file not specified, it is needed for s32gen1image generation\n",
+			"Error: %s - Configuration file not specified, it is needed for s32ccimage generation\n",
 			params->cmdname);
 		return -EINVAL;
 	}
@@ -1267,8 +1267,8 @@ static int s32gen1_check_params(struct image_tool_params *params)
 		(params->xflag) || !(strlen(params->imagename));
 }
 
-static int s32gen1_verify_header(unsigned char *ptr, int image_size,
-				 struct image_tool_params *params)
+static int s32cc_verify_header(unsigned char *ptr, int image_size,
+			       struct image_tool_params *params)
 {
 	if (!get_ivt_from_raw_blob(ptr, image_size, NULL))
 		return -FDT_ERR_BADSTRUCTURE;
@@ -1277,16 +1277,16 @@ static int s32gen1_verify_header(unsigned char *ptr, int image_size,
 }
 
 U_BOOT_IMAGE_TYPE(
-	s32gen1_image,
-	"NXP S32GEN1 Boot Image",
+	s32ccimage,
+	"NXP S32 Common Chassis Boot Image",
 	0,
 	NULL,
-	s32gen1_check_params,
-	s32gen1_verify_header,
-	s32gen1_print_header,
-	s32gen1_set_header,
+	s32cc_check_params,
+	s32cc_verify_header,
+	s32cc_print_header,
+	s32cc_set_header,
 	NULL,
-	s32gen1_check_image_type,
+	s32cc_check_image_type,
 	NULL,
-	s32gen1_vrec_header
+	s32cc_vrec_header
 );
-- 
2.25.1

