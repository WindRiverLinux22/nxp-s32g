From 6290b95f8b75913cd720eeacfca6c086a0b0ac41 Mon Sep 17 00:00:00 2001
From: Ondrej Spacek <ondrej.spacek@nxp.com>
Date: Wed, 6 Apr 2022 09:05:08 +0200
Subject: [PATCH 26/30] s32g: serdes: Add option to configure serdes mode5

s32g3 supports new serdes configuration mode. The mode enables 2.5Gbps
Ethernet on one lane and PCIe on second lane. Currently it is only for
demo usage/internal testing.

This mode can be enabled by adding configuration option demo=mode5
to hwconfig environmental variable

Issue: ALB-8750
Upstream-Status: Pending 

Signed-off-by: Ondrej Spacek <ondrej.spacek@nxp.com>
Signed-off-by: Ionut Vicovan <Ionut.Vicovan@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 .../include/asm/arch-s32/s32-cc/serdes_regs.h | 44 +++++++++
 .../asm/arch-s32/s32-cc/serdes_xpcs_regs.h    | 20 +++-
 arch/arm/include/asm/arch-s32/s32-cc/sgmii.h  | 27 ++++++
 arch/arm/mach-s32/s32-cc/Makefile             |  1 +
 arch/arm/mach-s32/s32-cc/sgmii/serdes_xpcs.c  | 94 ++++++++++++++++---
 arch/arm/mach-s32/s32-cc/sgmii/sgmii.c        | 84 ++++++++++-------
 drivers/pci/pcie_s32gen1.h                    |  6 --
 drivers/pci/serdes_s32gen1.c                  | 92 +++++++++++++++++-
 drivers/pci/serdes_s32gen1.h                  | 11 +--
 drivers/pci/serdes_s32gen1_io.h               |  5 +
 10 files changed, 314 insertions(+), 70 deletions(-)
 create mode 100644 arch/arm/include/asm/arch-s32/s32-cc/sgmii.h

diff --git a/arch/arm/include/asm/arch-s32/s32-cc/serdes_regs.h b/arch/arm/include/asm/arch-s32/s32-cc/serdes_regs.h
index ba0d3f9fe4..98f1c4f03a 100644
--- a/arch/arm/include/asm/arch-s32/s32-cc/serdes_regs.h
+++ b/arch/arm/include/asm/arch-s32/s32-cc/serdes_regs.h
@@ -128,6 +128,8 @@
 /* RESET CONTROL Register */
 #define SS_RST_CTRL				(SERDES_SS_BASE + 0x3010U)
 
+/* Field definitions for SS_RST_CTRL */
+#define COLD_RST				BIT(1)
 
 /* Field definitions for PHY_GEN_CTRL */
 
@@ -165,6 +167,19 @@
 #define MPLLA_STATE_BIT        (31)
 #define MPLLA_STATE            BIT(MPLLA_STATE_BIT)
 
+/* Field definitions for PHY_EXT_MPLLB EXT control Registers */
+
+#define EXT_MPLLB_FRACN_CTRL(x)			(((x) & 0x7ffU) << 12)
+#define EXT_MPLLB_WORD_DIV2_EN			BIT(31)
+#define EXT_MPLLB_TX_CLK_DIV(x)			(((x) & 0x7U) << 28)
+#define EXT_MPLLB_BANDWIDTH(x)			(((x) & 0xffffU) << 0)
+#define EXT_MPLLB_DIV_MULTIPLIER(x)		(((x) & 0xffU) << 24)
+#define EXT_MPLLB_DIV10_CLK_EN			BIT(16)
+#define EXT_MPLLB_DIV8_CLK_EN			BIT(18)
+#define EXT_MPLLB_DIV_CLK_EN			BIT(19)
+
+#define EXT_MPLLA_BANDWIDTH(x)			(((x) & 0xffffU) << 0)
+
 /* Field definitions for PCIE_PHY_MPLLB_CTRL */
 
 #define MPLLB_FORCE_EN_BIT      (0)
@@ -231,6 +246,35 @@
 #define PHY_REG_DATA_FIELD           ((PHY_REG_DATA_FIELD_MASK) << \
 		(PHY_REG_DATA_FIELD_LSB))
 
+/* Field definitions for SS_PHY_EXT_MISC_CTRL_2 */
+
+#define EXT_TX_VBOOST_LVL(x)	(((x) & 0x7U) << 16)
+#define EXT_TX_TERM_CTRL(x)		(((x) & 0x7U) << 24)
+
+/* Field definitions for SS_PHY_EXT_CTRL_SEL */
+
+#define EXT_PHY_CTRL_SEL BIT(0)
+
+/* Field definitions for SS_PHY_REF_CLK_CTRL */
+
+#define REF_CLK_DIV2_EN		BIT(2)
+#define REF_CLK_MPLLB_DIV2_EN	BIT(1)
+#define REF_CLK_DIV2_EN		BIT(2)
+#define EXT_REF_RANGE(x)	(((x) & 0x7U) << 3)
+
+/* Field definitions for XPCS external control */
+#define XPCS1_RX_VCO_LD_VAL(x)(((x) & 0x1fffU) << 16)
+#define XPCS1_RX_REF_LD_VAL(x)(((x) & 0x3fU) << 8)
+
+/* Field definitions for SS_PHY_EXT_BS_CTRL */
+#define EXT_BS_RX_LEVEL(x)(((x) & 0x1fU) << 0)
+#define EXT_BS_RX_BIGSWING BIT(5)
+#define EXT_BS_TX_LOWSWING BIT(6)
+
+/* Field definitions for SS_PHY_EXT_MISC_CTRL_1 */
+#define EXT_RX_LOS_THRESHOLD(x) (((x) & 0x3fU) << 1)
+#define EXT_RX_VREF_CTRL(x) (((x) & 0x1fU) << 24)
+
 /* PHY registers */
 
 #define RAWLANE0_DIG_PCS_XF_RX_EQ_DELTA_IQ_OVRD_IN	(0x3019)
diff --git a/arch/arm/include/asm/arch-s32/s32-cc/serdes_xpcs_regs.h b/arch/arm/include/asm/arch-s32/s32-cc/serdes_xpcs_regs.h
index 1cc758e3f3..e58189c2c5 100644
--- a/arch/arm/include/asm/arch-s32/s32-cc/serdes_xpcs_regs.h
+++ b/arch/arm/include/asm/arch-s32/s32-cc/serdes_xpcs_regs.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /*
- * Copyright 2019-2021 NXP
+ * Copyright 2019-2022 NXP
  *
  * The SerDes module header file.
  */
@@ -34,6 +34,7 @@
 #define VR_MII_GEN5_12G_16G_TX_POWER_STATE_CTRL 0x1f8035U
 #define VR_MII_GEN5_12G_16G_RX_POWER_STATE_CTRL 0x1F8055U
 #define VR_MII_GEN5_12G_16G_TX_EQ_CTRL0		0x1F8036U
+#define VR_MII_GEN5_12G_16G_TX_EQ_CTRL1		0x1F8037U
 #define VR_MII_CONSUMER_10G_TX_TERM_CTRL	0x1F803CU
 #define VR_MII_GEN5_12G_16G_RX_GENCTRL1		0x1F8051U
 #define VR_MII_GEN5_12G_16G_TX_GENCTRL1		0x1F8031U
@@ -52,6 +53,7 @@
 #define VR_MII_GEN5_12G_16G_TX_RATE_CTRL	0x1f8034U
 #define VR_MII_GEN5_12G_16G_RX_RATE_CTRL	0x1f8054U
 #define VR_MII_GEN5_12G_16G_CDR_CTRL		0x1f8056U
+#define VR_MII_Gen5_12G_16G_MISC_CTRL0		0x1F8090U
 #define VR_MII_GEN5_12G_16G_VCO_CAL_LD0		0x1f8092U
 #define VR_MII_GEN5_12G_16G_REF_CLK_CTRL	0x1f8091U
 #define SR_MII_CTRL				0x1f0000U
@@ -64,12 +66,15 @@
 
 /* VR_MII_Gen5_12G_16G_TX_GENCTRL1 */
 #define TX_CLK_RDY_0				BIT(12)
+#define VBOOST_EN_0				BIT(4)
 
 /* VR_MII_Gen5_12G_16G_TX_GENCTRL2 */
 #define TX_REQ_0				BIT(0)
+#define TX0_WIDTH(x)				(((x) & 0x3) << 8)
 
 /* VR_MII_Gen5_12G_16G_RX_GENCTRL2 */
 #define RX_REQ_0				BIT(0)
+#define RX0_WIDTH(x)				(((x) & 0x3) << 8)
 
 /* VR_MII_Gen5_12G_16G_RX_POWER_STATE_CTRL */
 #define RX_DISABLE_0				BIT(8)
@@ -79,6 +84,7 @@
 
 /* VR_MII_Gen5_12G_16G_RX_CDR_CTRL */
 #define VCO_LOW_FREQ_0				BIT(8)
+#define CDR_SSC_EN_0				BIT(4)
 
 #define PCS_MODE_1000_BASE_X			0U
 #define PCS_MODE_SGMII				2U
@@ -138,6 +144,11 @@
 #define CL37_ANSGM_STS_LINK			BIT(4)
 #define CL37_ANSGM_STS_FD			BIT(1)
 
+/* VR_MII_Gen5_12G_16G_MISC_CTRL0 */
+#define PLL_CTRL				BIT(15)
+#define SUPPRESS_LOS_DET			BIT(4)
+#define RX_DT_EN_CTL				BIT(6)
+
 #define PLLA_CAL_EN		BIT(0)
 #define PLLA_CAL_DIS		BIT(1)
 
@@ -168,10 +179,11 @@ int serdes_pcs_reset_seqence(void *serdes_base, u32 xpcs0_base, u32 xpcs1_base);
 int serdes_pcs_wait_for_power_good(void *base, u32 xpcs);
 
 /* Bifurcation PMA control */
-int serdes_bifurcation_pll_transit_to_3125Mhz(void *base, u32 xpcs,
+int serdes_bifurcation_pll_transit_to_3125mhz(void *base, u32 xpcs,
 					      enum serdes_clock_fmhz fmhz);
-int serdes_bifurcation_pll_transit_to_1250Mhz(void *base, u32 xpcs,
+int serdes_bifurcation_pll_transit_to_1250mhz(void *base, u32 xpcs,
 					      enum serdes_clock_fmhz fmhz);
+void serdes_testing_stage1(void *base, u32 xpcs);
 
 /* PMA control */
 void serdes_pma_lane_disable(void *base, u32 xpcs);
@@ -198,6 +210,8 @@ void serdes_pcs_set_hd(void *base, u32 xpcs);
 void serdes_pcs_loopback_enable(void *base, u32 xpcs);
 void serdes_pcs_loopback_disable(void *base, u32 xpcs);
 
+void serdes_pcs_dump_reg(void *base, u32 xpcs);
+
 enum serdes_xpcs_mode_gen2 s32_get_xpcs_mode(int serd, int xpcs);
 int s32_sgmii_wait_link(int serdes, int xpcs);
 #endif
diff --git a/arch/arm/include/asm/arch-s32/s32-cc/sgmii.h b/arch/arm/include/asm/arch-s32/s32-cc/sgmii.h
new file mode 100644
index 0000000000..63867fb37c
--- /dev/null
+++ b/arch/arm/include/asm/arch-s32/s32-cc/sgmii.h
@@ -0,0 +1,27 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright 2022 NXP
+ *
+ * The SerDes XPCS config function definitions
+ */
+
+#ifndef SERDES_SGMII_H
+#define SERDES_SGMII_H
+
+enum serdes_mode;
+enum serdes_xpcs_mode;
+enum serdes_clock;
+enum serdes_clock_fmhz;
+enum serdes_xpcs_mode_gen2;
+
+void serdes_pma_mode5(void *base, u32 xpcs);
+void serdes_pcs_mode5(void *base, u32 xpcs);
+
+int s32_eth_xpcs_init(void __iomem *serdes_base, int id,
+		      enum serdes_mode ss_mode,
+		      enum serdes_xpcs_mode xpcs_mode,
+		      enum serdes_clock clktype,
+		      enum serdes_clock_fmhz fmhz,
+		      enum serdes_xpcs_mode_gen2 xpcs[2]);
+
+#endif  /* SERDES_SGMII_H */
diff --git a/arch/arm/mach-s32/s32-cc/Makefile b/arch/arm/mach-s32/s32-cc/Makefile
index c61a4cda78..586c3c830b 100644
--- a/arch/arm/mach-s32/s32-cc/Makefile
+++ b/arch/arm/mach-s32/s32-cc/Makefile
@@ -20,6 +20,7 @@ ccflags-y			+= -Iboard/nxp/s32-cc
 
 obj-$(CONFIG_HSE_SECBOOT)	+= hse_adv_secboot.o
 ifdef CONFIG_NXP_S32CC
+ccflags-$(CONFIG_NETDEVICES)	+= -I./drivers/pci
 obj-$(CONFIG_NETDEVICES)	+= sgmii/sgmii.o sgmii/serdes_xpcs.o
 endif
 obj-y				+= start_m7.o
diff --git a/arch/arm/mach-s32/s32-cc/sgmii/serdes_xpcs.c b/arch/arm/mach-s32/s32-cc/sgmii/serdes_xpcs.c
index 078e5982cc..5f38412b8a 100644
--- a/arch/arm/mach-s32/s32-cc/sgmii/serdes_xpcs.c
+++ b/arch/arm/mach-s32/s32-cc/sgmii/serdes_xpcs.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * Copyright 2019-2021 NXP
+ * Copyright 2019-2022 NXP
  *
  * The SerDes module source file.
  */
@@ -8,15 +8,19 @@
 #include <serdes_regs.h>
 #include <serdes_xpcs_regs.h>
 #include <stdio.h>
+#include <asm/io.h>
 #include <linux/delay.h>
-#include <linux/printk.h>
 #include <linux/ethtool.h>
-#include <asm/io.h>
+#include <linux/printk.h>
 
+#include <serdes_s32gen1_io.h>
+#include <sgmii.h>
+
+#define VPTR(a)		((void *)(uintptr_t)(a))
 #define XPCS_BASE(xpcs) (((xpcs) == 0)  ? (SERDES_XPCS_0_ADDR2) : \
 					  (SERDES_XPCS_1_ADDR2))
 
-u16 serdes_xpcs_read_gen2(void *base, u32 xpcs, u32 reg)
+static u16 serdes_xpcs_read_gen2(void *base, u32 xpcs, u32 reg)
 {
 	u32 ofsleft = (reg >> 8) & 0xffffU;
 	u32 ofsright = (reg & 0xffU);
@@ -26,7 +30,7 @@ u16 serdes_xpcs_read_gen2(void *base, u32 xpcs, u32 reg)
 	return readl(base + pcs_off + 4 * ofsright) & 0xffffU;
 }
 
-void serdes_xpcs_write_gen2(void *base, u32 xpcs, u32 reg, u16 val)
+static void serdes_xpcs_write_gen2(void *base, u32 xpcs, u32 reg, u16 val)
 {
 	u32 ofsleft = (reg >> 8) & 0xffffU;
 	u32 ofsright = (reg & 0xffU);
@@ -36,8 +40,8 @@ void serdes_xpcs_write_gen2(void *base, u32 xpcs, u32 reg, u16 val)
 	writel(val, base + pcs_off + 4 * ofsright);
 }
 
-void serdes_xpcs_clr_setb_gen2(void *base, u32 xpcs, u32 reg,
-			       u16 clr_mask, u16 mask)
+static void serdes_xpcs_clr_setb_gen2(void *base, u32 xpcs, u32 reg,
+				      u16 clr_mask, u16 mask)
 {
 	u16 tmp_rd =  0;
 
@@ -59,13 +63,13 @@ void serdes_xpcs_clr_setb_gen2(void *base, u32 xpcs, u32 reg,
 })
 
 #define PCSBCLR(serdes_base, pcs, reg, mask) \
-	serdes_xpcs_clr_setb_gen2(serdes_base, pcs, reg, mask, 0)
+	serdes_xpcs_clr_setb_gen2(VPTR(serdes_base), pcs, reg, mask, 0)
 
 #define PCSBSET(serdes_base, pcs, reg, mask) \
-	serdes_xpcs_clr_setb_gen2(serdes_base, pcs, reg, 0, mask)
+	serdes_xpcs_clr_setb_gen2(VPTR(serdes_base), pcs, reg, 0, mask)
 
 #define PCSBCLRSET(serdes_base, pcs, reg, clr_mask, mask) \
-	serdes_xpcs_clr_setb_gen2(serdes_base, pcs, reg, clr_mask, mask)
+	serdes_xpcs_clr_setb_gen2(VPTR(serdes_base), pcs, reg, clr_mask, mask)
 
 static int serdes_pcs_wait_bits(void *base, u32 xpcs, u32 reg, u16 mask,
 				u16 val, u16 us, u16 cnt)
@@ -81,6 +85,13 @@ static int serdes_pcs_wait_bits(void *base, u32 xpcs, u32 reg, u16 mask,
 	return ((tmp > 0)) ? (0) : (-ETIMEDOUT);
 }
 
+static void serdes_pma_high_freq_recovery(void *base, u32 xpcs)
+{
+	/* PCS signal protection, PLL railout recovery */
+	PCSBSET(base, xpcs, VR_MII_DBG_CTRL, SUPPRESS_LOS_DET | RX_DT_EN_CTL);
+	PCSBSET(base, xpcs, VR_MII_Gen5_12G_16G_MISC_CTRL0, PLL_CTRL);
+}
+
 void serdes_pcs_loopback_enable(void *base, u32 xpcs)
 {
 	PCSBSET(base, xpcs, VR_MII_DIG_CTRL1, R2TLBE);
@@ -283,6 +294,11 @@ void serdes_pma_loopback_disable(void *base, u32 xpcs)
 	PCSBCLR(base, xpcs, SR_MII_CTRL, LBE);
 }
 
+static void serdes_pma_configure_tx_eq_post(void *base, u32 xpcs)
+{
+	PCSBSET(base, xpcs, VR_MII_GEN5_12G_16G_TX_EQ_CTRL1, 1u << 6U);
+}
+
 static void serdes_pma_configure_tx_ctr(void *base, u32 xpcs)
 {
 	PCSBCLRSET(base, xpcs, VR_MII_GEN5_12G_16G_TX_EQ_CTRL0,
@@ -463,7 +479,7 @@ static void serdes_pma_mpllb_stop_cal(void *base, u32 xpcs)
 	PCSBSET(base, xpcs, VR_MII_GEN5_12G_16G_MPLLB_CTRL0, MPPLB_CAL_DISABLE);
 }
 
-void serdes_pma_select_plla_ref(void *base, u32 xpcs)
+static void serdes_pma_select_plla_ref(void *base, u32 xpcs)
 {
 	/* Select PLLA */
 	PCSBCLR(base, xpcs, VR_MII_GEN5_12G_16G_MPLL_CMN_CTRL, MPLLB_SEL_0);
@@ -471,7 +487,7 @@ void serdes_pma_select_plla_ref(void *base, u32 xpcs)
 	PCSBSET(base, xpcs, VR_MII_GEN5_12G_16G_MPLL_CMN_CTRL, MPLL_EN_0);
 }
 
-void serdes_pma_select_pllb_ref(void *base, u32 xpcs)
+static void serdes_pma_select_pllb_ref(void *base, u32 xpcs)
 {
 	/* Select PLLB */
 	PCSBSET(base, xpcs, VR_MII_GEN5_12G_16G_MPLL_CMN_CTRL, MPLLB_SEL_0);
@@ -479,7 +495,7 @@ void serdes_pma_select_pllb_ref(void *base, u32 xpcs)
 	PCSBSET(base, xpcs, VR_MII_GEN5_12G_16G_MPLL_CMN_CTRL, MPLL_EN_0);
 }
 
-int serdes_bifurcation_pll_transit(void *base, u32 xpcs, bool plla)
+static int serdes_bifurcation_pll_transit(void *base, u32 xpcs, bool plla)
 {
 	int ret = 0;
 
@@ -531,7 +547,7 @@ int serdes_bifurcation_pll_transit(void *base, u32 xpcs, bool plla)
 }
 
 /* Transit to PLLB */
-int serdes_bifurcation_pll_transit_to_3125Mhz(void *base, u32 xpcs,
+int serdes_bifurcation_pll_transit_to_3125mhz(void *base, u32 xpcs,
 					      enum serdes_clock_fmhz fmhz)
 {
 	/* Switch PCS logic to 2.5G */
@@ -545,7 +561,7 @@ int serdes_bifurcation_pll_transit_to_3125Mhz(void *base, u32 xpcs,
 }
 
 /* Transit to PLLA */
-int serdes_bifurcation_pll_transit_to_1250Mhz(void *base, u32 xpcs,
+int serdes_bifurcation_pll_transit_to_1250mhz(void *base, u32 xpcs,
 					      enum serdes_clock_fmhz fmhz)
 {
 	/* Switch PCS logic to 1G */
@@ -558,6 +574,54 @@ int serdes_bifurcation_pll_transit_to_1250Mhz(void *base, u32 xpcs,
 	return serdes_bifurcation_pll_transit(base, xpcs, true);
 }
 
+void serdes_pma_mode5(void *base, u32 xpcs)
+{
+	if (serdes_pcs_wait_for_power_good(base, xpcs))
+		pr_err("XPCS%d power-up failed\n", xpcs);
+	/* Configure equlaization */
+	serdes_pma_configure_tx_eq_post(base, xpcs);
+	/* Configure transmit eq and termination */
+	serdes_pma_configure_tx_ctr(base, xpcs);
+	/* Reconfigure PCS to 2.5Gbps */
+	serdes_pcs_set_2500M_mode(base, xpcs);
+	/* Enable receiver recover */
+	serdes_pma_high_freq_recovery(base, xpcs);
+}
+
+void serdes_pcs_mode5(void *base, u32 xpcs)
+{
+	/* Enable volatge boost */
+	PCSBSET(base, xpcs, VR_MII_GEN5_12G_16G_TX_GENCTRL1, VBOOST_EN_0);
+
+	/* TX rate baud  */
+	PCSBCLRSET(base, xpcs, VR_MII_GEN5_12G_16G_TX_RATE_CTRL,
+		   0x7,
+		   0x0U);
+
+	/* Rx rate baud/2 */
+	PCSBCLRSET(base, xpcs, VR_MII_GEN5_12G_16G_RX_RATE_CTRL,
+		   0x3U,
+		   0x1U);
+
+	/* Set low-frequency operating band */
+	PCSBCLRSET(base, xpcs, VR_MII_GEN5_12G_16G_CDR_CTRL,
+		   CDR_SSC_EN_0, VCO_LOW_FREQ_0);
+
+	/* Reconfigure PHY */
+	serdes_bifurcation_pll_transit(base, xpcs, false);
+
+	/* Now do cold reset */
+	/* Issue PCIe cold reset to restart PHY and
+	 * commit new parameters to PHY
+	 */
+	BSET32(UPTR(base) + SS_RST_CTRL, COLD_RST);
+	udelay(1000U);
+	BCLR32(UPTR(base) + SS_RST_CTRL, COLD_RST);
+
+	/* Wait for vendor specific reset */
+	serdes_pcs_wait_for_vreset(base, xpcs);
+}
+
 void serdes_pcs_pma_init_gen2(void *base, enum serdes_clock_fmhz fmhz,
 			      u32 init_flags)
 {
diff --git a/arch/arm/mach-s32/s32-cc/sgmii/sgmii.c b/arch/arm/mach-s32/s32-cc/sgmii/sgmii.c
index 3ffd283bf1..91f6d4945b 100644
--- a/arch/arm/mach-s32/s32-cc/sgmii/sgmii.c
+++ b/arch/arm/mach-s32/s32-cc/sgmii/sgmii.c
@@ -4,19 +4,19 @@
  *
  * The SerDes config code
  */
+
 #include <common.h>
+#include <dm.h>
+#include <log.h>
 #include <stdio.h>
 #include <linux/delay.h>
 #include <linux/errno.h>
 #include <linux/ethtool.h>
-#include <asm/io.h>
-#include <stdlib.h>
 #include <linux/printk.h>
-#include <log.h>
-#include <dm.h>
 
 #include <serdes_regs.h>
 #include <serdes_xpcs_regs.h>
+#include <sgmii.h>
 
 #define S32G_SERDES_0_BASE			0x40400000U
 #define S32G_SERDES_1_BASE			0x44100000U
@@ -24,6 +24,8 @@
 #define S32G_SERDES_COUNT			2
 #define S32G_SERDES_XPCS_COUNT			2
 
+#define VPTR(a)		((void *)(uintptr_t)(a))
+
 /*
  *
  * Only limited number of configurations were tested (Only on SerDes1).
@@ -77,7 +79,7 @@ int s32_sgmii_wait_link(int serdes_id, int xpcs)
 
 
 	debug("Waiting for link (SerDes%d XPCS%i)...\n", serdes_id, xpcs);
-	ret = serdes_pma_wait_link(serdes->base, xpcs, 1U);
+	ret = serdes_pma_wait_link(VPTR(serdes->base), xpcs, 1U);
 
 	if (ret)
 		printf("SerDes%d XPCS%i link timed-out\n", serdes_id, xpcs);
@@ -134,18 +136,18 @@ static void s32_serdes_issue_reset(struct s32_xpcs_cfg *serdes)
 {
 	switch (serdes->ss_mode) {
 	case SERDES_MODE_PCIE_SGMII0:
-		serdes_pcs_issue_vreset(serdes->base, 0);
+		serdes_pcs_issue_vreset(VPTR(serdes->base), 0);
 		break;
 	case SERDES_MODE_PCIE_SGMII1:
-		serdes_pcs_issue_vreset(serdes->base, 1);
+		serdes_pcs_issue_vreset(VPTR(serdes->base), 1);
 		break;
 	case SERDES_MODE_SGMII_SGMII:
-		serdes_pcs_issue_vreset(serdes->base, 1);
-		serdes_pcs_issue_vreset(serdes->base, 0);
+		serdes_pcs_issue_vreset(VPTR(serdes->base), 1);
+		serdes_pcs_issue_vreset(VPTR(serdes->base), 0);
 		break;
 	case SERDES_MODE_SGMII_SGMII_ALT:
-		serdes_pcs_issue_vreset(serdes->base, 0);
-		serdes_pcs_issue_vreset(serdes->base, 1);
+		serdes_pcs_issue_vreset(VPTR(serdes->base), 0);
+		serdes_pcs_issue_vreset(VPTR(serdes->base), 1);
 		break;
 	default:
 		break;
@@ -182,29 +184,30 @@ static void s32_serdes_init_flags(struct s32_xpcs_cfg *serdes,
 
 static void s32_serdes_post_init(struct s32_xpcs_cfg *serdes, u32 xpcs)
 {
-	if (serdes_pcs_wait_for_vreset(serdes->base, xpcs))
+	if (serdes_pcs_wait_for_vreset(VPTR(serdes->base), xpcs))
 		pr_err("XPCS%d pre power-up soft reset failed\n", xpcs);
 
-	if (serdes_pcs_wait_for_power_good(serdes->base, xpcs))
+	if (serdes_pcs_wait_for_power_good(VPTR(serdes->base), xpcs))
 		pr_err("XPCS%d power-up failed\n", xpcs);
 
-	serdes_pma_issue_rx_reset(serdes->base, xpcs);
+	serdes_pma_issue_rx_reset(VPTR(serdes->base), xpcs);
 
 	/* Disable automatic MII width change */
-	serdes_pcs_mii_bus_control_disable(serdes->base, xpcs);
+	serdes_pcs_mii_bus_control_disable(VPTR(serdes->base), xpcs);
 	/* Disable AN */
-	serdes_pcs_an_disable(serdes->base, xpcs);
+	serdes_pcs_an_disable(VPTR(serdes->base), xpcs);
 	/* Full duplex */
-	serdes_pcs_set_fd(serdes->base, xpcs);
+	serdes_pcs_set_fd(VPTR(serdes->base), xpcs);
 	/* Speed select */
-	serdes_pcs_speed_select(serdes->base, xpcs, 1);
+	serdes_pcs_speed_select(VPTR(serdes->base), xpcs, 1);
 }
 
 int s32_eth_xpcs_init(void __iomem *serdes_base, int platform_serdes_id,
 		      enum serdes_mode ss_mode,
 		      enum serdes_xpcs_mode xpcs_mode,
 		      enum serdes_clock clktype,
-		      enum serdes_clock_fmhz fmhz)
+		      enum serdes_clock_fmhz fmhz,
+		      enum serdes_xpcs_mode_gen2 xpcs[2])
 {
 	struct s32_xpcs_cfg *serdes = s32_get_serdes_priv(platform_serdes_id);
 	int ret = 0;
@@ -223,9 +226,19 @@ int s32_eth_xpcs_init(void __iomem *serdes_base, int platform_serdes_id,
 	serdes->fmhz = fmhz;
 
 	if (serdes->ss_mode == SERDES_MODE_PCIE_SGMII0 ||
-	    serdes->ss_mode == SERDES_MODE_PCIE_SGMII1)
+	    serdes->ss_mode == SERDES_MODE_PCIE_SGMII1) {
 		shared = true;
 
+		/* Mode 5 demo */
+		if (xpcs[0] == SGMII_XPCS_PCIE &&
+		    xpcs[1] == SGMII_XPCS_2G5_OP) {
+			serdes->mode[0] = xpcs[0];
+			serdes->mode[1] = xpcs[1];
+			init_flags = XPCS1_OWNED;
+			goto mode5;
+		}
+	}
+
 	/* Note: this is temporary until upper layers are reworked */
 	switch (xpcs_mode) {
 	case SGMII_XPCS0_2G5:
@@ -258,7 +271,8 @@ int s32_eth_xpcs_init(void __iomem *serdes_base, int platform_serdes_id,
 	if (serdes->mode[0] != SGMII_XPCS_PCIE) {
 		/* Bypass power up in case of pcie combo or internal clock*/
 		if (serdes->clktype != CLK_INT && shared != true) {
-			ret = serdes_pcs_wait_for_power_good(serdes->base, 0);
+			ret = serdes_pcs_wait_for_power_good(VPTR(serdes->base),
+							     0);
 			if (!ret)
 				pr_info("XPCS0 power-up good success\n");
 			else
@@ -272,7 +286,8 @@ int s32_eth_xpcs_init(void __iomem *serdes_base, int platform_serdes_id,
 	if (serdes->mode[1] != SGMII_XPCS_PCIE) {
 		/* Bypass power up in case of pcie combo or internal clock*/
 		if (serdes->clktype != CLK_INT && shared != true) {
-			ret = serdes_pcs_wait_for_power_good(serdes->base, 1);
+			ret = serdes_pcs_wait_for_power_good(VPTR(serdes->base),
+							     1);
 			if (!ret)
 				pr_info("XPCS1 power-up good success\n");
 			else
@@ -290,7 +305,7 @@ int s32_eth_xpcs_init(void __iomem *serdes_base, int platform_serdes_id,
 	if (serdes->clktype == CLK_INT)
 		init_flags |= PHY_CLK_INT;
 
-	serdes_pcs_pma_init_gen2(serdes->base, fmhz,  init_flags);
+	serdes_pcs_pma_init_gen2(VPTR(serdes->base), fmhz,  init_flags);
 
 	/* Issue ss mode dependent reset */
 	s32_serdes_issue_reset(serdes);
@@ -299,11 +314,10 @@ int s32_eth_xpcs_init(void __iomem *serdes_base, int platform_serdes_id,
 	if (((init_flags & (XPCS0_OWNED)) != 0))
 		s32_serdes_post_init(serdes, 0);
 
+mode5:
 	if (((init_flags & (XPCS1_OWNED)) != 0))
 		s32_serdes_post_init(serdes, 1);
 
-	debug("SerDes Init Done.\n");
-
 	serdes->xpcs_mode = xpcs_mode;
 	serdes->is_init = true;
 
@@ -369,26 +383,28 @@ static int do_xpcs_cmd(cmd_tbl_t *cmdtp, int flag,
 
 	switch (cmd) {
 	case S32_XPCS_TRANSIT_TO_1000M:
-		serdes_bifurcation_pll_transit_to_1250Mhz(serdes->base,
+		serdes_bifurcation_pll_transit_to_1250mhz(VPTR(serdes->base),
 							  pcs_id, serdes->fmhz);
 		if (cmd_ss != 0)
-			serdes_pcs_speed_select(serdes->base, pcs_id, cmd_ss);
+			serdes_pcs_speed_select(VPTR(serdes->base),
+						pcs_id, cmd_ss);
 		break;
 	case S32_XPCS_TRANSIT_TO_2500M:
-		serdes_bifurcation_pll_transit_to_3125Mhz(serdes->base,
+		serdes_bifurcation_pll_transit_to_3125mhz(VPTR(serdes->base),
 							  pcs_id, serdes->fmhz);
-		serdes_pcs_speed_select(serdes->base, pcs_id, 1);
+		serdes_pcs_speed_select(VPTR(serdes->base), pcs_id, 1);
 		break;
 	case S32_XPCS_AN_AUTO_SW_ENABLE:
-		serdes_pcs_an_auto_sw_enable(serdes->base, pcs_id);
+		serdes_pcs_an_auto_sw_enable(VPTR(serdes->base), pcs_id);
 		/*fall through*/
 	case S32_XPCS_AN_ENABLE:
-		serdes_pcs_an_set_link_timer(serdes->base, pcs_id, 0x2faf);
-		serdes_pcs_an_enable(serdes->base, pcs_id);
+		serdes_pcs_an_set_link_timer(VPTR(serdes->base), pcs_id,
+					     0x2faf);
+		serdes_pcs_an_enable(VPTR(serdes->base), pcs_id);
 		break;
 	case S32_XPCS_AN_DISABLE:
-		serdes_pcs_an_auto_sw_disable(serdes->base, pcs_id);
-		serdes_pcs_an_disable(serdes->base, pcs_id);
+		serdes_pcs_an_auto_sw_disable(VPTR(serdes->base), pcs_id);
+		serdes_pcs_an_disable(VPTR(serdes->base), pcs_id);
 		break;
 	default:
 		return CMD_RET_USAGE;
diff --git a/drivers/pci/pcie_s32gen1.h b/drivers/pci/pcie_s32gen1.h
index c989b394ea..eb8cfd4dda 100644
--- a/drivers/pci/pcie_s32gen1.h
+++ b/drivers/pci/pcie_s32gen1.h
@@ -127,12 +127,6 @@
 #define CLKEN_MASK	0x1
 #define CLKEN_OFF	23
 
-/* RESET CONTROL Register (RST_CTRL) */
-
-#define RST_CTRL		0x3010
-#define WARM_RST		0x2
-#define COLD_RST		0x1
-
 enum pcie_link_speed {
 	GEN1 = 0x1,
 	GEN2 = 0x2,
diff --git a/drivers/pci/serdes_s32gen1.c b/drivers/pci/serdes_s32gen1.c
index 7eb0ede34e..eb7cfb36f1 100644
--- a/drivers/pci/serdes_s32gen1.c
+++ b/drivers/pci/serdes_s32gen1.c
@@ -17,7 +17,10 @@
 #include <dm/device_compat.h>
 #include <linux/sizes.h>
 
+#include "serdes_regs.h"
 #include "serdes_s32gen1.h"
+#include "serdes_xpcs_regs.h"
+#include "sgmii.h"
 
 #define PCIE_DEFAULT_INTERNAL_CLK	CLK_INT
 #define PCIE_DEFAULT_INTERNAL_CLK_FMHZ	CLK_100MHZ
@@ -313,6 +316,84 @@ static void s32_serdes_phy_init(struct s32_serdes *pcie)
 				 0x13, 0xff);
 }
 
+static void s32_serdes_xpcs1_pma_config(struct s32_serdes *pcie)
+{
+	/* Configure TX_VBOOST_LVL and TX_TERM_CTRL */
+	RMW32(UPTR(pcie->dbi) + SS_PHY_EXT_MISC_CTRL_2,
+	      EXT_TX_VBOOST_LVL(0x3) | EXT_TX_TERM_CTRL(0x4),
+	      EXT_TX_VBOOST_LVL(0x7) | EXT_TX_TERM_CTRL(0x7));
+	/* Enable phy external control */
+	BSET32(UPTR(pcie->dbi) + SS_PHY_EXT_CTRL_SEL, EXT_PHY_CTRL_SEL);
+	/* Configure ref range, disable PLLB/ref div2 */
+	RMW32(UPTR(pcie->dbi) + SS_PHY_REF_CLK_CTRL,
+	      EXT_REF_RANGE(0x3),
+	      REF_CLK_DIV2_EN | REF_CLK_MPLLB_DIV2_EN | EXT_REF_RANGE(0x7));
+	/* Configure multiplier */
+	RMW32(UPTR(pcie->dbi) + SS_PHY_EXT_MPLLB_CTRL_2,
+	      MPLLB_MULTIPLIER(0x27U) | EXT_MPLLB_FRACN_CTRL(0x414),
+	      MPLLB_MULTIPLIER(0xffU) | EXT_MPLLB_FRACN_CTRL(0x7ff) |
+	      1 << 24U | 1 << 28U);
+
+	BCLR32(UPTR(pcie->dbi) + SS_PHY_MPLLB_CTRL, 1 << 1);
+
+	/* Configure tx lane division, disable word clock div2*/
+	RMW32(UPTR(pcie->dbi) + SS_PHY_EXT_MPLLB_CTRL_3,
+	      EXT_MPLLB_TX_CLK_DIV(0x5),
+	      EXT_MPLLB_WORD_DIV2_EN | EXT_MPLLB_TX_CLK_DIV(0x7));
+
+	/* Configure configure bandwidth for filtering and div10*/
+	RMW32(UPTR(pcie->dbi) + SS_PHY_EXT_MPLLB_CTRL_1,
+	      EXT_MPLLB_BANDWIDTH(0x5f) | EXT_MPLLB_DIV10_CLK_EN,
+	      EXT_MPLLB_BANDWIDTH(0xffff) | EXT_MPLLB_DIV_CLK_EN |
+	      EXT_MPLLB_DIV8_CLK_EN | EXT_MPLLB_DIV_MULTIPLIER(0xff));
+
+	RMW32(UPTR(pcie->dbi) + SS_PHY_EXT_MPLLA_CTRL_1,
+	      EXT_MPLLA_BANDWIDTH(0xc5), EXT_MPLLA_BANDWIDTH(0xffff));
+
+	/* Configure VCO */
+	RMW32(UPTR(pcie->dbi) + SS_PHY_XPCS1_RX_OVRD_CTRL,
+	      XPCS1_RX_VCO_LD_VAL(0x540U) | XPCS1_RX_REF_LD_VAL(0x2bU),
+	      XPCS1_RX_VCO_LD_VAL(0x1fffU) | XPCS1_RX_REF_LD_VAL(0x3fU));
+
+	/* Boundary scan control */
+	RMW32(UPTR(pcie->dbi) + SS_PHY_EXT_BS_CTRL,
+	      EXT_BS_RX_LEVEL(0xb) | EXT_BS_RX_BIGSWING,
+	      EXT_BS_RX_LEVEL(0x1f) | EXT_BS_TX_LOWSWING);
+
+	/* Rx loss threshold */
+	RMW32(UPTR(pcie->dbi) + SS_PHY_EXT_MISC_CTRL_1,
+	      EXT_RX_LOS_THRESHOLD(0x3U) | EXT_RX_VREF_CTRL(0x11U),
+	      EXT_RX_LOS_THRESHOLD(0x3fU) | EXT_RX_VREF_CTRL(0x1fU));
+}
+
+static void s32_serdes_start_mode5(struct s32_serdes *pcie,
+				   enum serdes_xpcs_mode_gen2 xpcs[2])
+{
+	char pcie_name[10];
+
+	sprintf(pcie_name, "pcie%d", pcie->id);
+	if (!hwconfig_subarg_cmp(pcie_name, "demo", "mode5"))
+		return;
+
+	if (!(hwconfig_subarg_cmp(pcie_name, "clock", "ext") &&
+	      hwconfig_subarg_cmp(pcie_name, "fmhz", "100") &&
+	      hwconfig_subarg_cmp(pcie_name, "xpcs_mode", "1"))) {
+		pr_err("serdes: invalid mode5 demo configuration\n");
+		return;
+	}
+
+	printf("Enabling serdes mode5\n");
+	/* Initialize PMA */
+	serdes_pma_mode5((void *)UPTR(pcie->dbi), 1);
+	/* Initialize PHY */
+	s32_serdes_xpcs1_pma_config(pcie);
+	/* Initialize PCS */
+	serdes_pcs_mode5((void *)UPTR(pcie->dbi), 1);
+	/* mode5 representation */
+	xpcs[0] = SGMII_XPCS_PCIE;
+	xpcs[1] = SGMII_XPCS_2G5_OP;
+}
+
 static bool s32_serdes_init(struct s32_serdes *pcie)
 {
 	/* Fall back to mode compatible with PCIe */
@@ -420,7 +501,8 @@ __weak int s32_eth_xpcs_init(void __iomem *dbi, int id,
 			     enum serdes_mode ss_mode,
 			     enum serdes_xpcs_mode xpcs_mode,
 			     enum serdes_clock clktype,
-			     enum serdes_clock_fmhz fmhz)
+			     enum serdes_clock_fmhz fmhz,
+			     enum serdes_xpcs_mode_gen2 xpcs[2])
 {
 	/* Configure SereDes XPCS for PFE/GMAC*/
 	printf("PCIe%d disabled\n", id);
@@ -789,11 +871,17 @@ static int s32_serdes_probe(struct udevice *dev)
 
 	if (IS_SERDES_SGMII(pcie->devtype) &&
 	    pcie->xpcs_mode != SGMII_INAVALID) {
+		enum serdes_xpcs_mode_gen2 xpcs[2] = {SGMII_XPCS_PCIE};
+
+		/* Check, if mode5 demo is requested */
+		s32_serdes_start_mode5(pcie, xpcs);
+
 		ret = s32_eth_xpcs_init(pcie->dbi, pcie->id,
 					pcie->ss_mode,
 					pcie->xpcs_mode,
 					pcie->clktype,
-					pcie->fmhz);
+					pcie->fmhz,
+					xpcs);
 		if (ret) {
 			printf("Error during configuration of SGMII on");
 			printf(" PCIe%d\n", pcie->id);
diff --git a/drivers/pci/serdes_s32gen1.h b/drivers/pci/serdes_s32gen1.h
index 11e1c14557..d7b49268fc 100644
--- a/drivers/pci/serdes_s32gen1.h
+++ b/drivers/pci/serdes_s32gen1.h
@@ -13,6 +13,7 @@
 
 #include "serdes_regs.h"
 #include "serdes_s32gen1_io.h"
+#include "sgmii.h"
 #include "ss_pcie_regs.h"
 
 #define PCIE_LINK_UP_COUNT 100
@@ -39,10 +40,6 @@
 #define CLKEN_MASK	0x1
 #define CLKEN_OFF	23
 
-#define RST_CTRL		0x3010
-#define WARM_RST		0x2
-#define COLD_RST		0x1
-
 /* RGM peripheral reset registers */
 #define RGM_PRST(MC_RGM, per)		(UPTR(MC_RGM) + 0x40 + \
 					((per) * 0x8))
@@ -94,10 +91,4 @@ bool s32_pcie_init(void __iomem *dbi, int id, bool rc_mode,
 void show_pcie_devices(void);
 int initr_pci(void);
 
-int s32_eth_xpcs_init(void __iomem *serdes_base, int id,
-		      enum serdes_mode ss_mode,
-		      enum serdes_xpcs_mode xpcs_mode,
-		      enum serdes_clock clktype,
-		      enum serdes_clock_fmhz fmhz);
-
 #endif /* PCIE_S32GEN1_H */
diff --git a/drivers/pci/serdes_s32gen1_io.h b/drivers/pci/serdes_s32gen1_io.h
index 35d907dd94..886d209b4e 100644
--- a/drivers/pci/serdes_s32gen1_io.h
+++ b/drivers/pci/serdes_s32gen1_io.h
@@ -50,6 +50,7 @@ do { \
 	debug_wr("done\n"); \
 } while (0)
 
+/* BCLR32 - SPARSE compliant version of `clrbits_le32`, with debug support. */
 #define BCLR32(address, mask_clear) \
 do { \
 	uintptr_t bclr_address = (address); \
@@ -61,6 +62,7 @@ do { \
 	debug_wr("done\n"); \
 } while (0)
 
+/* BSET32 - SPARSE compliant version of `setbits_le32`, with debug support. */
 #define BSET32(address, mask_set) \
 do { \
 	uintptr_t bset_address = (address); \
@@ -72,6 +74,9 @@ do { \
 	debug_wr("done\n"); \
 } while (0)
 
+/* RMW32 - SPARSE compliant version of `clrsetbits_le32`, with debug support.
+ * Please pay attention to the arguments order.
+ */
 #define RMW32(address, mask_set, mask_clear) \
 do { \
 	uintptr_t rmw_address = (address); \
-- 
2.17.1

