From 787a72cbdec9cccc941d94aaf112a52d08ad11f5 Mon Sep 17 00:00:00 2001
From: "Radu Pirea (NXP OSS)" <radu-nicolae.pirea@oss.nxp.com>
Date: Thu, 19 May 2022 15:22:12 +0300
Subject: [PATCH 07/30] s32cc: add ERR051257 erratum workaround

Configure pin PF14 as GPIO to prevent the QSPI_INTA_b signal
from transitioning low.

Issue: ALB-8824

Upstream-Status: Pending 

Signed-off-by: Radu Pirea (NXP OSS) <radu-nicolae.pirea@oss.nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/mach-s32/s32-cc/Kconfig   | 11 ++++++++
 arch/arm/mach-s32/s32-cc/s32cc.cfg | 21 +++++++++++++++
 tools/s32ccimage.c                 | 41 +++++++++++++++++++++++++++---
 3 files changed, 70 insertions(+), 3 deletions(-)

diff --git a/arch/arm/mach-s32/s32-cc/Kconfig b/arch/arm/mach-s32/s32-cc/Kconfig
index d325d2bf4a..3c39c555f2 100644
--- a/arch/arm/mach-s32/s32-cc/Kconfig
+++ b/arch/arm/mach-s32/s32-cc/Kconfig
@@ -115,6 +115,17 @@ config XEN_SUPPORT
 	  to directly load the Xen Image which will use a given Kernel Image as
 	  Dom0.
 
+config ERR051257_WORKAROUND
+	bool "ERR051257 erratum workaround"
+	default y if QSPI_BOOT
+	help
+	  Enable workaround for ERR051257 erratum.
+	  The QSPI boot flow will hang if the QSPI memory will rise any ECC
+	  error interrupt. As a software solution for this issue, the pins
+	  QSPI_INTA_b and QSPI_INTB_b are configured as GPIO from DCD and the
+	  images(QSPI parameters for BootROM, DCD, HSE FW, etc) have an unused
+	  space of 1K between them.
+
 if TARGET_TYPE_S32GEN1_EMULATOR
 config BAUDRATE
 	default 7812500
diff --git a/arch/arm/mach-s32/s32-cc/s32cc.cfg b/arch/arm/mach-s32/s32-cc/s32cc.cfg
index 749fb18410..82cdb536c0 100644
--- a/arch/arm/mach-s32/s32-cc/s32cc.cfg
+++ b/arch/arm/mach-s32/s32-cc/s32cc.cfg
@@ -86,6 +86,20 @@ DCD WRITE 0x4 0x4009c2a4 0x21c000
 DCD WRITE 0x1 0x4009d31a 0x1
 #endif
 
+#if defined(CONFIG_ERR051257_WORKAROUND)
+/**
+ * ERR051257 workaround.
+ * Configure PD01 and PF14 pins as GPIO.
+ * The QSPI boot sequence will hang if QSPI_INTx pin transitions low during
+ * boot.
+ */
+
+DCD WRITE 0x4 0x4009cafc 0x0
+DCD WRITE 0x4 0x4009c304 0x00010000
+DCD WRITE 0x4 0x4009cad4 0x0
+DCD WRITE 0x4 0x4009c3b8 0x00010000
+#endif
+
 /**
  * Include QSPI configuration.
  *
@@ -94,3 +108,10 @@ DCD WRITE 0x1 0x4009d31a 0x1
 #if defined(CONFIG_QSPI_BOOT) && !defined(CONFIG_TARGET_TYPE_S32GEN1_EMULATOR)
 QSPI_PARAMS_FILE	PATH_QSPI_PARAMS_FILE
 #endif
+
+/**
+ * Enable workaround for ERR051257 erratum.
+ */
+#if defined(CONFIG_ERR051257_WORKAROUND)
+ERR051257_WORKAROUND
+#endif
diff --git a/tools/s32ccimage.c b/tools/s32ccimage.c
index 207baa69fc..854354cc2a 100644
--- a/tools/s32ccimage.c
+++ b/tools/s32ccimage.c
@@ -7,6 +7,7 @@
 #include <s32cc_image_params.h>
 #include <stddef.h>
 #include <unistd.h>
+#include <linux/sizes.h>
 #include <sys/stat.h>
 #include <sys/types.h>
 
@@ -105,6 +106,7 @@ struct application_boot_code {
 struct image_comp {
 	size_t offset;
 	size_t size;
+	size_t padding;
 	size_t alignment;
 	__u8 *data;
 };
@@ -142,6 +144,7 @@ struct image_config {
 		size_t fw_size;
 	} secboot;
 	bool flash_boot;
+	bool err051257;
 };
 
 struct line_parser {
@@ -234,6 +237,16 @@ static struct program_image image_layout = {
 	},
 };
 
+static inline bool apply_err051257_workaround(void)
+{
+	return iconfig.err051257 && iconfig.flash_boot;
+}
+
+static inline size_t get_padding(void)
+{
+	return apply_err051257_workaround() ? SZ_1K : 0;
+}
+
 static const uint32_t *get_dcd_data(size_t *size)
 {
 	if (iconfig.dcd.data) {
@@ -320,8 +333,8 @@ static int image_parts_comp(const void *p1, const void *p2)
 static bool is_in_overlap(struct image_comp *comp1,
 			  struct image_comp *comp2)
 {
-	size_t end1 = comp1->offset + comp1->size;
-	size_t end2 = comp2->offset + comp2->size;
+	size_t end1 = comp1->offset + comp1->size + comp1->padding;
+	size_t end2 = comp2->offset + comp2->size + comp2->padding;
 
 	if (end1 > comp2->offset && end2 > comp1->offset)
 		return true;
@@ -331,7 +344,7 @@ static bool is_in_overlap(struct image_comp *comp1,
 
 static void place_after(struct image_comp *first, struct image_comp *second)
 {
-	second->offset = first->offset + first->size;
+	second->offset = first->offset + first->size + first->padding;
 
 	/* Apply alignment constraints */
 	if (second->alignment != 0U)
@@ -393,6 +406,15 @@ static void s32_compute_dyn_offsets(struct image_comp **parts, size_t n_parts)
 	}
 }
 
+static void set_padding(struct image_comp **parts, size_t n_parts)
+{
+	int i;
+
+	for (i = 0; i < n_parts; i++)
+		if (parts[i])
+			parts[i]->padding = get_padding();
+}
+
 static struct qspi_params *get_qspi_params(struct program_image *image)
 {
 	return (struct qspi_params *)image->qspi_params.data;
@@ -615,6 +637,8 @@ static int s32g2xx_build_layout(struct program_image *program_image,
 	set_headers_size(program_image);
 	set_headers_alignment(program_image);
 
+	set_padding(parts, ARRAY_SIZE(parts));
+
 	/* Compute auto-offsets */
 	s32_compute_dyn_offsets(parts, ARRAY_SIZE(parts));
 
@@ -1118,6 +1142,13 @@ static int parse_data_file_cmd(char *line)
 	return 0;
 }
 
+static int parse_err051257(__attribute__((unused)) char *line)
+{
+	iconfig.err051257 = true;
+
+	return 0;
+}
+
 static const struct line_parser parsers[] = {
 	{
 		.tag = "BOOT_FROM",
@@ -1139,6 +1170,10 @@ static const struct line_parser parsers[] = {
 		.tag = "DATA_FILE",
 		.parse = parse_data_file_cmd,
 	},
+	{
+		.tag = "ERR051257_WORKAROUND",
+		.parse = parse_err051257,
+	},
 };
 
 static int parse_config_line(char *line)
-- 
2.17.1

