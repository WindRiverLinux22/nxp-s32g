From e82191e7cc64e5ab48a114bd8c4e639033477cc4 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Thu, 5 May 2022 12:27:39 +0300
Subject: [PATCH 20/64] s32cc: Reduce PIT rate to increase responsiveness on
 emulator

Issue: ALB-8822
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/dts/s32g274aemu.dts | 10 ++++++++++
 arch/arm/dts/s32g399aemu.dts | 10 ++++++++++
 common/autoboot.c            |  4 ----
 drivers/mmc/fsl_esdhc_imx.c  | 32 --------------------------------
 drivers/mmc/mmc.c            | 28 ----------------------------
 5 files changed, 20 insertions(+), 64 deletions(-)

diff --git a/arch/arm/dts/s32g274aemu.dts b/arch/arm/dts/s32g274aemu.dts
index b47597d5fc..b8ec67fe86 100644
--- a/arch/arm/dts/s32g274aemu.dts
+++ b/arch/arm/dts/s32g274aemu.dts
@@ -45,3 +45,13 @@
 &usdhc0 {
 	status = "okay";
 };
+
+&pit0 {
+	/delete-property/ clocks;
+	/delete-property/ clock-names;
+	/**
+	 * Artificially reduce the frequency to 1/10 of the real rate
+	 * to increase responsiveness
+	 */
+	clock-frequency = <133333>;
+};
diff --git a/arch/arm/dts/s32g399aemu.dts b/arch/arm/dts/s32g399aemu.dts
index 001548c8ba..6601ad0eb0 100644
--- a/arch/arm/dts/s32g399aemu.dts
+++ b/arch/arm/dts/s32g399aemu.dts
@@ -50,3 +50,13 @@
 	pinctrl-names = "default", "state_100mhz", "state_200mhz";
 	status = "okay";
 };
+
+&pit0 {
+	/delete-property/ clocks;
+	/delete-property/ clock-names;
+	/**
+	 * Artificially reduce the frequency to 1/10 of the real rate
+	 * to increase responsiveness
+	 */
+	clock-frequency = <133333>;
+};
diff --git a/common/autoboot.c b/common/autoboot.c
index 86ef17ec5a..4ea9be6da9 100644
--- a/common/autoboot.c
+++ b/common/autoboot.c
@@ -275,11 +275,7 @@ static int abortboot_single_key(int bootdelay)
 					menukey = key;
 				break;
 			}
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-			udelay(10);
-#else
 			udelay(10000);
-#endif
 		} while (!abort && get_timer(ts) < 1000);
 
 		printf("\b\b\b%2d ", bootdelay);
diff --git a/drivers/mmc/fsl_esdhc_imx.c b/drivers/mmc/fsl_esdhc_imx.c
index cffd725ecc..04539b8c95 100644
--- a/drivers/mmc/fsl_esdhc_imx.c
+++ b/drivers/mmc/fsl_esdhc_imx.c
@@ -456,11 +456,7 @@ static int esdhc_send_cmd_common(struct fsl_esdhc_priv *priv, struct mmc *mmc,
 	 * Note: This is way more than 8 cycles, but 1ms seems to
 	 * resolve timing issues with some cards
 	 */
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-	udelay(1);
-#else
 	udelay(1000);
-#endif
 
 	/* Set up for a data transfer if we have one */
 	if (data) {
@@ -520,11 +516,7 @@ static int esdhc_send_cmd_common(struct fsl_esdhc_priv *priv, struct mmc *mmc,
 
 		printf("Run CMD11 1.8V switch\n");
 		/* Sleep for 5 ms - max time for card to switch to 1.8V */
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-		udelay(5);
-#else
 		udelay(5000);
-#endif
 	}
 
 	/* Workaround for ESDHC errata ENGcm03648 */
@@ -662,11 +654,7 @@ static void set_sysctl(struct fsl_esdhc_priv *priv, struct mmc *mmc, uint clock)
 
 	esdhc_clrsetbits32(&regs->sysctl, SYSCTL_CLOCK_MASK, clk);
 
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-	udelay(10);
-#else
 	udelay(10000);
-#endif
 
 #ifdef CONFIG_FSL_USDHC
 	esdhc_setbits32(&regs->vendorspec, VENDORSPEC_PEREN | VENDORSPEC_CKEN);
@@ -739,11 +727,7 @@ static void esdhc_set_strobe_dll(struct mmc *mmc)
 			 ESDHC_STROBE_DLL_CTRL_SLV_DLY_TARGET_SHIFT);
 		writel(val, &regs->strobe_dllctrl);
 		/* wait 1us to make sure strobe dll status register stable */
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-		udelay(1);
-#else
 		mdelay(1);
-#endif
 		val = readl(&regs->strobe_dllstat);
 		if (!(val & ESDHC_STROBE_DLL_STS_REF_LOCK))
 			pr_warn("HS400 strobe DLL status REF not lock!\n");
@@ -818,11 +802,7 @@ static int esdhc_set_voltage(struct mmc *mmc)
 				return -EIO;
 			}
 			/* Wait for 5ms */
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-			udelay(5);
-#else
 			mdelay(5);
-#endif
 		}
 #endif
 
@@ -1007,21 +987,13 @@ static int fsl_esdhc_execute_tuning(struct udevice *dev, uint32_t opcode)
 			 * response to any command when the card still out
 			 * put the tuning data.
 			 */
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-			udelay(1);
-#else
 			mdelay(1);
-#endif
 			ret = 0;
 			break;
 		}
 
 		/* Add 1ms delay for SD and eMMC */
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-		udelay(1);
-#else
 		mdelay(1);
-#endif
 	}
 
 	writel(irqstaten, &regs->irqstaten);
@@ -1191,11 +1163,7 @@ static int esdhc_getcd_common(struct fsl_esdhc_priv *priv)
 #endif
 
 	while (!(esdhc_read32(&regs->prsstat) & PRSSTAT_CINS) && --timeout)
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-		udelay(1);
-#else
 		udelay(1000);
-#endif
 
 	return timeout > 0;
 }
diff --git a/drivers/mmc/mmc.c b/drivers/mmc/mmc.c
index af5121847e..46d8a97955 100644
--- a/drivers/mmc/mmc.c
+++ b/drivers/mmc/mmc.c
@@ -253,11 +253,7 @@ int mmc_poll_for_busy(struct mmc *mmc, int timeout_ms)
 		if (timeout_ms-- <= 0)
 			break;
 
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-		udelay(1);
-#else
 		udelay(1000);
-#endif
 	}
 
 	if (timeout_ms <= 0) {
@@ -476,11 +472,7 @@ static int mmc_go_idle(struct mmc *mmc)
 	struct mmc_cmd cmd;
 	int err;
 
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-	udelay(1);
-#else
 	udelay(1000);
-#endif
 
 	cmd.cmdidx = MMC_CMD_GO_IDLE_STATE;
 	cmd.cmdarg = 0;
@@ -491,11 +483,7 @@ static int mmc_go_idle(struct mmc *mmc)
 	if (err)
 		return err;
 
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-	udelay(2);
-#else
 	udelay(2000);
-#endif
 
 	return 0;
 }
@@ -545,11 +533,7 @@ static int mmc_switch_voltage(struct mmc *mmc, int signal_voltage)
 		return err;
 
 	/* Keep clock gated for at least 10 ms, though spec only says 5 ms */
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-	udelay(10);
-#else
 	mdelay(10);
-#endif
 	mmc_set_clock(mmc, mmc->clock, MMC_CLK_ENABLE);
 
 	/*
@@ -558,11 +542,7 @@ static int mmc_switch_voltage(struct mmc *mmc, int signal_voltage)
 	 */
 	err = mmc_wait_dat0(mmc, 1, 1000);
 	if (err == -ENOSYS)
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-		udelay(1);
-#else
 		udelay(1000);
-#endif
 	else if (err)
 		return -ETIMEDOUT;
 
@@ -616,11 +596,7 @@ static int sd_send_op_cond(struct mmc *mmc, bool uhs_en)
 		if (timeout-- <= 0)
 			return -EOPNOTSUPP;
 
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-		udelay(1);
-#else
 		udelay(1000);
-#endif
 	}
 
 	if (mmc->version != SD_VERSION_2)
@@ -2764,11 +2740,7 @@ static int mmc_power_cycle(struct mmc *mmc)
 	 * SD spec recommends at least 1ms of delay. Let's wait for 2ms
 	 * to be on the safer side.
 	 */
-#ifdef CONFIG_TARGET_TYPE_S32GEN1_EMULATOR
-	udelay(2);
-#else
 	udelay(2000);
-#endif
 	return mmc_power_on(mmc);
 }
 
-- 
2.17.1

