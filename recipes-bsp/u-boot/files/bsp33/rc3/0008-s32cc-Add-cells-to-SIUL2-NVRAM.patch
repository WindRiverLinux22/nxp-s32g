From 72c93c38315ca93ffd9357573e53ebdaf74ea15c Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Thu, 21 Apr 2022 11:13:19 +0300
Subject: [PATCH 08/64] s32cc: Add cells to SIUL2 NVRAM

Add a cell for each value / register exported by the
S32CC SIUL2 NVRAM driver. This is needed to synchronize the
device tree bindings between Linux Kernel and U-Boot.

Issue: ALB-8823
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/dts/s32-cc.dtsi                      |   5 +
 arch/arm/dts/s32g.dtsi                        |  57 +++++++++
 arch/arm/dts/s32r45.dts                       |  63 ++++++++++
 arch/arm/mach-s32/include/s32-cc/nvmem.h      |  26 ++++
 .../arm/mach-s32/include/s32-cc/siul2_nvram.h |  30 -----
 arch/arm/mach-s32/s32-cc/Makefile             |   1 +
 arch/arm/mach-s32/s32-cc/fdt.c                |  42 +++++--
 arch/arm/mach-s32/s32-cc/nvmem.c              | 118 ++++++++++++++++++
 arch/arm/mach-s32/s32-cc/start_m7.c           |  26 ++--
 drivers/cpu/s32cc_cpu.c                       | 116 ++++++++---------
 drivers/misc/s32cc_siul2_nvram.c              |   2 +-
 drivers/pci/pcie_s32gen1.c                    |  31 +++--
 12 files changed, 403 insertions(+), 114 deletions(-)
 create mode 100644 arch/arm/mach-s32/include/s32-cc/nvmem.h
 delete mode 100644 arch/arm/mach-s32/include/s32-cc/siul2_nvram.h
 create mode 100644 arch/arm/mach-s32/s32-cc/nvmem.c

diff --git a/arch/arm/dts/s32-cc.dtsi b/arch/arm/dts/s32-cc.dtsi
index 9b809cd20d..b2be7f4b51 100644
--- a/arch/arm/dts/s32-cc.dtsi
+++ b/arch/arm/dts/s32-cc.dtsi
@@ -48,6 +48,11 @@
 			device_type = "cpu";
 			compatible = "arm,cortex-a53";
 			reg = <0x0 0x0>;
+
+			nvmem-cells = <&soc_letter>, <&part_no>,
+			    <&soc_major>, <&soc_minor>, <&soc_subminor>;
+			nvmem-cell-names = "soc_letter", "part_no",
+			    "soc_major", "soc_minor", "soc_subminor";
 			u-boot,dm-pre-reloc;
 		};
 
diff --git a/arch/arm/dts/s32g.dtsi b/arch/arm/dts/s32g.dtsi
index e5d835a1f1..d3269e56ef 100644
--- a/arch/arm/dts/s32g.dtsi
+++ b/arch/arm/dts/s32g.dtsi
@@ -8,6 +8,7 @@
  * (at your option) any later version.
  */
 #include <dt-bindings/clock/s32g-scmi-clock.h>
+#include <dt-bindings/nvmem/s32cc-siul2-nvmem.h>
 #include <dt-bindings/pinctrl/s32g-pinctrl.h>
 
 #include "s32-cc.dtsi"
@@ -150,9 +151,53 @@
 		};
 
 		siul2_0_nvram: siul2_0_nvram {
+			#address-cells = <1>;
+			#size-cells = <1>;
+
 			compatible = "nxp,s32g-siul2_0-nvram";
 			status = "okay";
 			u-boot,dm-pre-reloc;
+
+			soc_letter: soc_letter@0 {
+				reg = <S32CC_SOC_LETTER S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			part_no: part_no@4 {
+				reg = <S32CC_SOC_PART_NO S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			soc_major: soc_major@8 {
+				reg = <S32CC_SOC_MAJOR S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			soc_minor: soc_minor@c {
+				reg = <S32CC_SOC_MINOR S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			core_max_freq: core_max_freq@10 {
+				reg = <S32CC_MAX_CORE_FREQ S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			max_cpus_per_cluster: max_cpus_per_cluster@14 {
+				reg = <S32CC_MAX_A53_CORES_PER_CLUSTER
+				    S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			a53_cores_mask: a53_cores_mask@18 {
+				reg = <S32CC_A53_CORES_MASK S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			pcie_dev_id: pcie_dev_id@1c {
+				reg = <S32CC_OVERWRITE_PCIE_DEV_ID
+				    S32CC_CELL_SIZE>;
+			};
 		};
 	};
 
@@ -182,8 +227,20 @@
 		};
 
 		siul2_1_nvram: siul2_1_nvram {
+			#address-cells = <1>;
+			#size-cells = <1>;
+
 			status = "okay";
 			u-boot,dm-pre-reloc;
+
+			serdes_presence: serdes_presence@100 {
+				reg = <S32CC_SERDES_PRESENCE S32CC_CELL_SIZE>;
+			};
+
+			soc_subminor: soc_subminor@108 {
+				reg = <S32CC_SOC_SUBMINOR S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
 		};
 	};
 };
diff --git a/arch/arm/dts/s32r45.dts b/arch/arm/dts/s32r45.dts
index ee59bab452..124f5fccf9 100644
--- a/arch/arm/dts/s32r45.dts
+++ b/arch/arm/dts/s32r45.dts
@@ -9,6 +9,7 @@
  */
 #include <dt-bindings/clock/s32r45-scmi-clock.h>
 #include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/nvmem/s32cc-siul2-nvmem.h>
 #include <dt-bindings/pinctrl/s32r45-pinctrl.h>
 
 /dts-v1/;
@@ -65,9 +66,54 @@
 		};
 
 		siul2_0_nvram: siul2_0_nvram {
+			#address-cells = <1>;
+			#size-cells = <1>;
+
 			compatible = "nxp,s32r-siul2_0-nvram";
 			status = "okay";
 			u-boot,dm-pre-reloc;
+
+			soc_letter: soc_letter@0 {
+				reg = <S32CC_SOC_LETTER S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			part_no: part_no@4 {
+				reg = <S32CC_SOC_PART_NO S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			soc_major: soc_major@8 {
+				reg = <S32CC_SOC_MAJOR S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			soc_minor: soc_minor@c {
+				reg = <S32CC_SOC_MINOR S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			core_max_freq: core_max_freq@10 {
+				reg = <S32CC_MAX_CORE_FREQ S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			max_cpus_per_cluster: max_cpus_per_cluster@14 {
+				reg = <S32CC_MAX_A53_CORES_PER_CLUSTER
+				    S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			a53_cores_mask: a53_cores_mask@18 {
+				reg = <S32CC_A53_CORES_MASK S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
+			pcie_dev_id: pcie_dev_id@1c {
+				reg = <S32CC_OVERWRITE_PCIE_DEV_ID
+				    S32CC_CELL_SIZE>;
+			};
+
 		};
 	};
 
@@ -96,9 +142,26 @@
 		};
 
 		siul2_1_nvram {
+			#address-cells = <1>;
+			#size-cells = <1>;
+
 			compatible = "nxp,s32r-siul2_1-nvram";
 			status = "okay";
 			u-boot,dm-pre-reloc;
+
+			serdes_presence: serdes_presence@100 {
+				reg = <S32CC_SERDES_PRESENCE S32CC_CELL_SIZE>;
+			};
+
+			lax_presence: lax_presence@104 {
+				reg = <S32CC_LAX_PRESENCE S32CC_CELL_SIZE>;
+			};
+
+			soc_subminor: soc_subminor@108 {
+				reg = <S32CC_SOC_SUBMINOR S32CC_CELL_SIZE>;
+				u-boot,dm-pre-reloc;
+			};
+
 		};
 	};
 
diff --git a/arch/arm/mach-s32/include/s32-cc/nvmem.h b/arch/arm/mach-s32/include/s32-cc/nvmem.h
new file mode 100644
index 0000000000..a368df9af8
--- /dev/null
+++ b/arch/arm/mach-s32/include/s32-cc/nvmem.h
@@ -0,0 +1,26 @@
+/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause */
+/*
+ * Copyright 2022 NXP
+ */
+#ifndef NVMEM_H
+#define NVMEM_H
+
+struct udevice;
+
+struct nvmem_cell {
+	struct udevice *dev;
+	int offset;
+	int size;
+};
+
+int nvmem_cell_get_by_offset(struct udevice *dev, int offset,
+			     struct nvmem_cell *cell);
+
+int nvmem_cell_get_by_index(struct udevice *dev, int index,
+			    struct nvmem_cell *cell);
+
+int nvmem_cell_get(struct udevice *dev, const char *name,
+		   struct nvmem_cell *cell);
+
+int nvmem_cell_read(struct nvmem_cell *cell, void *buf, size_t size);
+#endif
diff --git a/arch/arm/mach-s32/include/s32-cc/siul2_nvram.h b/arch/arm/mach-s32/include/s32-cc/siul2_nvram.h
deleted file mode 100644
index 1a1a9f43fd..0000000000
--- a/arch/arm/mach-s32/include/s32-cc/siul2_nvram.h
+++ /dev/null
@@ -1,30 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause */
-/*
- * Copyright 2022 NXP
- */
-#ifndef S32CC_SIUL2_NVRAM_H
-#define S32CC_SIUL2_NVRAM_H
-
-/* siul2_0 */
-#define S32CC_SOC_LETTER	0x0
-#define S32CC_SOC_PART_NO	0x4
-#define S32CC_SOC_MAJOR	0x8
-#define S32CC_SOC_MINOR	0xc
-#define S32CC_MAX_CORE_FREQ	0x10
-#define S32CC_MAX_A53_CORES_PER_CLUSTER	0x14
-
-/* Used for getting a mask where the state of a bit
- * on position N corresponds to Core N,
- * 0 = defeatured
- * 1 = available
- */
-#define S32CC_A53_CORES_MASK	0x18
-
-#define S32CC_OVERWRITE_PCIE_DEV_ID		0x1C
-
-/* siul2_1 */
-#define S32CC_SERDES_PRESENCE	0x100
-#define S32CC_LAX_PRESENCE	0x104
-#define S32CC_SOC_SUBMINOR	0x108
-
-#endif
diff --git a/arch/arm/mach-s32/s32-cc/Makefile b/arch/arm/mach-s32/s32-cc/Makefile
index 923aed8eb7..169504722c 100644
--- a/arch/arm/mach-s32/s32-cc/Makefile
+++ b/arch/arm/mach-s32/s32-cc/Makefile
@@ -8,6 +8,7 @@ ccflags-y += -I./board/nxp/common/
 ccflags-y += -I./board/nxp/s32-cc/include/
 ccflags-y += -I./drivers/net/s32/
 
+obj-y				+= nvmem.o
 obj-y				+= scmi_clk_dump.o
 obj-y				+= scmi_reset_agent.o
 obj-y				+= soc.o
diff --git a/arch/arm/mach-s32/s32-cc/fdt.c b/arch/arm/mach-s32/s32-cc/fdt.c
index 5f30eac44c..2f3f634681 100644
--- a/arch/arm/mach-s32/s32-cc/fdt.c
+++ b/arch/arm/mach-s32/s32-cc/fdt.c
@@ -16,7 +16,8 @@
 #include <linux/libfdt.h>
 #include <linux/sizes.h>
 #include <s32-cc/a53_gpr.h>
-#include <s32-cc/siul2_nvram.h>
+#include <s32-cc/nvmem.h>
+#include <dt-bindings/nvmem/s32cc-siul2-nvmem.h>
 #include <dt-bindings/phy/phy.h>
 
 DECLARE_GLOBAL_DATA_PTR;
@@ -53,6 +54,7 @@ static int get_cores_info(u32 *max_cores_per_cluster,
 	int ret;
 	const char *dev_name = "siul2_0_nvram";
 	struct udevice *siul2_nvmem = NULL;
+	struct nvmem_cell cell;
 
 	ret = uclass_get_device_by_name(UCLASS_MISC, dev_name,
 					&siul2_nvmem);
@@ -61,25 +63,43 @@ static int get_cores_info(u32 *max_cores_per_cluster,
 		return ret;
 	}
 
-	ret = misc_read(siul2_nvmem, S32CC_MAX_A53_CORES_PER_CLUSTER,
-			max_cores_per_cluster, sizeof(*max_cores_per_cluster));
-	if (ret != sizeof(*max_cores_per_cluster)) {
-		printf("%s: Failed to read SoC's Part Number (err = %d)\n",
+	ret = nvmem_cell_get_by_offset(siul2_nvmem,
+				       S32CC_MAX_A53_CORES_PER_CLUSTER,
+				       &cell);
+	if (ret) {
+		printf("%s: Failed to get A53 cores per cluster cell (err = %d)\n",
 		       __func__, ret);
-		return ret;
+		return -ENODEV;
 	}
+
+	ret = nvmem_cell_read(&cell, max_cores_per_cluster,
+			      sizeof(*max_cores_per_cluster));
+	if (ret) {
+		printf("%s: Failed to read A53 cores per cluster cell (err = %d)\n",
+		       __func__, ret);
+		return -EINVAL;
+	}
+
 	if (!(*max_cores_per_cluster)) {
 		printf("%s: Number of max cores per cluster cannot be 0\n",
 		       __func__);
 		return -EINVAL;
 	}
 
-	ret = misc_read(siul2_nvmem, S32CC_A53_CORES_MASK,
-			cpu_mask, sizeof(*cpu_mask));
-	if (ret != sizeof(*cpu_mask)) {
-		printf("%s: Failed to read SoC's Part Number (err = %d)\n",
+	ret = nvmem_cell_get_by_offset(siul2_nvmem,
+				       S32CC_A53_CORES_MASK,
+				       &cell);
+	if (ret) {
+		printf("%s: Failed to get A53 cores mask cell (err = %d)\n",
 		       __func__, ret);
-		return ret;
+		return -ENODEV;
+	}
+
+	ret = nvmem_cell_read(&cell, cpu_mask, sizeof(*cpu_mask));
+	if (ret) {
+		printf("%s: Failed to read A53 cores mask cell (err = %d)\n",
+		       __func__, ret);
+		return -EINVAL;
 	}
 
 	return 0;
diff --git a/arch/arm/mach-s32/s32-cc/nvmem.c b/arch/arm/mach-s32/s32-cc/nvmem.c
new file mode 100644
index 0000000000..8c0ea3d6f0
--- /dev/null
+++ b/arch/arm/mach-s32/s32-cc/nvmem.c
@@ -0,0 +1,118 @@
+// SPDX-License-Identifier: GPL-2.0+ OR BSD-3-Clause
+/*
+ * Copyright 2022 NXP
+ */
+#include <common.h>
+#include <misc.h>
+#include <dm/device.h>
+#include <dm/of_access.h>
+#include <dm/ofnode.h>
+#include <dm/read.h>
+#include <s32-cc/nvmem.h>
+
+int nvmem_cell_get_by_offset(struct udevice *dev, int offset,
+			     struct nvmem_cell *cell)
+{
+	fdt_addr_t cell_addr, cell_size;
+	ofnode node;
+	bool found = false;
+
+	if (!cell)
+		return -EINVAL;
+
+	for (node = dev_read_first_subnode(dev); ofnode_valid(node);
+	     node = dev_read_next_subnode(node)) {
+		cell_addr = ofnode_get_addr_size_index(node, 0,
+						       &cell_size);
+		if (cell_addr == FDT_ADDR_T_NONE)
+			continue;
+
+		if ((int)cell_addr == offset) {
+			found = true;
+			break;
+		}
+	}
+
+	if (!found)
+		return -EINVAL;
+
+	cell->size = (int)cell_size;
+	cell->offset = offset;
+	cell->dev = dev;
+
+	return 0;
+}
+
+int nvmem_cell_get_by_index(struct udevice *dev, int index,
+			    struct nvmem_cell *cell)
+{
+	int ret = 0;
+	struct ofnode_phandle_args args;
+	fdt_addr_t cell_addr, cell_size;
+	ofnode parent_ofnode;
+
+	debug("%s(dev=%p, index=%d, cell=%p)\n", __func__, dev, index, cell);
+
+	if (!cell)
+		return -EINVAL;
+
+	cell->dev = NULL;
+
+	ret = dev_read_phandle_with_args(dev, "nvmem-cells", NULL,
+					 0, index, &args);
+	if (ret) {
+		debug("%s: fdtdec_parse_phandle_with_args failed: err=%d\n",
+		      __func__, ret);
+		return ret;
+	}
+
+	parent_ofnode = ofnode_get_parent(args.node);
+	ret = uclass_get_device_by_ofnode(UCLASS_MISC, parent_ofnode,
+					  &cell->dev);
+	if (ret) {
+		debug("%s: uclass_get_device_by_of_offset failed: err=%d\n",
+		      __func__, ret);
+		return ret;
+	}
+
+	cell_addr = ofnode_get_addr_size_index(args.node, 0, &cell_size);
+	if (cell_addr == FDT_ADDR_T_NONE)
+		return -ENOENT;
+
+	cell->offset = (int)cell_addr;
+	cell->size = (int)cell_size;
+
+	return 0;
+}
+
+int nvmem_cell_get(struct udevice *dev, const char *name,
+		   struct nvmem_cell *cell)
+{
+	int index;
+
+	index = dev_read_stringlist_search(dev, "nvmem-cell-names", name);
+	if (index < 0) {
+		pr_err("fdt_stringlist_search() failed: %d\n", index);
+		return index;
+	}
+
+	return nvmem_cell_get_by_index(dev, index, cell);
+}
+
+int nvmem_cell_read(struct nvmem_cell *cell, void *buf, size_t size)
+{
+	int ret;
+
+	if (!cell || !buf)
+		return -EINVAL;
+
+	if (size != cell->size)
+		return -EINVAL;
+
+	ret = misc_read(cell->dev, cell->offset, buf, cell->size);
+	if (ret != cell->size)
+		return -EINVAL;
+
+	return 0;
+}
+
diff --git a/arch/arm/mach-s32/s32-cc/start_m7.c b/arch/arm/mach-s32/s32-cc/start_m7.c
index 631ccb40c7..cbbee78c14 100644
--- a/arch/arm/mach-s32/s32-cc/start_m7.c
+++ b/arch/arm/mach-s32/s32-cc/start_m7.c
@@ -8,7 +8,8 @@
 #include <misc.h>
 #include <asm/io.h>
 #include <dm/uclass.h>
-#include <s32-cc/siul2_nvram.h>
+#include <s32-cc/nvmem.h>
+#include <dt-bindings/nvmem/s32cc-siul2-nvmem.h>
 
 #define S32_SRAM_6M	(6 * SZ_1M)
 #define S32_SRAM_8M	(8 * SZ_1M)
@@ -69,20 +70,31 @@ static u32 get_sram_size(void)
 	const char *dev_name = "siul2_0_nvram";
 	struct udevice *siul20_nvmem = NULL;
 	u32 letter = 0, part_number = 0;
+	struct nvmem_cell cell;
 
 	ret = uclass_get_device_by_name(UCLASS_MISC, dev_name,
 					&siul20_nvmem);
 	if (ret)
 		goto nvmem_err;
 
-	ret = misc_read(siul20_nvmem, S32CC_SOC_LETTER, &letter,
-			sizeof(letter));
-	if (ret != sizeof(letter))
+	ret = nvmem_cell_get_by_offset(siul20_nvmem,
+				       S32CC_SOC_LETTER,
+				       &cell);
+	if (ret)
+		goto nvmem_err;
+
+	ret = nvmem_cell_read(&cell, &letter, sizeof(letter));
+	if (ret)
 		goto nvmem_err;
 
-	ret = misc_read(siul20_nvmem, S32CC_SOC_PART_NO, &part_number,
-			sizeof(part_number));
-	if (ret != sizeof(part_number))
+	ret = nvmem_cell_get_by_offset(siul20_nvmem,
+				       S32CC_SOC_PART_NO,
+				       &cell);
+	if (ret)
+		goto nvmem_err;
+
+	ret = nvmem_cell_read(&cell, &part_number, sizeof(part_number));
+	if (ret)
 		goto nvmem_err;
 
 	if ((char)letter == 'G') {
diff --git a/drivers/cpu/s32cc_cpu.c b/drivers/cpu/s32cc_cpu.c
index 68cb8fe43b..d496ce14c5 100644
--- a/drivers/cpu/s32cc_cpu.c
+++ b/drivers/cpu/s32cc_cpu.c
@@ -8,63 +8,33 @@
 #include <dm.h>
 #include <misc.h>
 #include <dm/uclass.h>
-#include <s32-cc/siul2_nvram.h>
+#include <s32-cc/nvmem.h>
 
 struct cpu_s32cc_plat {
-	struct udevice *siul20_nvmem;
-	struct udevice *siul21_nvmem;
+	u32 letter;
+	u32 part_number;
+	u32 major;
+	u32 minor;
+	u32 subminor;
+	bool has_subminor;
+};
+
+struct soc_nvmem_cell {
+	const char *name;
+	u32 *data;
 };
 
 static int cpu_s32cc_get_desc(struct udevice *dev, char *buf, int size)
 {
-	bool has_subminor = false;
-	u32 letter, part_number, major, minor, subminor;
 	struct cpu_s32cc_plat *plat = dev_get_platdata(dev);
 	int ret;
 
-	ret = misc_read(plat->siul20_nvmem, S32CC_SOC_LETTER, &letter,
-			sizeof(letter));
-	if (ret != sizeof(letter)) {
-		printf("%s: Failed to read SoC's letter (err = %d)\n",
-		       __func__, ret);
-		return -EINVAL;
-	}
-
-	ret = misc_read(plat->siul20_nvmem, S32CC_SOC_PART_NO, &part_number,
-			sizeof(part_number));
-	if (ret != sizeof(part_number)) {
-		printf("%s: Failed to read SoC's part number (err = %d)\n",
-		       __func__, ret);
-		return -EINVAL;
-	}
-
-	ret = misc_read(plat->siul20_nvmem, S32CC_SOC_MAJOR, &major,
-			sizeof(major));
-	if (ret != sizeof(major)) {
-		printf("%s: Failed to read SoC's major (err = %d)\n",
-		       __func__, ret);
-		return -EINVAL;
-	}
-
-	ret = misc_read(plat->siul20_nvmem, S32CC_SOC_MINOR, &minor,
-			sizeof(minor));
-	if (ret != sizeof(minor)) {
-		printf("%s: Failed to read SoC's minor (err = %d)\n",
-		       __func__, ret);
-		return -EINVAL;
-	}
-
-	/* It might be unavailable */
-	ret = misc_read(plat->siul21_nvmem, S32CC_SOC_SUBMINOR, &subminor,
-			sizeof(subminor));
-	if (ret == sizeof(subminor))
-		has_subminor = true;
-
 	ret = snprintf(buf, size, "NXP S32%c%uA rev. %u.%u",
-		       (char)letter, part_number, major, minor);
+		       (char)plat->letter, plat->part_number, plat->major,
+		       plat->minor);
 
-	if (has_subminor)
-		snprintf(buf + ret, size - ret, ".%u", subminor);
+	if (plat->has_subminor)
+		snprintf(buf + ret, size - ret, ".%u", plat->subminor);
 
 	return 0;
 }
@@ -100,28 +70,60 @@ static const struct udevice_id cpu_s32cc_ids[] = {
 	{ }
 };
 
-static int s32cc_cpu_probe(struct udevice *dev)
+static int read_soc_nvmem_cell(struct udevice *dev, struct soc_nvmem_cell *cell)
 {
-	struct cpu_s32cc_plat *plat = dev_get_platdata(dev);
-	struct udevice *siul20_nvmem, *siul21_nvmem;
+	struct nvmem_cell c;
 	int ret;
 
-	ret = uclass_get_device_by_name(UCLASS_MISC, "siul2_0_nvram",
-					&siul20_nvmem);
+	ret = nvmem_cell_get(dev, cell->name, &c);
 	if (ret) {
-		printf("%s: No SIUL20 NVMEM (err = %d)\n", __func__, ret);
+		printf("Failed to get '%s' cell\n", cell->name);
 		return ret;
 	}
 
-	ret = uclass_get_device_by_name(UCLASS_MISC, "siul2_1_nvram",
-					&siul21_nvmem);
+	ret = nvmem_cell_read(&c, cell->data, sizeof(*cell->data));
+	if (ret) {
+		printf("%s: Failed to read cell '%s' (err = %d)\n",
+		       __func__, cell->name, ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int s32cc_cpu_probe(struct udevice *dev)
+{
+	struct cpu_s32cc_plat *plat = dev_get_platdata(dev);
+	struct nvmem_cell cell;
+	struct soc_nvmem_cell cells[] = {
+		{ .name = "soc_letter", .data = &plat->letter },
+		{ .name = "part_no", .data = &plat->part_number },
+		{ .name = "soc_major", .data = &plat->major },
+		{ .name = "soc_minor", .data = &plat->minor },
+	};
+	const char *subminor = "soc_subminor";
+	int ret;
+	size_t i;
+
+	if (!plat)
+		return -EINVAL;
+
+	for (i = 0u; i < ARRAY_SIZE(cells); i++) {
+		ret = read_soc_nvmem_cell(dev, &cells[i]);
+		if (ret)
+			return ret;
+	}
+
+	ret = nvmem_cell_get(dev, subminor, &cell);
 	if (ret) {
-		printf("%s: No SIUL21 NVMEM (err = %d)\n", __func__, ret);
+		printf("Failed to get '%s' cell", subminor);
 		return ret;
 	}
 
-	plat->siul20_nvmem = siul20_nvmem;
-	plat->siul21_nvmem = siul21_nvmem;
+	ret = nvmem_cell_read(&cell, &plat->subminor,
+			      sizeof(plat->subminor));
+	if (ret)
+		plat->has_subminor = false;
 
 	return 0;
 }
diff --git a/drivers/misc/s32cc_siul2_nvram.c b/drivers/misc/s32cc_siul2_nvram.c
index 7958df02c4..c00ad6b3b7 100644
--- a/drivers/misc/s32cc_siul2_nvram.c
+++ b/drivers/misc/s32cc_siul2_nvram.c
@@ -10,7 +10,7 @@
 #include <linux/bitops.h>
 #include <linux/errno.h>
 #include <linux/kernel.h>
-#include <s32-cc/siul2_nvram.h>
+#include <dt-bindings/nvmem/s32cc-siul2-nvmem.h>
 
 #define MIDR1_OFF	0x4
 #define MIDR2_OFF	0x8
diff --git a/drivers/pci/pcie_s32gen1.c b/drivers/pci/pcie_s32gen1.c
index 28d3b320b9..d81f0157e4 100644
--- a/drivers/pci/pcie_s32gen1.c
+++ b/drivers/pci/pcie_s32gen1.c
@@ -16,7 +16,8 @@
 #include <dm/device-internal.h>
 #include <dm/uclass.h>
 #include <linux/sizes.h>
-#include <s32-cc/siul2_nvram.h>
+#include <s32-cc/nvmem.h>
+#include <dt-bindings/nvmem/s32cc-siul2-nvmem.h>
 
 /* CFG1 is used in linux when finding devices on the bus.
  * It is actually the upper half of the config space
@@ -817,6 +818,7 @@ static int s32_pcie_get_dev_id_variant(struct udevice *dev)
 	struct udevice *siul2_nvmem;
 	struct ofnode_phandle_args phandle_args;
 	u32 variant_bits = 0;
+	struct nvmem_cell cell;
 	int ret;
 
 	if (dev_read_phandle_with_args(dev, "nvmem-cells", NULL,
@@ -832,9 +834,15 @@ static int s32_pcie_get_dev_id_variant(struct udevice *dev)
 		return -ENODEV;
 	}
 
-	ret = misc_read(siul2_nvmem, S32CC_OVERWRITE_PCIE_DEV_ID,
-			&variant_bits, sizeof(variant_bits));
-	if (ret != sizeof(variant_bits)) {
+	ret = nvmem_cell_get_by_offset(siul2_nvmem, S32CC_OVERWRITE_PCIE_DEV_ID,
+				       &cell);
+	if (ret) {
+		printf("Failed to get PCIE ID NVMEM cell\n");
+		return -ENODEV;
+	}
+
+	ret = nvmem_cell_read(&cell, &variant_bits, sizeof(variant_bits));
+	if (ret) {
 		printf("%s: Failed to read PCIe device ID (err = %d)\n",
 		       __func__, ret);
 		return -EINVAL;
@@ -925,6 +933,7 @@ static int s32_pcie_probe(struct udevice *dev)
 	u32 soc_serdes_presence;
 	u32 variant_bits, pcie_dev_id;
 	struct udevice *siul21_nvmem = NULL;
+	struct nvmem_cell cell;
 
 	pcie->enabled = false;
 
@@ -935,10 +944,16 @@ static int s32_pcie_probe(struct udevice *dev)
 		return ret;
 	}
 
-	ret = misc_read(siul21_nvmem, S32CC_SERDES_PRESENCE,
-			&soc_serdes_presence,
-			sizeof(soc_serdes_presence));
-	if (ret != sizeof(soc_serdes_presence)) {
+	ret = nvmem_cell_get_by_offset(siul21_nvmem, S32CC_SERDES_PRESENCE,
+				       &cell);
+	if (ret) {
+		printf("Failed to get SerDes presence NVMEM cell\n");
+		return -ENODEV;
+	}
+
+	ret = nvmem_cell_read(&cell, &soc_serdes_presence,
+			      sizeof(soc_serdes_presence));
+	if (ret) {
 		printf("%s: Failed to read SoC's SerDes capability (err = %d)\n",
 		       __func__, ret);
 		return -EINVAL;
-- 
2.17.1

