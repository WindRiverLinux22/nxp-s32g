From 169256f9392dd05a779c48855f069bba9264e2a9 Mon Sep 17 00:00:00 2001
From: "Radu Pirea (NXP OSS)" <radu-nicolae.pirea@oss.nxp.com>
Date: Fri, 18 Feb 2022 14:44:25 +0200
Subject: [PATCH 26/64] misc: s32cc cmu: move cmu driver to DM

Issue: ALB-8491

Upstream-Status: Pending 

Signed-off-by: Radu Pirea (NXP OSS) <radu-nicolae.pirea@oss.nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 arch/arm/dts/s32-cc.dtsi              |   6 +
 arch/arm/dts/s32g2.dtsi               |   4 +
 arch/arm/dts/s32g3.dtsi               |   4 +
 arch/arm/dts/s32r45.dts               |   4 +
 arch/arm/mach-s32/s32-cc/Makefile     |   4 -
 arch/arm/mach-s32/s32-cc/cmu.c        | 423 ----------------
 arch/arm/mach-s32/s32-cc/s32g2_cmu.c  |  61 ---
 arch/arm/mach-s32/s32-cc/s32g3_cmu.c  |  59 ---
 arch/arm/mach-s32/s32-cc/s32r45_cmu.c |  60 ---
 drivers/misc/Makefile                 |   1 +
 drivers/misc/s32cc_cmu.c              | 689 ++++++++++++++++++++++++++
 drivers/misc/s32cc_cmu.h              | 129 +++++
 12 files changed, 837 insertions(+), 607 deletions(-)
 delete mode 100644 arch/arm/mach-s32/s32-cc/cmu.c
 delete mode 100644 arch/arm/mach-s32/s32-cc/s32g2_cmu.c
 delete mode 100644 arch/arm/mach-s32/s32-cc/s32g3_cmu.c
 delete mode 100644 arch/arm/mach-s32/s32-cc/s32r45_cmu.c
 create mode 100644 drivers/misc/s32cc_cmu.c
 create mode 100644 drivers/misc/s32cc_cmu.h

diff --git a/arch/arm/dts/s32-cc.dtsi b/arch/arm/dts/s32-cc.dtsi
index 2b4af08d3b..6d8c6c3795 100644
--- a/arch/arm/dts/s32-cc.dtsi
+++ b/arch/arm/dts/s32-cc.dtsi
@@ -39,6 +39,12 @@
 		tick-timer = &pit0;
 	};
 
+	cmu: cmu@4005c000 {
+		reg = <0x0 0x4005c000 0x0 0x1000>;
+		clocks = <&clks S32GEN1_SCMI_CLK_CMU_MODULE>,
+			 <&clks S32GEN1_SCMI_CLK_CMU_REG>;
+	};
+
 	cpus: cpus {
 		#address-cells = <1>;
 		#size-cells = <0>;
diff --git a/arch/arm/dts/s32g2.dtsi b/arch/arm/dts/s32g2.dtsi
index 0b00d91a6a..925ec312ee 100644
--- a/arch/arm/dts/s32g2.dtsi
+++ b/arch/arm/dts/s32g2.dtsi
@@ -24,6 +24,10 @@
 	};
 };
 
+&cmu {
+	compatible = "nxp,s32g2-cmu";
+};
+
 &siul2_0_nvram {
 	compatible = "nxp,s32g2-siul2_0-nvram";
 };
diff --git a/arch/arm/dts/s32g3.dtsi b/arch/arm/dts/s32g3.dtsi
index 8577442b7a..ae5d8fb22c 100644
--- a/arch/arm/dts/s32g3.dtsi
+++ b/arch/arm/dts/s32g3.dtsi
@@ -38,6 +38,10 @@
 	};
 };
 
+&cmu {
+	compatible = "nxp,s32g3-cmu";
+};
+
 &cpus {
 	cpu4: cpu@2 {
 		device_type = "cpu";
diff --git a/arch/arm/dts/s32r45.dts b/arch/arm/dts/s32r45.dts
index 124f5fccf9..e9f2cf8445 100644
--- a/arch/arm/dts/s32r45.dts
+++ b/arch/arm/dts/s32r45.dts
@@ -249,6 +249,10 @@
 	};
 };
 
+&cmu {
+	compatible = "nxp,s32r45-cmu";
+};
+
 &usdhc0 {
 	pinctrl-0 = <&pinctrl0_sd0>;
 	pinctrl-names = "default";
diff --git a/arch/arm/mach-s32/s32-cc/Makefile b/arch/arm/mach-s32/s32-cc/Makefile
index 169504722c..c61a4cda78 100644
--- a/arch/arm/mach-s32/s32-cc/Makefile
+++ b/arch/arm/mach-s32/s32-cc/Makefile
@@ -18,10 +18,6 @@ obj-$(CONFIG_OF_LIBFDT)		+= fdt.o
 ccflags-y			+= -Idrivers/misc
 ccflags-y			+= -Iboard/nxp/s32-cc
 
-obj-$(CONFIG_S32_CMU)		+= cmu.o
-obj-$(CONFIG_ARCH_S32G2)	+= s32g2_cmu.o
-obj-$(CONFIG_ARCH_S32G3)	+= s32g3_cmu.o
-obj-$(CONFIG_ARCH_S32R45)	+= s32r45_cmu.o
 obj-$(CONFIG_HSE_SECBOOT)	+= hse_adv_secboot.o
 ifdef CONFIG_NXP_S32CC
 obj-$(CONFIG_NETDEVICES)	+= sgmii/sgmii.o sgmii/serdes_xpcs.o
diff --git a/arch/arm/mach-s32/s32-cc/cmu.c b/arch/arm/mach-s32/s32-cc/cmu.c
deleted file mode 100644
index 123f6db552..0000000000
--- a/arch/arm/mach-s32/s32-cc/cmu.c
+++ /dev/null
@@ -1,423 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/*
- * Copyright 2020-2021 NXP
- */
-#include <asm/io.h>
-#include <cmu.h>
-#include <command.h>
-#include <common.h>
-#include <inttypes.h>
-#include <linux/kernel.h>
-
-/* Clocks variations in percentages */
-#define MAX_PERIPH_FREQ			((double)2000)
-
-#define CMU_FC_GCR(BASE)		((BASE) + 0x0)
-#define CMU_FC_GCR_FCE			BIT(0)
-#define CMU_FC_RCCR(BASE)		((BASE) + 0x4)
-#define CMU_FC_RCCR_REF_CNT_MAX		(0xFFFFU)
-#define CMU_FC_HTCR(BASE)		((BASE) + 0x8)
-#define CMU_FC_LTCR(BASE)		((BASE) + 0xC)
-#define CMU_FC_TCR_FREF_MAX		(0xFFFFFFU)
-#define CMU_FC_SR(BASE)			((BASE) + 0x10)
-#define CMU_FC_SR_FLL			BIT(0)
-#define CMU_FC_SR_HLL			BIT(1)
-#define CMU_FC_SR_FLAGS			(CMU_FC_SR_FLL | CMU_FC_SR_HLL)
-#define CMU_FC_SR_STATE(SR)		(((SR) >> 2) & 0x3)
-#define CMU_FC_SR_RS			BIT(4)
-
-#define CMU_FM_GCR(BASE)		((BASE) + 0x0)
-#define CMU_FM_GCR_FME			BIT(0)
-#define CMU_FM_RCCR(BASE)		((BASE) + 0x4)
-#define CMU_FM_SR(BASE)			((BASE) + 0x8)
-#define CMU_FM_SR_MET_CNT(SR)		(((SR) >> 8) & 0xFFFFFFU)
-#define CMU_FM_SR_RS			BIT(4)
-#define CMU_FM_SR_STATE(SR)		(((SR) >> 2) & 0x3)
-#define CMU_FM_SR_FMTO			BIT(1)
-#define CMU_FM_SR_FMC			BIT(0)
-
-#define MAX_DEPTH 20
-
-struct cmu_params {
-	u16 ref_cnt;
-	u32 href;
-	u32 lref;
-	u32 udelay;
-};
-
-struct cmu_fm_params {
-	u16 ref_cnt;
-};
-
-struct freq_interval {
-	double min;
-	double max;
-};
-
-enum fc_result {
-	MATCH = 0x0,
-	LOWER = 0x1,
-	HIGHER = 0x2,
-};
-
-static double get_min_freq(double clk, double variation)
-{
-	return clk * ((double)1 - variation / 100);
-}
-
-static double get_max_freq(double clk, double variation)
-{
-	return clk * ((double)1 + variation / 100);
-}
-
-static u16 u16_ceiling(double val)
-{
-	u16 floor = (u16)val;
-
-	if (val - (double)floor == (double)0)
-		return floor;
-
-	return floor + 1;
-}
-
-static u32 u32_round(double val)
-{
-	u32 floor = (u32)val;
-
-	if (val - (double)floor < (double)0.5)
-		return floor;
-
-	return floor + 1;
-}
-
-static u32 u32_get_digits(u32 val)
-{
-	u32 digits = 0;
-
-	if (!val)
-		return 1;
-
-	while (val) {
-		digits++;
-		val /= 10;
-	}
-
-	return digits;
-}
-
-static u32 get_ndigits(double val, u32 precision)
-{
-	u32 digits = 0;
-	u32 val32 = (u32)val;
-
-	digits = u32_get_digits(val32);
-
-	/* Dot */
-	digits++;
-
-	/* Fractional part */
-	precision /= 10;
-	while (precision) {
-		digits++;
-		precision /= 10;
-	}
-
-	return digits;
-}
-
-static void print_double(double val, u32 space, u32 precision)
-{
-	size_t i;
-	size_t ndigits;
-	u32 val32 = (u32)val;
-	u32 frac = (u32)((val - (double)val32) * (double)precision);
-
-	ndigits = get_ndigits(val, precision);
-	if (space > ndigits) {
-		for (i = 0; i < space - ndigits; i++)
-			printf(" ");
-	}
-
-	if (precision == 1000)
-		printf("%" PRIu32 ".%03" PRIu32, val32, frac);
-	else if (precision == 100)
-		printf("%" PRIu32 ".%02" PRIu32, val32, frac);
-	else
-		printf("%" PRIu32 ".%01" PRIu32, val32, frac);
-}
-
-static int calc_cmu_ref_cnt(double ref_clk, double mon_clk,
-			    u16 *ref_cnt)
-{
-	double d_cnt;
-	u16 max_iter;
-
-	d_cnt = 6.0 + 4.0 * ref_clk / mon_clk;
-	if ((u32)(d_cnt) > CMU_FC_RCCR_REF_CNT_MAX) {
-		pr_err("REF_CNT (0x%" PRIx32 ") > max value\n", (u32)(d_cnt));
-		return -1;
-	}
-
-	*ref_cnt = u16_ceiling(d_cnt);
-	/* Maximum accuracy */
-	max_iter = CMU_FC_RCCR_REF_CNT_MAX / *ref_cnt;
-	*ref_cnt *= max_iter;
-
-	/* Overflow */
-	if ((double)*ref_cnt < d_cnt) {
-		pr_err("REF_CNT overflow\n");
-		return -1;
-	}
-
-	return 0;
-}
-
-static int get_fm_params(double ref_clk, double mon_clk,
-			 struct cmu_fm_params *conf)
-{
-	return calc_cmu_ref_cnt(ref_clk, mon_clk, &conf->ref_cnt);
-}
-
-static int get_fc_params(double ref_clk, double mon_clk,
-			 double ref_var, double mon_var,
-			 struct cmu_params *conf)
-{
-	double min_ref = get_min_freq(ref_clk, ref_var);
-	double max_ref = get_max_freq(ref_clk, ref_var);
-	double min_mon = get_min_freq(mon_clk, mon_var);
-	double max_mon = get_max_freq(mon_clk, mon_var);
-	double href, lref;
-
-	if (calc_cmu_ref_cnt(ref_clk, mon_clk, &conf->ref_cnt))
-		return -1;
-
-	conf->udelay = u32_round((double)conf->ref_cnt / ref_clk);
-
-	href = (max_mon / min_ref) * (double)conf->ref_cnt + 3;
-	if ((u64)(href) > CMU_FC_TCR_FREF_MAX) {
-		pr_err("HREF (0x%" PRIx64 ") > max value\n", (u64)(href));
-		return -1;
-	}
-
-	conf->href = u32_round(href);
-	/* Overflow */
-	if ((u64)conf->href < (u64)href) {
-		pr_err("HREF overflow\n");
-		return -1;
-	}
-
-	lref = (min_mon / max_ref) * (double)conf->ref_cnt - 3;
-	if ((u64)(lref) > CMU_FC_TCR_FREF_MAX) {
-		pr_err("LREF (0x%" PRIx64 ") > max value\n", (u64)(lref));
-		return -1;
-	}
-
-	conf->lref = u32_round(lref);
-	/* Overflow */
-	if ((u64)conf->href < (u64)href) {
-		pr_err("LREF overflow\n");
-		return -1;
-	}
-
-	return 0;
-}
-
-static enum fc_result fc_check_frequency(uintptr_t addr,
-					 struct cmu_params *params)
-{
-	/* Disable the module */
-	writel(0x0, CMU_FC_GCR(addr));
-
-	/* Clear FLL & HLL flags */
-	writel(CMU_FC_SR_FLL | CMU_FC_SR_HLL, CMU_FC_SR(addr));
-
-	/* Write params */
-	writel(params->ref_cnt, CMU_FC_RCCR(addr));
-	writel(params->href, CMU_FC_HTCR(addr));
-	writel(params->lref, CMU_FC_LTCR(addr));
-
-	/* Start the frequency check */
-	writel(CMU_FC_GCR_FCE, CMU_FC_GCR(addr));
-
-	while (!(readl(CMU_FC_SR(addr)) & CMU_FC_SR_RS))
-		;
-
-	udelay(params->udelay * 3);
-
-	/* Disable the module */
-	writel(0x0, CMU_FC_GCR(addr));
-
-	return readl(CMU_FC_SR(addr)) & CMU_FC_SR_FLAGS;
-}
-
-static int _get_fc_mon_freq(struct cmu *inst, struct freq_interval *freq_int,
-			    u32 depth)
-{
-	int ret;
-	double mon_freq;
-	struct cmu_params params;
-	enum fc_result res;
-
-	if (depth == 0)
-		return 0;
-
-	mon_freq = (freq_int->min + freq_int->max) / 2;
-
-	/* Assume 0 if the frequency is lower than 10KHz */
-	if (mon_freq < 0.01)
-		return 0;
-
-	ret = get_fc_params(inst->ref_freq, mon_freq,
-			    inst->ref_var, inst->mon_var,
-			    &params);
-	if (ret) {
-		pr_err("Failed to determine CMU_FC parameters for clock: %s\n",
-		       inst->mon_name);
-		return ret;
-	}
-
-	depth--;
-
-	res = fc_check_frequency(inst->addr, &params);
-	switch (res) {
-	case HIGHER:
-		freq_int->min = mon_freq;
-		freq_int->max = freq_int->max;
-		return _get_fc_mon_freq(inst, freq_int, depth);
-	case LOWER:
-		freq_int->min = freq_int->min;
-		freq_int->max = mon_freq;
-		return _get_fc_mon_freq(inst, freq_int, depth);
-	default:
-		freq_int->min = mon_freq;
-		freq_int->max = mon_freq;
-		return 0;
-	}
-
-	return -1;
-}
-
-static int get_fc_mon_freq(struct cmu *inst,
-			   struct freq_interval *freq_int)
-{
-	freq_int->min = 0;
-	freq_int->max = MAX_PERIPH_FREQ;
-	return _get_fc_mon_freq(inst, freq_int, MAX_DEPTH);
-}
-
-static double get_max_exp_freq(struct cmu *inst)
-{
-	if (inst->has_exp_range)
-		return inst->exp_range.max;
-
-	return inst->exp_freq;
-}
-
-static int get_fm_mon_freq(struct cmu *inst, double *mon_freq)
-{
-	struct cmu_fm_params cmu_fm;
-	u32 met_cnt, sr;
-
-	if (get_fm_params(inst->ref_freq, get_max_exp_freq(inst), &cmu_fm))
-		return -1;
-
-	/* Disable the module*/
-	writel(0x0, CMU_FM_GCR(inst->addr));
-
-	/* Clear flags */
-	writel(CMU_FM_SR_FMTO | CMU_FM_SR_FMC, CMU_FM_SR(inst->addr));
-
-	/* Sampling period */
-	writel(cmu_fm.ref_cnt, CMU_FM_RCCR(inst->addr));
-	/* Start the measurement */
-	writel(CMU_FM_GCR_FME, CMU_FM_GCR(inst->addr));
-
-	while (readl(CMU_FM_SR(inst->addr)) & (CMU_FM_SR_FMTO | CMU_FM_SR_FMC))
-		;
-
-	do {
-		sr = readl(CMU_FM_SR(inst->addr));
-		if (sr & CMU_FM_SR_FMTO) {
-			pr_err("Timeout while measuring the frequency of %s\n",
-			       inst->mon_name);
-			return -1;
-		}
-	} while (!CMU_FM_SR_MET_CNT(sr));
-
-	/* Disable the module*/
-	writel(0x0, CMU_FM_GCR(inst->addr));
-
-	met_cnt = CMU_FM_SR_MET_CNT(sr);
-
-	*mon_freq = (double)met_cnt * inst->ref_freq / cmu_fm.ref_cnt;
-
-	return 0;
-}
-
-static void print_expected_freq(struct cmu *inst)
-{
-	if (inst->has_exp_range) {
-		print_double(inst->exp_range.min, 5, 10);
-		puts(" - ");
-		print_double(inst->exp_range.max, 5, 10);
-		return;
-	}
-
-	print_double(inst->exp_freq, 12, 1);
-}
-
-static int do_verify_clocks(cmd_tbl_t *cmdtp, int flag, int argc,
-			    char * const argv[])
-{
-	struct freq_interval freq_int;
-	struct cmu *inst;
-	size_t i;
-	double max_var;
-	double mon_freq = 0;
-
-	puts(" CMU       | Monitored    | Reference | Expected      |");
-	puts(" Verified\n");
-	puts(" Address   | clock        | clock     | range (MHz)   |");
-	puts(" range (MHz)\n");
-	puts("-----------|--------------|-----------|---------------|");
-	puts("--------------------\n");
-
-	for (i = 0; i < get_cmu_blocks_number(); i++) {
-		inst = get_cmu_block(i);
-		if (inst->fc) {
-			if (get_fc_mon_freq(inst, &freq_int)) {
-				pr_err("Failed to determine CMU_FC parameters "
-				       "for clock: %s\n", inst->mon_name);
-				continue;
-			}
-
-		} else {
-			if (get_fm_mon_freq(inst, &mon_freq))
-				continue;
-		}
-
-		printf("0x%" PRIxPTR " |", inst->addr);
-		max_var = min(inst->mon_var, inst->ref_var);
-		printf(" %12s | ", inst->mon_name);
-		printf("%9s | ", inst->ref_name);
-		print_expected_freq(inst);
-		printf(" | ");
-		if (inst->fc) {
-			print_double(get_min_freq(freq_int.min, max_var),
-				     8, 1000);
-			printf(" - ");
-			print_double(get_max_freq(freq_int.max, max_var),
-				     8, 1000);
-		} else {
-			print_double(mon_freq, 19, 1000);
-		}
-		printf("\n");
-	}
-
-	return 0;
-}
-
-U_BOOT_CMD(verifclk, CONFIG_SYS_MAXARGS, 1, do_verify_clocks,
-	   "Verifies clocks frequencies using CMU module",
-	   NULL
-);
diff --git a/arch/arm/mach-s32/s32-cc/s32g2_cmu.c b/arch/arm/mach-s32/s32-cc/s32g2_cmu.c
deleted file mode 100644
index 4c238c37d9..0000000000
--- a/arch/arm/mach-s32/s32-cc/s32g2_cmu.c
+++ /dev/null
@@ -1,61 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/*
- * Copyright 2020-2022 NXP
- */
-
-#include <common.h>
-#include <cmu.h>
-
-static struct cmu cmu_blocks[] = {
-	FIRC_PERIPH_CMU_FC(0, FXOSC, FXOSC_FREQ),
-
-	FXOSC_PERIPH_CMU_FM(1, FIRC, FIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(2, SIRC, SIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF, 40),
-	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF, 40),
-
-	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3, 133.33),
-	FIRC_PERIPH_CMU_FC(6, XBAR_M7_0, 400),
-
-	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3, 133.33),
-
-	FIRC_PERIPH_CMU_FC(8, XBAR_M7_1, 400),
-	FIRC_PERIPH_CMU_FC(9, XBAR_M7_2, 400),
-	FIRC_PERIPH_CMU_FC(10, PER, 80),
-
-	FXOSC_PERIPH_CMU_FC_RANGE(11, SERDES_REF, 100, 125),
-	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE, 40),
-	FXOSC_PERIPH_CMU_FC(13, CAN_PE, 80),
-	FXOSC_PERIPH_CMU_FC_RANGE(14, GMAC_0_TX, 2.5, 125),
-	FXOSC_PERIPH_CMU_FC_RANGE(15, GMAC_TS, 5, 200),
-	FXOSC_PERIPH_CMU_FC(16, LIN, 125),
-	FXOSC_PERIPH_CMU_FC(17, QSPI_1X, 200),
-	FXOSC_PERIPH_CMU_FC(18, SDHC, 400),
-
-	FIRC_PERIPH_CMU_FC(20, DDR, 666.66),
-
-	FXOSC_PERIPH_CMU_FC_RANGE(21, GMAC_0_RX, 2.5, 125),
-	FXOSC_PERIPH_CMU_FC(22, SPI, 100),
-
-	FXOSC_PERIPH_CMU_FC(27, A53_CORE, 1000),
-
-	FIRC_PERIPH_CMU_FC(28, A53_CORE, 1000),
-
-	FXOSC_PERIPH_CMU_FC(39, PFE_SYS, 300),
-	FXOSC_PERIPH_CMU_FC_RANGE(46, PFE_MAC_0_TX, 2.5, 312.5),
-	FXOSC_PERIPH_CMU_FC_RANGE(47, PFE_MAC_0_RX, 2.5, 312.5),
-	FXOSC_PERIPH_CMU_FC_RANGE(48, PFE_MAC_1_TX, 2.5, 125),
-	FXOSC_PERIPH_CMU_FC_RANGE(49, PFE_MAC_1_RX, 2.5, 125),
-	FXOSC_PERIPH_CMU_FC_RANGE(50, PFE_MAC_2_TX, 2.5, 125),
-	FXOSC_PERIPH_CMU_FC_RANGE(51, PFE_MAC_2_RX, 2.5, 125),
-};
-
-struct cmu *get_cmu_block(int index)
-{
-	return &cmu_blocks[index];
-}
-
-int get_cmu_blocks_number(void)
-{
-	return ARRAY_SIZE(cmu_blocks);
-}
diff --git a/arch/arm/mach-s32/s32-cc/s32g3_cmu.c b/arch/arm/mach-s32/s32-cc/s32g3_cmu.c
deleted file mode 100644
index 35be6a482a..0000000000
--- a/arch/arm/mach-s32/s32-cc/s32g3_cmu.c
+++ /dev/null
@@ -1,59 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/*
- * Copyright 2021 NXP
- */
-#include <cmu.h>
-
-static struct cmu cmu_blocks[] = {
-	FIRC_PERIPH_CMU_FC(0, FXOSC, FXOSC_FREQ),
-
-	FXOSC_PERIPH_CMU_FM(1, FIRC, FIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(2, SIRC, SIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF, 40),
-	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF, 40),
-
-	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3, 133),
-	FIRC_PERIPH_CMU_FC(6, XBAR_M7_0, 399.96),
-
-	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3, 133.32),
-
-	FIRC_PERIPH_CMU_FC(8, XBAR_M7_1, 399.96),
-	FIRC_PERIPH_CMU_FC(9, XBAR_M7_2, 399.96),
-	FIRC_PERIPH_CMU_FC(24, XBAR_M7_3, 399.96),
-	FIRC_PERIPH_CMU_FC(10, PER, 80),
-
-	FXOSC_PERIPH_CMU_FC_RANGE(11, SERDES_REF, 100, 125),
-	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE, 40),
-	FXOSC_PERIPH_CMU_FC(13, CAN_PE, 80),
-	FXOSC_PERIPH_CMU_FC_RANGE(14, GMAC_0_TX, 2.5, 125),
-	FXOSC_PERIPH_CMU_FC_RANGE(15, GMAC_TS, 5, 200),
-	FXOSC_PERIPH_CMU_FC(16, LIN, 125),
-	FXOSC_PERIPH_CMU_FC(17, QSPI_1X, 200),
-	FXOSC_PERIPH_CMU_FC(18, SDHC, 400),
-
-	FIRC_PERIPH_CMU_FC(20, DDR, 800),
-
-	FXOSC_PERIPH_CMU_FC_RANGE(21, GMAC_0_RX, 2.5, 125),
-	FXOSC_PERIPH_CMU_FC(22, SPI, 100),
-	FXOSC_PERIPH_CMU_FC(27, A53_CORE, 1300),
-
-	FIRC_PERIPH_CMU_FC(28, A53_CORE, 1300),
-
-	FXOSC_PERIPH_CMU_FC(39, PFE_SYS, 300),
-	FXOSC_PERIPH_CMU_FC_RANGE(46, PFE_MAC_0_TX, 2.5, 312.5),
-	FXOSC_PERIPH_CMU_FC_RANGE(47, PFE_MAC_0_RX, 2.5, 312.5),
-	FXOSC_PERIPH_CMU_FC_RANGE(48, PFE_MAC_1_TX, 2.5, 312.5),
-	FXOSC_PERIPH_CMU_FC_RANGE(49, PFE_MAC_1_RX, 2.5, 312.5),
-	FXOSC_PERIPH_CMU_FC_RANGE(50, PFE_MAC_2_TX, 2.5, 125),
-	FXOSC_PERIPH_CMU_FC_RANGE(51, PFE_MAC_2_RX, 2.5, 125),
-};
-
-struct cmu *get_cmu_block(int index)
-{
-	return &cmu_blocks[index];
-}
-
-int get_cmu_blocks_number(void)
-{
-	return ARRAY_SIZE(cmu_blocks);
-}
diff --git a/arch/arm/mach-s32/s32-cc/s32r45_cmu.c b/arch/arm/mach-s32/s32-cc/s32r45_cmu.c
deleted file mode 100644
index 822a405eba..0000000000
--- a/arch/arm/mach-s32/s32-cc/s32r45_cmu.c
+++ /dev/null
@@ -1,60 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0+
-/*
- * Copyright 2020-2021 NXP
- */
-
-#include <cmu.h>
-
-static struct cmu cmu_blocks[] = {
-	FIRC_PERIPH_CMU_FC(0, FXOSC, FXOSC_FREQ),
-
-	FXOSC_PERIPH_CMU_FM(1, FIRC, FIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(2, SIRC, SIRC_FREQ),
-	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF, 40),
-	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF, 40),
-
-	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3, 133.33),
-	FIRC_PERIPH_CMU_FC(6, XBAR_M7_0, 400),
-
-	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3, 133.33),
-
-	FIRC_PERIPH_CMU_FC(8, XBAR_M7_1, 400),
-	FIRC_PERIPH_CMU_FC(9, XBAR_M7_2, 400),
-	FIRC_PERIPH_CMU_FC(10, PER, 80),
-
-	FXOSC_PERIPH_CMU_FC_RANGE(11, SERDES_REF, 100, 125),
-	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE, 40),
-	FXOSC_PERIPH_CMU_FC(13, CAN_PE, 80),
-	FXOSC_PERIPH_CMU_FC(14, GMAC_0_TX, 125),
-	FXOSC_PERIPH_CMU_FC(15, GMAC_TS, 200),
-	FXOSC_PERIPH_CMU_FC(16, LIN, 125),
-	FXOSC_PERIPH_CMU_FC(17, QSPI_1X, 133.33),
-	FXOSC_PERIPH_CMU_FC(18, SDHC, 400),
-
-	FIRC_PERIPH_CMU_FC(20, DDR, 800),
-
-	FXOSC_PERIPH_CMU_FC_RANGE(21, GMAC_0_RX, 2.5, 125),
-	FXOSC_PERIPH_CMU_FC(22, SPI, 100),
-	FXOSC_PERIPH_CMU_FC(27, A53_CORE, 800),
-
-	FIRC_PERIPH_CMU_FC(28, A53_CORE, 800),
-
-	FXOSC_PERIPH_CMU_FC(38, ACCEL3, 600),
-	FXOSC_PERIPH_CMU_FC(39, ACCEL4_0, 400),
-	FXOSC_PERIPH_CMU_FC(40, ACCEL4_0, 400),
-	FXOSC_PERIPH_CMU_FC(46, GMAC_1_TX, 125),
-	FXOSC_PERIPH_CMU_FC(51, GMAC_1_RX, 125),
-	FXOSC_PERIPH_CMU_FC(52, MIPICSI2_0, 400),
-	FXOSC_PERIPH_CMU_FC(53, MIPICSI2_0, 400),
-	FXOSC_PERIPH_CMU_FC(54, SERDES_REF, 125),
-};
-
-struct cmu *get_cmu_block(int index)
-{
-	return &cmu_blocks[index];
-}
-
-int get_cmu_blocks_number(void)
-{
-	return ARRAY_SIZE(cmu_blocks);
-}
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 06b04bd5ec..ed01728fec 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -53,6 +53,7 @@ obj-$(CONFIG_MXC_OCOTP) += mxc_ocotp.o
 obj-$(CONFIG_MXS_OCOTP) += mxs_ocotp.o
 obj-$(CONFIG_NUVOTON_NCT6102D) += nuvoton_nct6102d.o
 obj-$(CONFIG_NXP_S32CC) += s32cc_a53_gpr.o
+obj-$(CONFIG_NXP_S32CC) += s32cc_cmu.o
 obj-$(CONFIG_NXP_S32CC) += s32cc_fuse.o
 obj-$(CONFIG_NXP_S32CC) += s32cc_ocotp.o
 obj-$(CONFIG_NXP_S32CC) += s32cc_siul2_nvram.o
diff --git a/drivers/misc/s32cc_cmu.c b/drivers/misc/s32cc_cmu.c
new file mode 100644
index 0000000000..cacc98afc0
--- /dev/null
+++ b/drivers/misc/s32cc_cmu.c
@@ -0,0 +1,689 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright 2021-2022 NXP
+ */
+
+#include <common.h>
+#include <command.h>
+#include <clk.h>
+#include <dm.h>
+#include <inttypes.h>
+#include <misc.h>
+#include <asm/io.h>
+#include <linux/delay.h>
+
+#include "s32cc_cmu.h"
+
+#define CMU_FC_GCR(BASE)		((BASE) + 0x0)
+#define CMU_FC_GCR_FCE			BIT(0)
+#define CMU_FC_RCCR(BASE)		((BASE) + 0x4)
+#define CMU_FC_RCCR_REF_CNT_MAX		(0xFFFFU)
+#define CMU_FC_HTCR(BASE)		((BASE) + 0x8)
+#define CMU_FC_LTCR(BASE)		((BASE) + 0xC)
+#define CMU_FC_TCR_FREF_MAX		(0xFFFFFFU)
+#define CMU_FC_SR(BASE)			((BASE) + 0x10)
+#define CMU_FC_SR_FLL			BIT(0)
+#define CMU_FC_SR_HLL			BIT(1)
+#define CMU_FC_SR_FLAGS			(CMU_FC_SR_FLL | CMU_FC_SR_HLL)
+#define CMU_FC_SR_STATE(SR)		(((SR) >> 2) & 0x3)
+#define CMU_FC_SR_RS			BIT(4)
+
+#define CMU_FM_GCR(BASE)		((BASE) + 0x0)
+#define CMU_FM_GCR_FME			BIT(0)
+#define CMU_FM_RCCR(BASE)		((BASE) + 0x4)
+#define CMU_FM_SR(BASE)			((BASE) + 0x8)
+#define CMU_FM_SR_MET_CNT(SR)		(((SR) >> 8) & 0xFFFFFFU)
+#define CMU_FM_SR_RS			BIT(4)
+#define CMU_FM_SR_STATE(SR)		(((SR) >> 2) & 0x3)
+#define CMU_FM_SR_FMTO			BIT(1)
+#define CMU_FM_SR_FMC			BIT(0)
+
+#define MAX_PERIPH_FREQ			((double)2000)
+
+#define MAX_DEPTH 20
+
+struct s32cc_cmu_data {
+	struct cmu *cmu_blocks;
+	int n_blocks;
+};
+
+struct s32cc_cmu {
+	void __iomem *base_addr;
+	struct s32cc_cmu_data *data;
+	struct clk cmu_clk_module;
+	struct clk cmu_clk_reg;
+};
+
+struct cmu_params {
+	u16 ref_cnt;
+	u32 href;
+	u32 lref;
+	u32 udelay;
+};
+
+struct cmu_fm_params {
+	u16 ref_cnt;
+};
+
+struct freq_interval {
+	double min;
+	double max;
+};
+
+enum fc_result {
+	MATCH = 0x0,
+	LOWER = 0x1,
+	HIGHER = 0x2,
+};
+
+struct cmu_result {
+	int id;
+	char mon_clk_name[16];
+	char ref_clk_name[8];
+	struct freq_interval expected;
+	struct freq_interval measured;
+};
+
+static struct cmu s32g2_cmu_blocks[] = {
+	FIRC_PERIPH_CMU_FC(0, FXOSC, FXOSC_FREQ),
+
+	FXOSC_PERIPH_CMU_FM(1, FIRC, FIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(2, SIRC, SIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF, 40),
+	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF, 40),
+
+	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3, 133.33),
+	FIRC_PERIPH_CMU_FC(6, XBAR_M7_0, 400),
+
+	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3, 133.33),
+
+	FIRC_PERIPH_CMU_FC(8, XBAR_M7_1, 400),
+	FIRC_PERIPH_CMU_FC(9, XBAR_M7_2, 400),
+	FIRC_PERIPH_CMU_FC(10, PER, 80),
+
+	FXOSC_PERIPH_CMU_FC_RANGE(11, SERDES_REF, 100, 125),
+	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE, 40),
+	FXOSC_PERIPH_CMU_FC(13, CAN_PE, 80),
+	FXOSC_PERIPH_CMU_FC_RANGE(14, GMAC_0_TX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(15, GMAC_TS, 5, 200),
+	FXOSC_PERIPH_CMU_FC(16, LIN, 125),
+	FXOSC_PERIPH_CMU_FC(17, QSPI_1X, 200),
+	FXOSC_PERIPH_CMU_FC(18, SDHC, 400),
+
+	FIRC_PERIPH_CMU_FC(20, DDR, 666.66),
+
+	FXOSC_PERIPH_CMU_FC_RANGE(21, GMAC_0_RX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC(22, SPI, 100),
+
+	FXOSC_PERIPH_CMU_FC(27, A53_CORE, 1000),
+
+	FIRC_PERIPH_CMU_FC(28, A53_CORE, 1000),
+
+	FXOSC_PERIPH_CMU_FC(39, PFE_SYS, 300),
+	FXOSC_PERIPH_CMU_FC_RANGE(46, PFE_MAC_0_TX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(47, PFE_MAC_0_RX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(48, PFE_MAC_1_TX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(49, PFE_MAC_1_RX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(50, PFE_MAC_2_TX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(51, PFE_MAC_2_RX, 2.5, 125),
+};
+
+static struct cmu s32g3_cmu_blocks[] = {
+	FIRC_PERIPH_CMU_FC(0, FXOSC, FXOSC_FREQ),
+
+	FXOSC_PERIPH_CMU_FM(1, FIRC, FIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(2, SIRC, SIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF, 40),
+	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF, 40),
+
+	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3, 133),
+	FIRC_PERIPH_CMU_FC(6, XBAR_M7_0, 399.96),
+
+	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3, 133.32),
+
+	FIRC_PERIPH_CMU_FC(8, XBAR_M7_1, 399.96),
+	FIRC_PERIPH_CMU_FC(9, XBAR_M7_2, 399.96),
+	FIRC_PERIPH_CMU_FC(24, XBAR_M7_3, 399.96),
+	FIRC_PERIPH_CMU_FC(10, PER, 80),
+
+	FXOSC_PERIPH_CMU_FC_RANGE(11, SERDES_REF, 100, 125),
+	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE, 40),
+	FXOSC_PERIPH_CMU_FC(13, CAN_PE, 80),
+	FXOSC_PERIPH_CMU_FC_RANGE(14, GMAC_0_TX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(15, GMAC_TS, 5, 200),
+	FXOSC_PERIPH_CMU_FC(16, LIN, 125),
+	FXOSC_PERIPH_CMU_FC(17, QSPI_1X, 200),
+	FXOSC_PERIPH_CMU_FC(18, SDHC, 400),
+
+	FIRC_PERIPH_CMU_FC(20, DDR, 800),
+
+	FXOSC_PERIPH_CMU_FC_RANGE(21, GMAC_0_RX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC(22, SPI, 100),
+	FXOSC_PERIPH_CMU_FC(27, A53_CORE, 1300),
+
+	FIRC_PERIPH_CMU_FC(28, A53_CORE, 1300),
+
+	FXOSC_PERIPH_CMU_FC(39, PFE_SYS, 300),
+	FXOSC_PERIPH_CMU_FC_RANGE(46, PFE_MAC_0_TX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(47, PFE_MAC_0_RX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(48, PFE_MAC_1_TX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(49, PFE_MAC_1_RX, 2.5, 312.5),
+	FXOSC_PERIPH_CMU_FC_RANGE(50, PFE_MAC_2_TX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC_RANGE(51, PFE_MAC_2_RX, 2.5, 125),
+};
+
+static struct cmu s32r45_cmu_blocks[] = {
+	FIRC_PERIPH_CMU_FC(0, FXOSC, FXOSC_FREQ),
+
+	FXOSC_PERIPH_CMU_FM(1, FIRC, FIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(2, SIRC, SIRC_FREQ),
+	FXOSC_PERIPH_CMU_FM(3, FTM_0_REF, 40),
+	FXOSC_PERIPH_CMU_FM(4, FTM_1_REF, 40),
+
+	FIRC_PERIPH_CMU_FC(5, XBAR_DIV3, 133.33),
+	FIRC_PERIPH_CMU_FC(6, XBAR_M7_0, 400),
+
+	FXOSC_PERIPH_CMU_FC(7, XBAR_DIV3, 133.33),
+
+	FIRC_PERIPH_CMU_FC(8, XBAR_M7_1, 400),
+	FIRC_PERIPH_CMU_FC(9, XBAR_M7_2, 400),
+	FIRC_PERIPH_CMU_FC(10, PER, 80),
+
+	FXOSC_PERIPH_CMU_FC_RANGE(11, SERDES_REF, 100, 125),
+	FXOSC_PERIPH_CMU_FC(12, FLEXRAY_PE, 40),
+	FXOSC_PERIPH_CMU_FC(13, CAN_PE, 80),
+	FXOSC_PERIPH_CMU_FC(14, GMAC_0_TX, 125),
+	FXOSC_PERIPH_CMU_FC(15, GMAC_TS, 200),
+	FXOSC_PERIPH_CMU_FC(16, LIN, 125),
+	FXOSC_PERIPH_CMU_FC(17, QSPI_1X, 133.33),
+	FXOSC_PERIPH_CMU_FC(18, SDHC, 400),
+
+	FIRC_PERIPH_CMU_FC(20, DDR, 800),
+
+	FXOSC_PERIPH_CMU_FC_RANGE(21, GMAC_0_RX, 2.5, 125),
+	FXOSC_PERIPH_CMU_FC(22, SPI, 100),
+	FXOSC_PERIPH_CMU_FC(27, A53_CORE, 800),
+
+	FIRC_PERIPH_CMU_FC(28, A53_CORE, 800),
+
+	FXOSC_PERIPH_CMU_FC(38, ACCEL3, 600),
+	FXOSC_PERIPH_CMU_FC(39, ACCEL4_0, 400),
+	FXOSC_PERIPH_CMU_FC(40, ACCEL4_0, 400),
+	FXOSC_PERIPH_CMU_FC(46, GMAC_1_TX, 125),
+	FXOSC_PERIPH_CMU_FC(51, GMAC_1_RX, 125),
+	FXOSC_PERIPH_CMU_FC(52, MIPICSI2_0, 400),
+	FXOSC_PERIPH_CMU_FC(53, MIPICSI2_0, 400),
+	FXOSC_PERIPH_CMU_FC(54, SERDES_REF, 125),
+};
+
+static struct s32cc_cmu_data s32g2_cmu_data = {
+	.cmu_blocks = s32g2_cmu_blocks,
+	.n_blocks   = ARRAY_SIZE(s32g2_cmu_blocks),
+};
+
+static struct s32cc_cmu_data s32g3_cmu_data = {
+	.cmu_blocks = s32g3_cmu_blocks,
+	.n_blocks   = ARRAY_SIZE(s32g3_cmu_blocks),
+};
+
+static struct s32cc_cmu_data s32r45_cmu_data = {
+	.cmu_blocks = s32r45_cmu_blocks,
+	.n_blocks   = ARRAY_SIZE(s32r45_cmu_blocks),
+};
+
+static double get_min_freq(double clk, double variation)
+{
+	return clk * ((double)1 - variation / 100);
+}
+
+static double get_max_freq(double clk, double variation)
+{
+	return clk * ((double)1 + variation / 100);
+}
+
+static u16 u16_ceiling(double val)
+{
+	u16 floor = (u16)val;
+
+	if (val - (double)floor == (double)0)
+		return floor;
+
+	return floor + 1;
+}
+
+static u32 u32_round(double val)
+{
+	u32 floor = (u32)val;
+
+	if (val - (double)floor < (double)0.5)
+		return floor;
+
+	return floor + 1;
+}
+
+static int calc_cmu_ref_cnt(double ref_clk, double mon_clk,
+			    u16 *ref_cnt)
+{
+	double d_cnt;
+	u16 max_iter;
+
+	d_cnt = ref_clk / mon_clk;
+	if ((u32)(d_cnt) > CMU_FC_RCCR_REF_CNT_MAX) {
+		pr_err("REF_CNT (0x%" PRIx32 ") > max value\n", (u32)(d_cnt));
+		return -EINVAL;
+	}
+
+	*ref_cnt = u16_ceiling(d_cnt);
+	/* Maximum accuracy */
+	max_iter = CMU_FC_RCCR_REF_CNT_MAX / *ref_cnt;
+	*ref_cnt *= max_iter;
+
+	/* Overflow */
+	if ((double)*ref_cnt < d_cnt) {
+		pr_err("REF_CNT overflow\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int get_fm_params(double ref_clk, double mon_clk,
+			 struct cmu_fm_params *conf)
+{
+	return calc_cmu_ref_cnt(ref_clk, mon_clk, &conf->ref_cnt);
+}
+
+static int get_fc_params(double ref_clk, double mon_clk,
+			 double ref_var, double mon_var,
+			 struct cmu_params *conf)
+{
+	double min_ref = get_min_freq(ref_clk, ref_var);
+	double max_ref = get_max_freq(ref_clk, ref_var);
+	double min_mon = get_min_freq(mon_clk, mon_var);
+	double max_mon = get_max_freq(mon_clk, mon_var);
+	double href, lref;
+	int ret;
+
+	ret = calc_cmu_ref_cnt(ref_clk, mon_clk, &conf->ref_cnt);
+	if (ret)
+		return ret;
+
+	conf->udelay = u32_round((double)conf->ref_cnt / ref_clk);
+
+	href = (max_mon / min_ref) * (double)conf->ref_cnt;
+	if ((u64)(href) > CMU_FC_TCR_FREF_MAX) {
+		pr_err("HREF (0x%" PRIx64 ") > max value\n", (u64)(href));
+		return -EINVAL;
+	}
+
+	conf->href = u32_round(href);
+	/* Overflow */
+	if ((u64)conf->href < (u64)href) {
+		pr_err("HREF overflow\n");
+		return -EINVAL;
+	}
+
+	lref = (min_mon / max_ref) * (double)conf->ref_cnt;
+	if ((u64)(lref) > CMU_FC_TCR_FREF_MAX) {
+		pr_err("LREF (0x%" PRIx64 ") > max value\n", (u64)(lref));
+		return -EINVAL;
+	}
+
+	conf->lref = u32_round(lref);
+	/* Overflow */
+	if ((u64)conf->href < (u64)href) {
+		pr_err("LREF overflow\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static enum fc_result fc_check_frequency(uintptr_t addr,
+					 struct cmu_params *params)
+{
+	/* Disable the module */
+	writel(0x0, CMU_FC_GCR(addr));
+
+	/* Clear FLL & HLL flags */
+	writel(CMU_FC_SR_FLL | CMU_FC_SR_HLL, CMU_FC_SR(addr));
+
+	/* Write params */
+	writel(params->ref_cnt, CMU_FC_RCCR(addr));
+	writel(params->href, CMU_FC_HTCR(addr));
+	writel(params->lref, CMU_FC_LTCR(addr));
+
+	/* Start the frequency check */
+	writel(CMU_FC_GCR_FCE, CMU_FC_GCR(addr));
+
+	while (!(readl(CMU_FC_SR(addr)) & CMU_FC_SR_RS))
+		;
+
+	udelay(params->udelay * 3);
+
+	/* Disable the module */
+	writel(0x0, CMU_FC_GCR(addr));
+
+	return (enum fc_result)(readl(CMU_FC_SR(addr)) & CMU_FC_SR_FLAGS);
+}
+
+static int _get_fc_mon_freq(struct cmu *s32cc_cmu, uintptr_t addr,
+			    struct freq_interval *freq_int, u32 depth)
+{
+	struct cmu_params params;
+	enum fc_result res;
+	double mon_freq;
+	int ret;
+
+	if (depth == 0)
+		return 0;
+
+	mon_freq = (freq_int->min + freq_int->max) / 2;
+
+	/* Assume 0 if the frequency is lower than 10KHz */
+	if (mon_freq < 0.01)
+		return 0;
+
+	ret = get_fc_params(s32cc_cmu->ref_freq, mon_freq,
+			    s32cc_cmu->ref_var, s32cc_cmu->mon_var,
+			    &params);
+	if (ret) {
+		pr_err("Failed to determine CMU_FC parameters for clock: %s\n",
+		       s32cc_cmu->mon_name);
+		return ret;
+	}
+
+	depth--;
+
+	res = fc_check_frequency(addr, &params);
+	switch (res) {
+	case HIGHER:
+		freq_int->min = mon_freq;
+		return _get_fc_mon_freq(s32cc_cmu, addr, freq_int, depth);
+	case LOWER:
+		freq_int->max = mon_freq;
+		return _get_fc_mon_freq(s32cc_cmu, addr, freq_int, depth);
+	default:
+		freq_int->min = mon_freq;
+		freq_int->max = mon_freq;
+		return 0;
+	}
+}
+
+static int get_fc_mon_freq(struct cmu *s32cc_cmu, uintptr_t addr,
+			   struct freq_interval *freq_int)
+{
+	freq_int->min = 0;
+	freq_int->max = MAX_PERIPH_FREQ;
+	return _get_fc_mon_freq(s32cc_cmu, addr, freq_int, MAX_DEPTH);
+}
+
+static double get_max_exp_freq(struct cmu *s32cc_cmu)
+{
+	if (s32cc_cmu->has_exp_range)
+		return s32cc_cmu->exp_range.max;
+
+	return s32cc_cmu->exp_freq;
+}
+
+static int get_fm_mon_freq(struct cmu *s32cc_cmu, uintptr_t addr,
+			   double *mon_freq)
+{
+	struct cmu_fm_params cmu_fm;
+	u32 met_cnt, sr;
+	int ret;
+
+	ret = get_fm_params(s32cc_cmu->ref_freq, get_max_exp_freq(s32cc_cmu),
+			    &cmu_fm);
+	if (ret)
+		return ret;
+
+	/* Disable the module*/
+	writel(0x0, CMU_FM_GCR(addr));
+
+	/* Clear flags */
+	writel(CMU_FM_SR_FMTO | CMU_FM_SR_FMC, CMU_FM_SR(addr));
+
+	/* Sampling period */
+	writel(cmu_fm.ref_cnt, CMU_FM_RCCR(addr));
+	/* Start the measurement */
+	writel(CMU_FM_GCR_FME, CMU_FM_GCR(addr));
+
+	while (readl(CMU_FM_SR(addr)) &
+	       (CMU_FM_SR_FMTO | CMU_FM_SR_FMC))
+		;
+
+	do {
+		sr = readl(CMU_FM_SR(addr));
+		if (sr & CMU_FM_SR_FMTO) {
+			pr_err("Timeout while measuring the frequency of %s\n",
+			       s32cc_cmu->mon_name);
+			return -EINVAL;
+		}
+	} while (!CMU_FM_SR_MET_CNT(sr));
+
+	/* Disable the module*/
+	writel(0x0, CMU_FM_GCR(addr));
+
+	met_cnt = CMU_FM_SR_MET_CNT(sr);
+
+	*mon_freq = (double)met_cnt * s32cc_cmu->ref_freq / cmu_fm.ref_cnt;
+
+	return 0;
+}
+
+static int s32cc_cmu_read(struct udevice *dev, int offset,
+			  void *buf, int size)
+{
+	struct s32cc_cmu *priv = dev_get_priv(dev);
+	struct s32cc_cmu_data *data = priv->data;
+	struct cmu_result *result = buf;
+	struct freq_interval freq_int;
+	struct cmu *s32cc_cmu;
+	double mon_freq = 0;
+	uintptr_t addr;
+
+	debug("%s(dev=%p)\n", __func__, dev);
+
+	if (!size || offset >= data->n_blocks)
+		return 0;
+
+	if (size != sizeof(*result))
+		return -EINVAL;
+
+	s32cc_cmu = &data->cmu_blocks[offset];
+	addr = (uintptr_t)priv->base_addr + s32cc_cmu->offset;
+
+	if (s32cc_cmu->fc) {
+		get_fc_mon_freq(s32cc_cmu, addr, &freq_int);
+	} else {
+		get_fm_mon_freq(s32cc_cmu, addr, &mon_freq);
+		freq_int.min = mon_freq;
+		freq_int.max = mon_freq;
+	}
+
+	strncpy(result->mon_clk_name, s32cc_cmu->mon_name,
+		sizeof(result->mon_clk_name));
+	strncpy(result->ref_clk_name, s32cc_cmu->ref_name,
+		sizeof(result->ref_clk_name));
+
+	result->id = s32cc_cmu->offset >> 5;
+
+	if (s32cc_cmu->has_exp_range) {
+		result->expected.min = s32cc_cmu->exp_range.min;
+		result->expected.max = s32cc_cmu->exp_range.max;
+	} else {
+		result->expected.min = s32cc_cmu->exp_freq;
+		result->expected.max = s32cc_cmu->exp_freq;
+	}
+
+	result->measured = freq_int;
+
+	return size;
+}
+
+static int s32cc_cmu_probe(struct udevice *dev)
+{
+	struct s32cc_cmu *priv = dev_get_priv(dev);
+	int ret;
+
+	debug("%s(dev=%p)\n", __func__, dev);
+
+	priv->base_addr = (void __iomem *)dev_read_addr_ptr(dev);
+	if (!priv->base_addr)
+		return -EINVAL;
+
+	priv->data = (struct s32cc_cmu_data *)dev_get_driver_data(dev);
+
+	ret = clk_get_by_index(dev, 0, &priv->cmu_clk_module);
+	if (ret)
+		return ret;
+
+	ret = clk_enable(&priv->cmu_clk_module);
+	if (ret)
+		return ret;
+
+	ret = clk_get_by_index(dev, 1, &priv->cmu_clk_reg);
+	if (ret)
+		return ret;
+
+	return clk_enable(&priv->cmu_clk_reg);
+}
+
+static struct misc_ops s32cc_cmu_ops = {
+	.read = s32cc_cmu_read,
+};
+
+static const struct udevice_id s32cc_cmu_ids[] = {
+	{ .compatible = "nxp,s32g2-cmu", .data = (ulong)&s32g2_cmu_data },
+	{ .compatible = "nxp,s32g3-cmu", .data = (ulong)&s32g3_cmu_data },
+	{ .compatible = "nxp,s32r45-cmu", .data = (ulong)&s32r45_cmu_data },
+	{ }
+};
+
+U_BOOT_DRIVER(s32_cmu) = {
+	.name		= "s32_cmu",
+	.id		= UCLASS_MISC,
+	.of_match	= s32cc_cmu_ids,
+	.probe		= s32cc_cmu_probe,
+	.ops		= &s32cc_cmu_ops,
+	.priv_auto_alloc_size = sizeof(struct s32cc_cmu),
+};
+
+static u32 u32_get_digits(u32 val)
+{
+	u32 digits = 0;
+
+	if (!val)
+		return 1;
+
+	while (val) {
+		digits++;
+		val /= 10;
+	}
+
+	return digits;
+}
+
+static u32 get_ndigits(double val, u32 precision)
+{
+	u32 val32 = (u32)val;
+	u32 digits = 0;
+
+	digits = u32_get_digits(val32);
+
+	/* Dot */
+	digits++;
+
+	/* Fractional part */
+	precision /= 10;
+	while (precision) {
+		digits++;
+		precision /= 10;
+	}
+
+	return digits;
+}
+
+static void print_double(double val, u32 space, u32 precision)
+{
+	u32 val32 = (u32)val;
+	size_t ndigits;
+	size_t i;
+	u32 frac;
+
+	frac = (u32)((val - (double)val32) * (double)precision);
+
+	ndigits = get_ndigits(val, precision);
+	if (space > ndigits) {
+		for (i = 0; i < space - ndigits; i++)
+			printf(" ");
+	}
+
+	if (precision == 1000)
+		printf("%" PRIu32 ".%03" PRIu32, val32, frac);
+	else if (precision == 100)
+		printf("%" PRIu32 ".%02" PRIu32, val32, frac);
+	else
+		printf("%" PRIu32 ".%01" PRIu32, val32, frac);
+}
+
+static void print_measured_freq(struct cmu_result *result)
+{
+	if (result->measured.min != result->measured.max) {
+		print_double(result->measured.min, 8, 1000);
+		printf(" - ");
+		print_double(result->measured.max, 8, 1000);
+	} else {
+		print_double(result->measured.min, 19, 1000);
+	}
+}
+
+static void print_expected_freq(struct cmu_result *result)
+{
+	if (result->expected.min != result->expected.max) {
+		print_double(result->expected.min, 5, 10);
+		puts(" - ");
+		print_double(result->expected.max, 5, 10);
+	} else {
+		print_double(result->expected.min, 12, 1);
+	}
+}
+
+static int do_verifclk(cmd_tbl_t *cmdtp, int flag, int argc,
+		       char * const argv[])
+{
+	struct cmu_result result;
+	struct udevice *cmu;
+	int i = 0;
+	int ret;
+
+	ret = uclass_get_device_by_driver(UCLASS_MISC,
+					  DM_GET_DRIVER(s32_cmu), &cmu);
+	if (ret)
+		return ret;
+
+	puts(" CMU       | Monitored    | Reference | Expected      |");
+	puts(" Verified\n");
+	puts(" ID        | clock        | clock     | range (MHz)   |");
+	puts(" range (MHz)\n");
+	puts("-----------|--------------|-----------|---------------|");
+	puts("--------------------\n");
+
+	while (misc_read(cmu, i++, &result, sizeof(result)) > 0) {
+		printf("%11d|", result.id);
+		printf(" %12s | ", result.mon_clk_name);
+		printf("%9s | ", result.ref_clk_name);
+		print_expected_freq(&result);
+		puts(" | ");
+		print_measured_freq(&result);
+		putc('\n');
+	}
+
+	return 0;
+}
+
+U_BOOT_CMD(verifclk, CONFIG_SYS_MAXARGS, 1, do_verifclk,
+	   "Verifies clocks frequencies using CMU module",
+	   NULL
+);
diff --git a/drivers/misc/s32cc_cmu.h b/drivers/misc/s32cc_cmu.h
new file mode 100644
index 0000000000..90fcdf92df
--- /dev/null
+++ b/drivers/misc/s32cc_cmu.h
@@ -0,0 +1,129 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright 2021-2022 NXP
+ */
+
+#ifndef __S32_CMU_H
+#define __S32_CMU_H
+
+#include <linux/stringify.h>
+
+#define FIRC_VARIATION			6.0f
+#define FXOSC_VARIATION			0.5f
+#define PERIPH_VARIATION		0.5f
+
+#define FIRC_FREQ			((double)48)
+#define FXOSC_FREQ			((double)40)
+#define SIRC_FREQ			((double)0.032)
+
+#define CMU(ID, REF_CLK, MON_CLK, REF_FRQ, EXP_FRQ, REF_VAR, MON_VAR, FC) \
+{\
+	.offset = 0x20 * (ID),\
+	.ref_clk = (REF_CLK),\
+	.mon_clk = (MON_CLK),\
+	.ref_name = __stringify(REF_CLK),\
+	.mon_name = __stringify(MON_CLK),\
+	.ref_freq = (REF_FRQ),\
+	.has_exp_range = false,\
+	.exp_freq = (EXP_FRQ),\
+	.ref_var = (REF_VAR),\
+	.mon_var = (MON_VAR),\
+	.fc = (FC),\
+}
+
+#define CMU_EXP_RANGE(ID, REF_CLK, MON_CLK, REF_FRQ, EXP_MIN, EXP_MAX,\
+		      REF_VAR, MON_VAR, FC) \
+{\
+	.offset = 0x20 * (ID),\
+	.ref_clk = (REF_CLK),\
+	.mon_clk = (MON_CLK),\
+	.ref_name = __stringify(REF_CLK),\
+	.mon_name = __stringify(MON_CLK),\
+	.ref_freq = (REF_FRQ),\
+	.has_exp_range = true,\
+	.exp_range = { .min = (EXP_MIN), .max = (EXP_MAX) },\
+	.ref_var = (REF_VAR),\
+	.mon_var = (MON_VAR),\
+	.fc = (FC),\
+}
+
+#define FXOSC_PERIPH_CMU_FC(ID, MON, MON_FRQ) \
+	CMU(ID, FXOSC, MON, FXOSC_FREQ, MON_FRQ, \
+			FXOSC_VARIATION, PERIPH_VARIATION, true)
+
+#define FXOSC_PERIPH_CMU_FC_RANGE(ID, MON, MIN_FRQ, MAX_FRQ) \
+	CMU_EXP_RANGE(ID, FXOSC, MON, FXOSC_FREQ, MIN_FRQ, MAX_FRQ, \
+			FXOSC_VARIATION, PERIPH_VARIATION, true)
+
+#define FIRC_PERIPH_CMU_FC(ID, MON, MON_FRQ) \
+	CMU(ID, FIRC, MON, FIRC_FREQ, MON_FRQ, \
+			FIRC_VARIATION, PERIPH_VARIATION, true)
+
+#define FXOSC_PERIPH_CMU_FM(ID, MON, MON_FRQ) \
+	CMU(ID, FXOSC, MON, FXOSC_FREQ, MON_FRQ, \
+			0, 0, false)
+
+#define FIRC_PERIPH_CMU_FM(ID, MON, MON_FRQ) \
+	CMU(ID, FIRC, MON, FIRC_FREQ, MON_FRQ, \
+			0, 0, false)
+
+enum cmu_fc_clk {
+	FIRC,
+	FXOSC,
+	SIRC,
+	XBAR_M7_0,
+	XBAR_M7_1,
+	XBAR_M7_2,
+	XBAR_M7_3,
+	XBAR_DIV3,
+	SERDES_REF,
+	PER,
+	CAN_PE,
+	LIN,
+	QSPI_1X,
+	SDHC,
+	DDR,
+	SPI,
+	A53_CORE,
+	ACCEL3,
+	ACCEL4_0,
+	ACCEL4_1,
+	MIPICSI2_0,
+	MIPICSI2_2,
+	GMAC_TS,
+	GMAC_0_TX,
+	GMAC_0_RX,
+	GMAC_1_TX,
+	GMAC_1_RX,
+	PFE_SYS,
+	PFE_MAC_0_TX,
+	PFE_MAC_0_RX,
+	PFE_MAC_1_TX,
+	PFE_MAC_1_RX,
+	PFE_MAC_2_TX,
+	PFE_MAC_2_RX,
+	FTM_0_REF,
+	FTM_1_REF,
+	FLEXRAY_PE,
+};
+
+struct cmu {
+	uintptr_t offset;
+	enum cmu_fc_clk ref_clk;
+	enum cmu_fc_clk mon_clk;
+	const char *ref_name;
+	const char *mon_name;
+	double ref_freq;
+	bool has_exp_range;
+	union {
+		double exp_freq;
+		struct {
+			double min;
+			double max;
+		} exp_range;
+	};
+	double ref_var;
+	double mon_var;
+	bool fc;
+};
+#endif
-- 
2.17.1

