From 4283d67a80ff3c4eb65c9b637b003748ddaca6f7 Mon Sep 17 00:00:00 2001
From: Andra-Teodora Ilie <andra.ilie@nxp.com>
Date: Thu, 16 Feb 2023 20:15:48 +0200
Subject: [PATCH 54/54] plat: s32: Add SCMI platform logger

Extend the information logged by the core SCMI logger
with relevant timestamps taken from the metadata
memory region.

Issue: ALB-9436
Upstream-Status: Pending 

Signed-off-by: Andra-Teodora Ilie <andra.ilie@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32/scmi_logger/s32_scmi_logger.c | 93 +++++++++++++++++++
 plat/nxp/s32/s32_common.mk                    |  7 ++
 plat/nxp/s32/s32_scp_scmi.c                   | 12 +++
 plat/nxp/s32/s32g/bl31_sram/bl31_sram.mk      |  3 +-
 4 files changed, 114 insertions(+), 1 deletion(-)
 create mode 100644 drivers/nxp/s32/scmi_logger/s32_scmi_logger.c

diff --git a/drivers/nxp/s32/scmi_logger/s32_scmi_logger.c b/drivers/nxp/s32/scmi_logger/s32_scmi_logger.c
new file mode 100644
index 000000000..1962e6cbe
--- /dev/null
+++ b/drivers/nxp/s32/scmi_logger/s32_scmi_logger.c
@@ -0,0 +1,93 @@
+/*
+ * Copyright 2023 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#include <assert.h>
+#include <errno.h>
+#include <arm/css/scmi/scmi_logger_private.h>
+#include <drivers/nxp/s32/stm/s32_stm.h>
+#include <s32_scmi_metadata.h>
+#include <s32_platform_def.h>
+
+/**
+ * S32CC platform specific information
+ * to be logged:
+ *  - timestamps from the metadata memory region
+ */
+struct scmi_plat_data {
+	uint32_t timestamps[TS_COUNT];
+};
+
+/**
+ * A log entry consists of both general
+ * and platform specific data
+ */
+struct s32_log_entry {
+	struct scmi_log_entry base;
+	struct scmi_plat_data plat_data;
+};
+
+static struct s32_stm timer;
+static struct s32_log_entry scmi_log[SCMI_LOG_MAX_LEN];
+
+static struct scmi_log_entry *s32_get_log_entry(unsigned int index)
+{
+	assert(index < SCMI_LOG_MAX_LEN);
+	return (struct scmi_log_entry *)&scmi_log[index];
+}
+
+static void s32_scmi_log_req_data(struct scmi_log_entry *entry, uintptr_t md_addr)
+{
+	struct s32_log_entry *s32_entry = (struct s32_log_entry *)entry;
+	struct s32_scmi_metadata *md = (struct s32_scmi_metadata *)md_addr;
+	uint32_t timestamp = s32_stm_get_count(&timer);
+
+	if (!s32_entry || !md)
+		return;
+
+	md->timestamps[TS_AGENT_REQ_TX] = timestamp;
+	s32_entry->plat_data.timestamps[TS_AGENT_REQ_TX] = timestamp;
+}
+
+static void s32_scmi_log_rsp_data(struct scmi_log_entry *entry, uintptr_t md_addr)
+{
+	struct s32_log_entry *s32_entry = (struct s32_log_entry *)entry;
+	struct s32_scmi_metadata *md = (struct s32_scmi_metadata *)md_addr;
+	uint32_t timestamp = s32_stm_get_count(&timer);
+
+	if (!s32_entry || !md)
+		return;
+
+	md->timestamps[TS_AGENT_RSP_RX] = timestamp;
+	s32_entry->plat_data.timestamps[TS_PLAT_REQ_RX] = md->timestamps[TS_PLAT_REQ_RX];
+	s32_entry->plat_data.timestamps[TS_PLAT_RSP_TX] = md->timestamps[TS_PLAT_RSP_TX];
+	s32_entry->plat_data.timestamps[TS_AGENT_RSP_RX] = timestamp;
+}
+
+int log_scmi_plat_init(struct scmi_logger *logger)
+{
+	int ret = 0;
+
+	assert(sizeof(struct s32_scmi_metadata) <= S32_SCP_CH_META_SIZE);
+	assert(ARRAY_SIZE(scmi_log) >= PLATFORM_CORE_COUNT);
+
+	if (!logger)
+		return -EINVAL;
+
+	logger->get_entry = s32_get_log_entry;
+	logger->log_req_data = s32_scmi_log_req_data;
+	logger->log_rsp_data = s32_scmi_log_rsp_data;
+
+	ret = s32_stm_init(&timer);
+	if (ret) {
+		ERROR("Failed to initialize STM timer.\n");
+		return ret;
+	}
+
+	if (!s32_stm_is_enabled(&timer))
+		s32_stm_enable(&timer, true);
+
+	return 0;
+}
+
diff --git a/plat/nxp/s32/s32_common.mk b/plat/nxp/s32/s32_common.mk
index da77ab97f..e917f1bda 100644
--- a/plat/nxp/s32/s32_common.mk
+++ b/plat/nxp/s32/s32_common.mk
@@ -42,6 +42,10 @@ $(eval $(call add_define_val,S32CC_USE_SCP,$(S32CC_USE_SCP)))
 S32CC_SCMI_GPIO_FIXUP ?= 0
 $(eval $(call add_define_val,S32CC_SCMI_GPIO_FIXUP,$(S32CC_SCMI_GPIO_FIXUP)))
 
+# Enable SCMI message logging
+SCMI_LOGGER ?= 0
+$(eval $(call add_define_val,SCMI_LOGGER,$(SCMI_LOGGER)))
+
 BL2_AT_EL3		:= 1
 
 PLAT_INCLUDES 	+= \
@@ -77,6 +81,7 @@ PLAT_BL_COMMON_SOURCES += \
 			${S32_PLAT}/s32_irq_mgmt.c \
 			drivers/delay_timer/delay_timer.c \
 			drivers/delay_timer/generic_delay_timer.c \
+			drivers/arm/css/scmi/scmi_logger.c \
 			${S32_DRIVERS}/memory_pool.c \
 			${S32_DRIVERS}/clk/early_clocks.c \
 			${S32_DRIVERS}/clk/enable_clk.c \
@@ -100,6 +105,7 @@ BL2_SOURCES += \
 			${S32_DRIVERS}/io/io_mmc.c \
 			${S32_DRIVERS}/io/io_memmap.c \
 			${S32_DRIVERS}/mmc/s32_mmc.c \
+			${S32_DRIVERS}/scmi_logger/s32_scmi_logger.c \
 			lib/optee/optee_utils.c \
 			${S32_PLAT}/s32_bl2_el3.c \
 			${S32_PLAT}/s32_storage.c \
@@ -120,6 +126,7 @@ BL31_SOURCES += \
 			${S32_DRIVERS}/clk/s32gen1_scmi_clk.c \
 			${S32_DRIVERS}/clk/s32gen1_scmi_ids.c \
 			${S32_DRIVERS}/perf/s32gen1_scmi_perf.c \
+			${S32_DRIVERS}/scmi_logger/s32_scmi_logger.c \
 			plat/common/plat_gicv3.c \
 			plat/common/plat_psci_common.c \
 			${S32_PLAT}/include/plat_macros.S \
diff --git a/plat/nxp/s32/s32_scp_scmi.c b/plat/nxp/s32/s32_scp_scmi.c
index 891aa436a..ab70f5e26 100644
--- a/plat/nxp/s32/s32_scp_scmi.c
+++ b/plat/nxp/s32/s32_scp_scmi.c
@@ -6,6 +6,7 @@
 #include <libc/assert.h>
 #include <common/debug.h>
 #include <drivers/arm/css/scmi.h>
+#include <arm/css/scmi/scmi_logger.h>
 #include <arm/css/scmi/scmi_private.h>
 #include <lib/mmio.h>
 #include <platform.h>
@@ -83,6 +84,11 @@ void mscm_ring_doorbell(struct scmi_channel_plat_info *plat_info)
 	mmio_write_32(reg, 1);
 }
 
+static bool is_scmi_logger_enabled(void)
+{
+	return SCMI_LOGGER;
+}
+
 static uintptr_t get_mb_addr(uint32_t core)
 {
 	return S32_SCP_SCMI_MEM + core * S32_SCP_CH_MEM_SIZE;
@@ -90,6 +96,9 @@ static uintptr_t get_mb_addr(uint32_t core)
 
 static uintptr_t get_md_addr(uint32_t core)
 {
+	if (!is_scmi_logger_enabled())
+		return 0;
+
 	return S32_SCP_SCMI_META_MEM + core * S32_SCP_CH_META_SIZE;
 }
 
@@ -175,6 +184,9 @@ void scp_scmi_init(bool request_irq)
 		};
 	}
 
+	if (is_scmi_logger_enabled())
+		log_scmi_init();
+
 	if (!request_irq)
 		return;
 
diff --git a/plat/nxp/s32/s32g/bl31_sram/bl31_sram.mk b/plat/nxp/s32/s32g/bl31_sram/bl31_sram.mk
index 11c60fb53..45d8139ec 100644
--- a/plat/nxp/s32/s32g/bl31_sram/bl31_sram.mk
+++ b/plat/nxp/s32/s32g/bl31_sram/bl31_sram.mk
@@ -1,5 +1,5 @@
 #
-# Copyright 2020-2022 NXP
+# Copyright 2020-2023 NXP
 #
 # SPDX-License-Identifier: BSD-3-Clause
 #
@@ -14,6 +14,7 @@ BL31SRAM_SOURCES = plat/common/aarch64/platform_up_stack.S \
 		   drivers/arm/css/scmi/scmi_sys_pwr_proto.c \
 		   ${COMMON_DDR_DRV}/ddr_lp.c \
 		   lib/cpus/aarch64/cortex_a53.S \
+		   lib/locks/exclusive/${ARCH}/spinlock.S	\
 		   ${LIBC_SRCS} \
 
 BL31SRAM_ARRAY_NAME ?= bl31sram
-- 
2.25.1

