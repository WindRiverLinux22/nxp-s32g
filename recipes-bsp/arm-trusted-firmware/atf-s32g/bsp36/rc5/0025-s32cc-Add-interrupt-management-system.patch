From f6a39fc09183fc443dd04d084c6f33cdc9d14e4c Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Mon, 28 Nov 2022 14:55:40 +0200
Subject: [PATCH 25/54] s32cc: Add interrupt management system

This adds the necessary support to enable IRQ handling
in ATF. It will be used by MSCM to handle interrupts from
SCP.

Issue: ALB-9425
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32/include/s32_bl_common.h        |  9 ---
 plat/nxp/s32/include/s32_interrupt_mgmt.h   | 22 +++++++
 plat/nxp/s32/include/s32_platform_def.h     |  3 +
 plat/nxp/s32/include/s32_scp_scmi.h         | 25 +++++++
 plat/nxp/s32/s32_bl31.c                     |  2 +
 plat/nxp/s32/s32_bl_common.c                |  1 +
 plat/nxp/s32/s32_common.mk                  |  1 +
 plat/nxp/s32/s32_irq_mgmt.c                 | 72 +++++++++++++++++++++
 plat/nxp/s32/s32_psci.c                     |  1 +
 plat/nxp/s32/s32_scp_early_clocks.c         |  1 +
 plat/nxp/s32/s32_scp_scmi.c                 |  2 +
 plat/nxp/s32/s32_svc.c                      |  1 +
 plat/nxp/s32/s32g/bl31_sram/bl31sram_main.c |  1 +
 plat/nxp/s32/s32g/s32g_bl31.c               |  1 +
 plat/nxp/s32/s32g/s32g_resume.c             |  1 +
 15 files changed, 134 insertions(+), 9 deletions(-)
 create mode 100644 plat/nxp/s32/include/s32_interrupt_mgmt.h
 create mode 100644 plat/nxp/s32/include/s32_scp_scmi.h
 create mode 100644 plat/nxp/s32/s32_irq_mgmt.c

diff --git a/plat/nxp/s32/include/s32_bl_common.h b/plat/nxp/s32/include/s32_bl_common.h
index ae363fdad..a055c36b0 100644
--- a/plat/nxp/s32/include/s32_bl_common.h
+++ b/plat/nxp/s32/include/s32_bl_common.h
@@ -67,15 +67,6 @@ uint32_t get_core_state(uint32_t core, uint32_t mask);
 bool is_last_core(void);
 bool is_cluster0_off(void);
 bool is_cluster1_off(void);
-void scp_scmi_init(void);
-int send_scmi_to_scp(uintptr_t scmi_mem);
-void scp_set_core_reset_addr(uintptr_t addr);
-int scp_get_cpu_state(uint32_t core);
-int scp_cpu_on(uint32_t core);
-int scp_cpu_off(uint32_t core);
-void scp_suspend_platform(void);
-void __dead2 scp_shutdown_platform(void);
-void __dead2 scp_reset_platform(void);
 void __dead2 core_turn_off(void);
 
 struct s32_i2c_driver *s32_add_i2c_module(void *fdt, int fdt_node);
diff --git a/plat/nxp/s32/include/s32_interrupt_mgmt.h b/plat/nxp/s32/include/s32_interrupt_mgmt.h
new file mode 100644
index 000000000..ba678f440
--- /dev/null
+++ b/plat/nxp/s32/include/s32_interrupt_mgmt.h
@@ -0,0 +1,22 @@
+/*
+ * Copyright 2022 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef S32_IRQ_MGMT_H
+#define S32_IRQ_MGMT_H
+
+#include <bl31/interrupt_mgmt.h>
+
+#define MAX_INTR_EL3		128
+
+/*
+ * Register handler to specific GIC entrance
+ * for INTR_TYPE_EL3 type of interrupt
+ */
+int request_intr_type_el3(uint32_t id, interrupt_type_handler_t handler);
+
+void s32cc_el3_interrupt_config(void);
+
+#endif
diff --git a/plat/nxp/s32/include/s32_platform_def.h b/plat/nxp/s32/include/s32_platform_def.h
index ce568fb41..dcf5c0948 100644
--- a/plat/nxp/s32/include/s32_platform_def.h
+++ b/plat/nxp/s32/include/s32_platform_def.h
@@ -86,6 +86,9 @@
 #define PLAT_GICD_BASE		S32GEN1_GIC_BASE
 /* SGI to use for kicking the secondary cores out of wfi */
 #define S32_SECONDARY_WAKE_SGI	15
+/* Used for SCP notifications */
+#define S32CC_MSCM_CORE_0_IRQ	33
+#define S32CC_MAX_IRQ		(S32CC_MSCM_CORE_0_IRQ + 1)
 
 #define S32_SRAM_BASE		0x34000000
 #define S32_SRAM_END		(S32_SRAM_BASE + S32_SRAM_SIZE)
diff --git a/plat/nxp/s32/include/s32_scp_scmi.h b/plat/nxp/s32/include/s32_scp_scmi.h
new file mode 100644
index 000000000..ab3bf7bd4
--- /dev/null
+++ b/plat/nxp/s32/include/s32_scp_scmi.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright 2022 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#ifndef S32_SCP_SCMI_H
+#define S32_SCP_SCMI_H
+
+#define SCMI_PROTOCOL_ID_GPIO	(0x81u)
+
+typedef int (*scmi_msg_callback_t)(void *payload);
+
+void scp_scmi_init(void);
+int send_scmi_to_scp(uintptr_t scmi_mem);
+void scp_set_core_reset_addr(uintptr_t addr);
+int scp_get_cpu_state(uint32_t core);
+int scp_cpu_on(uint32_t core);
+int scp_cpu_off(uint32_t core);
+void scp_suspend_platform(void);
+void __dead2 scp_shutdown_platform(void);
+void __dead2 scp_reset_platform(void);
+
+int register_scmi_internal_msg_handler(uint32_t protocol, uint32_t msg_id,
+				       scmi_msg_callback_t callback);
+#endif
diff --git a/plat/nxp/s32/s32_bl31.c b/plat/nxp/s32/s32_bl31.c
index b1d89fe6f..de12c7476 100644
--- a/plat/nxp/s32/s32_bl31.c
+++ b/plat/nxp/s32/s32_bl31.c
@@ -21,6 +21,8 @@
 #include "s32_mc_rgm.h"
 #include "s32_ncore.h"
 #include "s32_sramc.h"
+#include "s32_interrupt_mgmt.h"
+#include "s32_scp_scmi.h"
 
 #define MMU_ROUND_UP_TO_4K(x)	\
 	(((x) & ~0xfffU) == (x) ? (x) : ((x) & ~0xfffU) + 0x1000U)
diff --git a/plat/nxp/s32/s32_bl_common.c b/plat/nxp/s32/s32_bl_common.c
index 09d0eb7dc..444170fa4 100644
--- a/plat/nxp/s32/s32_bl_common.c
+++ b/plat/nxp/s32/s32_bl_common.c
@@ -18,6 +18,7 @@
 #include "s32_dt.h"
 #include "s32_ncore.h"
 #include "s32_pinctrl.h"
+#include "s32_scp_scmi.h"
 
 struct s32_i2c_driver i2c_drivers[S32_MAX_I2C_MODULES];
 size_t i2c_fill_level;
diff --git a/plat/nxp/s32/s32_common.mk b/plat/nxp/s32/s32_common.mk
index da071d666..c30851c27 100644
--- a/plat/nxp/s32/s32_common.mk
+++ b/plat/nxp/s32/s32_common.mk
@@ -70,6 +70,7 @@ PLAT_BL_COMMON_SOURCES += \
 			${S32_PLAT}/s32_pinctrl.c \
 			${S32_PLAT}/s32_pmic.c \
 			${S32_PLAT}/core_turn_off.c \
+			${S32_PLAT}/s32_irq_mgmt.c \
 			drivers/delay_timer/delay_timer.c \
 			drivers/delay_timer/generic_delay_timer.c \
 			${S32_DRIVERS}/memory_pool.c \
diff --git a/plat/nxp/s32/s32_irq_mgmt.c b/plat/nxp/s32/s32_irq_mgmt.c
new file mode 100644
index 000000000..fe98c1ba1
--- /dev/null
+++ b/plat/nxp/s32/s32_irq_mgmt.c
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2022 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ * This is based on plat/nxp/common/setup/ls_interrupt_mgmt.c
+ */
+#include <bl31/interrupt_mgmt.h>
+#include <common/debug.h>
+#include <plat/common/platform.h>
+
+#include <platform_def.h>
+#include <assert.h>
+
+static interrupt_type_handler_t type_el3_interrupt_table[S32CC_MAX_IRQ];
+
+int request_intr_type_el3(uint32_t id, interrupt_type_handler_t handler)
+{
+	/* Validate 'handler' and 'id' parameters */
+	if (!handler || id >= ARRAY_SIZE(type_el3_interrupt_table)) {
+		return -EINVAL;
+	}
+
+	/* Check if a handler has already been registered */
+	if (type_el3_interrupt_table[id] != NULL) {
+		return -EALREADY;
+	}
+
+	type_el3_interrupt_table[id] = handler;
+
+	return 0;
+}
+
+static uint64_t s32cc_el3_irq_handler(uint32_t id, uint32_t flags,
+				      void *handle, void *cookie)
+{
+	uint32_t intr_id;
+	interrupt_type_handler_t handler;
+
+	intr_id = plat_ic_acknowledge_interrupt();
+	intr_id = plat_ic_get_interrupt_id(intr_id);
+
+	if (intr_id >= ARRAY_SIZE(type_el3_interrupt_table)) {
+		goto exit;
+	}
+
+	handler = type_el3_interrupt_table[intr_id];
+	if (handler != NULL) {
+		handler(intr_id, flags, handle, cookie);
+	}
+
+exit:
+	/*
+	 * Mark this interrupt as complete to avoid a interrupt storm.
+	 */
+	plat_ic_end_of_interrupt(intr_id);
+
+	return 0U;
+}
+
+void s32cc_el3_interrupt_config(void)
+{
+	uint64_t flags = 0U;
+	uint64_t rc;
+
+	set_interrupt_rm_flag(flags, NON_SECURE | SECURE);
+	rc = register_interrupt_type_handler(INTR_TYPE_EL3,
+					     s32cc_el3_irq_handler, flags);
+	if (rc != 0U) {
+		panic();
+	}
+}
diff --git a/plat/nxp/s32/s32_psci.c b/plat/nxp/s32/s32_psci.c
index a38635bf4..1ea4f9089 100644
--- a/plat/nxp/s32/s32_psci.c
+++ b/plat/nxp/s32/s32_psci.c
@@ -23,6 +23,7 @@
 #include <common/debug.h>	/* printing macros such as INFO() */
 #include <drivers/arm/gicv3.h>
 #include <plat/common/platform.h>
+#include <s32_scp_scmi.h>
 
 /* See firmware-design, psci-lib-integration-guide for details */
 /* Used by plat_secondary_cold_boot_setup */
diff --git a/plat/nxp/s32/s32_scp_early_clocks.c b/plat/nxp/s32/s32_scp_early_clocks.c
index 789c42256..5b6d733e5 100644
--- a/plat/nxp/s32/s32_scp_early_clocks.c
+++ b/plat/nxp/s32/s32_scp_early_clocks.c
@@ -6,6 +6,7 @@
 #include <s32_bl_common.h>
 #include <s32_clocks.h>
 #include <s32_pinctrl.h>
+#include <s32_scp_scmi.h>
 
 #include <libc/assert.h>
 #include <drivers/arm/css/scmi.h>
diff --git a/plat/nxp/s32/s32_scp_scmi.c b/plat/nxp/s32/s32_scp_scmi.c
index 3cdbae88d..efa6110dc 100644
--- a/plat/nxp/s32/s32_scp_scmi.c
+++ b/plat/nxp/s32/s32_scp_scmi.c
@@ -14,6 +14,8 @@
 #include <inttypes.h>
 #include <s32_bl_common.h>
 #include <dt-bindings/power/s32gen1-scmi-pd.h>
+#include <s32_interrupt_mgmt.h>
+#include <s32_scp_scmi.h>
 
 static scmi_channel_t scmi_channels[PLATFORM_CORE_COUNT];
 static scmi_channel_plat_info_t s32_scmi_plat_info[PLATFORM_CORE_COUNT];
diff --git a/plat/nxp/s32/s32_svc.c b/plat/nxp/s32/s32_svc.c
index fb68f782b..3538fa963 100644
--- a/plat/nxp/s32/s32_svc.c
+++ b/plat/nxp/s32/s32_svc.c
@@ -9,6 +9,7 @@
 #include <drivers/scmi.h>
 #include <scmi-msg/common.h>
 #include <s32_bl_common.h>
+#include <s32_scp_scmi.h>
 
 #define S32_SCMI_ID			0xc20000feU
 
diff --git a/plat/nxp/s32/s32g/bl31_sram/bl31sram_main.c b/plat/nxp/s32/s32g/bl31_sram/bl31sram_main.c
index 37f46dceb..07ab5843a 100644
--- a/plat/nxp/s32/s32g/bl31_sram/bl31sram_main.c
+++ b/plat/nxp/s32/s32g/bl31_sram/bl31sram_main.c
@@ -12,6 +12,7 @@
 #include "s32g_mc_me.h"
 #include "s32_bl_common.h"
 #include <lib/bakery_lock.h>
+#include <s32_scp_scmi.h>
 
 /**
  * Dummy implementation for lock get and release operations.
diff --git a/plat/nxp/s32/s32g/s32g_bl31.c b/plat/nxp/s32/s32g/s32g_bl31.c
index d71a3bec6..f2244ae42 100644
--- a/plat/nxp/s32/s32g/s32g_bl31.c
+++ b/plat/nxp/s32/s32g/s32g_bl31.c
@@ -26,6 +26,7 @@
 #include <s32g_bl_common.h>
 #include <clk/clk.h>
 #include <s32_lowlevel.h>
+#include <s32_scp_scmi.h>
 
 static void dt_init_wkpu(void)
 {
diff --git a/plat/nxp/s32/s32g/s32g_resume.c b/plat/nxp/s32/s32g/s32g_resume.c
index d9242d483..e6a0789fd 100644
--- a/plat/nxp/s32/s32g/s32g_resume.c
+++ b/plat/nxp/s32/s32g/s32g_resume.c
@@ -8,6 +8,7 @@
 #include <s32_linflexuart.h>
 #include <s32_lowlevel.h>
 #include <s32gen1-wkpu.h>
+#include <s32_scp_scmi.h>
 
 void s32g_resume_entrypoint(void)
 {
-- 
2.25.1

