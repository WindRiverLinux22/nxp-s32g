From 29e4124b0757e938e4fb1851756541054c95bb28 Mon Sep 17 00:00:00 2001
From: Zhantao Tang <zhantao.tang@windriver.com>
Date: Wed, 28 Dec 2022 17:32:26 +0800
Subject: [PATCH] Revert "secboot: add support for userspace secboot"

This reverts commit 4f6132d25c986c437dc9eb89fa8489ea5b97a05b.

Because this patch will cause boot failure when HSE enabled, so revert it
and fix the issue later.

Upstream-Status: Pending

Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32/s32_bl2_el3.c | 29 +++++++++++++++++++++++++++++
 plat/nxp/s32/s32_common.mk | 13 +++++++++++++
 2 files changed, 42 insertions(+)

diff --git a/plat/nxp/s32/s32_bl2_el3.c b/plat/nxp/s32/s32_bl2_el3.c
index 8e8896d85..f9915112e 100644
--- a/plat/nxp/s32/s32_bl2_el3.c
+++ b/plat/nxp/s32/s32_bl2_el3.c
@@ -357,6 +357,31 @@ static void get_fip_images_ranges(uintptr_t *images_base, size_t *images_size)
 	*images_size = MMU_ROUND_UP_TO_PAGE(fip_end - *images_base);
 }
 
+#ifdef HSE_SUPPORT
+static size_t get_fip_size(void)
+{
+   static const uuid_t uuid_null = { {0} };
+   uintptr_t fip_hdr_start, fip_hdr_end;
+   fip_toc_header_t *toc_header;
+   fip_toc_entry_t *toc_entry;
+
+   fip_hdr_start = get_fip_hdr_base();
+   fip_hdr_end = fip_hdr_start + fip_hdr_size;
+
+   toc_header = (fip_toc_header_t *)fip_hdr_start;
+   toc_entry = (fip_toc_entry_t *)(toc_header + 1);
+
+   while ((uintptr_t)toc_entry < fip_hdr_end) {
+       if (!compare_uuids(&toc_entry->uuid, &uuid_null))
+           break;
+
+       toc_entry++;
+   }
+
+   return (size_t)toc_entry->offset_address;
+}
+#endif
+
 int s32_el3_mmu_fixup(const uintptr_t *filters, size_t n_filters)
 {
 	const unsigned long code_start = BL_CODE_BASE;
@@ -394,7 +419,11 @@ int s32_el3_mmu_fixup(const uintptr_t *filters, size_t n_filters)
 		{
 			.base_pa = get_fip_hdr_page(),
 			.base_va = get_fip_hdr_page(),
+#ifdef HSE_SUPPORT
+            .size = MMU_ROUND_UP_TO_PAGE(get_fip_size()),
+#else
 			.size = BL2_BASE - get_fip_hdr_page(),
+#endif
 			.attr = MT_RO | MT_MEMORY | MT_SECURE,
 		},
 		/* Additional images in case the FIP is loaded into memory */
diff --git a/plat/nxp/s32/s32_common.mk b/plat/nxp/s32/s32_common.mk
index da071d666..c98cf759e 100644
--- a/plat/nxp/s32/s32_common.mk
+++ b/plat/nxp/s32/s32_common.mk
@@ -389,6 +389,13 @@ ${BL2_W_DTB}: bl2 dtbs ${DTB_SIZE_FILE} ${BL2_PADDING}
 	@${DD} if=${BL2_BIN} of=$@ seek=$$(printf "%d" ${DTB_SIZE}) oflag=seek_bytes
 	@${DD} if=${BL2_PADDING} conv=notrunc >> $@
 
+ifneq (${HSE_SUPPORT},)
+    ${Q}PADDINGHEX=$$($(call hexfilesize,${BUILD_PLAT}/bl2.bin)); \
+    PADDING=$$(printf "%d" $${PADDINGHEX}); \
+    SEEKSIZE=$$(echo "$$(printf '%d' ${DTB_SIZE}) + $${PADDING}" | bc); \
+    dd if=/dev/zero of=$@ seek=$$SEEKSIZE bs=1 count=$$PADDING
+endif
+
 ${BOOT_INFO_SRC}: ${FIP_MMC_OFFSET_FILE} ${FIP_EMMC_OFFSET_FILE} ${FIP_QSPI_OFFSET_FILE} ${FIP_MEMORY_OFFSET_FILE} ${FIP_HDR_SIZE_FILE} ${DTB_SIZE_FILE}
 	${ECHO} "  CREATE  $@"
 	${Q}echo "const unsigned long fip_mmc_offset = $$(cat ${FIP_MMC_OFFSET_FILE});" > ${BOOT_INFO_SRC}
@@ -405,10 +412,16 @@ ${BL2_W_DTB_SIZE_FILE}: ${BL2_W_DTB}
 ${MKIMAGE_FIP_CONF_FILE}: ${BL2_W_DTB_SIZE_FILE} ${FIP_HDR_SIZE_FILE} add_to_fip FORCE
 	${ECHO} "  CREATE  $@"
 	${Q}cp -f ${MKIMAGE_CFG} $@
+ifneq (${HSE_SUPPORT},)
+	${Q}ACTUAL_FIP_SIZE=$$($(call hexfilesize,${BUILD_PLAT}/${FIP_NAME})); \
+	T_SIZE=$$(printf "0x%x" $${ACTUAL_FIP_SIZE}); \
+	echo "DATA_FILE SIZE $$T_SIZE" >> $@
+else
 	${Q}BL2_W_DTB_SIZE=$$(cat ${BL2_W_DTB_SIZE_FILE}); \
 	HDR_SIZE=$$(cat ${FIP_HDR_SIZE_FILE}); \
 	T_SIZE=0x$$($(call hexbc, $${BL2_W_DTB_SIZE}, +, $${HDR_SIZE})); \
 	echo "DATA_FILE SIZE $$T_SIZE" >> $@
+endif
 
 FIP_ALIGN := 16
 all: add_to_fip
-- 
2.25.1

