From a962a3315e55bbeae157b762dd19aa1ca7a9dbb0 Mon Sep 17 00:00:00 2001
From: Andrei Stefanescu <andrei.stefanescu@nxp.com>
Date: Tue, 5 Apr 2022 12:17:56 +0300
Subject: [PATCH] scmi: s32: fix CLOCK_GET_ATTRIBUTES response

The response would not correctly return the enabled bit for some clocks.
This commit removes the enabled member from the `struct s32gen1_scmi_clk`
and uses the `clk_states` instead. This means that the message will
return if a clock is enabled for a given agent, not if it is physically
enabled.

Issue: ALB-8770

Upstream-Status: Pending 

Signed-off-by: Andrei Stefanescu <andrei.stefanescu@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32/clk/s32g_scmi_ids.c           | 12 +---
 drivers/nxp/s32/clk/s32gen1_scmi_clk.c        |  7 +--
 drivers/nxp/s32/clk/s32gen1_scmi_ids.c        | 15 +----
 drivers/nxp/s32/clk/s32r_scmi_ids.c           | 10 ----
 .../drivers/nxp/s32/clk/s32gen1_scmi_clk.h    |  6 +-
 plat/nxp/s32/s32_scmi_clk.c                   | 58 ++++++++++++++-----
 6 files changed, 48 insertions(+), 60 deletions(-)

diff --git a/drivers/nxp/s32/clk/s32g_scmi_ids.c b/drivers/nxp/s32/clk/s32g_scmi_ids.c
index eec6b4f41..46aee0798 100644
--- a/drivers/nxp/s32/clk/s32g_scmi_ids.c
+++ b/drivers/nxp/s32/clk/s32g_scmi_ids.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-3-Clause
 /*
- * Copyright 2020-2021 NXP
+ * Copyright 2020-2022 NXP
  */
 #include <clk/s32gen1_clk_funcs.h>
 #include <clk/s32gen1_scmi_clk.h>
@@ -334,8 +334,6 @@ int plat_compound_clk_enable(struct clk *clk, int enable)
 		return ret;
 	}
 
-	s32g_scmi_clk[INDEX(clk_id)].enabled = enable;
-
 	return 0;
 }
 
@@ -407,14 +405,6 @@ const char *plat_scmi_clk_get_name(uint32_t scmi_clk_id)
 	return s32g_scmi_clk[INDEX(scmi_clk_id)].name;
 }
 
-bool plat_scmi_clk_is_enabled(uint32_t scmi_clk_id)
-{
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32g_scmi_clk))
-		return false;
-
-	return s32g_scmi_clk[INDEX(scmi_clk_id)].enabled;
-}
-
 int plat_scmi_clk_get_rates(struct clk *clk, unsigned long *rates,
 			    size_t *nrates)
 {
diff --git a/drivers/nxp/s32/clk/s32gen1_scmi_clk.c b/drivers/nxp/s32/clk/s32gen1_scmi_clk.c
index 142a02ca2..29d6d7c61 100644
--- a/drivers/nxp/s32/clk/s32gen1_scmi_clk.c
+++ b/drivers/nxp/s32/clk/s32gen1_scmi_clk.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-3-Clause
 /*
- * Copyright 2020-2021 NXP
+ * Copyright 2020-2022 NXP
  */
 #include <clk/s32gen1_clk_funcs.h>
 #include <clk/s32gen1_scmi_clk.h>
@@ -131,11 +131,6 @@ const char *s32gen1_scmi_clk_get_name(uint32_t scmi_clk_id)
 	return cc_scmi_clk_get_name(scmi_clk_id);
 }
 
-bool s32gen1_scmi_clk_is_enabled(uint32_t scmi_clk_id)
-{
-	return cc_scmi_clk_is_enabled(scmi_clk_id);
-}
-
 int s32gen1_scmi_clk_get_rates(struct clk *clk, unsigned long *rates,
 			       size_t *nrates)
 {
diff --git a/drivers/nxp/s32/clk/s32gen1_scmi_ids.c b/drivers/nxp/s32/clk/s32gen1_scmi_ids.c
index 19a0b5767..e5d8bb8a5 100644
--- a/drivers/nxp/s32/clk/s32gen1_scmi_ids.c
+++ b/drivers/nxp/s32/clk/s32gen1_scmi_ids.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-3-Clause
 /*
- * Copyright 2020-2021 NXP
+ * Copyright 2020-2022 NXP
  */
 #include <clk/s32gen1_clk_funcs.h>
 #include <clk/s32gen1_scmi_clk.h>
@@ -386,8 +386,6 @@ int cc_compound_clk_enable(struct clk *clk, int enable)
 		return ret;
 	}
 
-	cc_scmi_clk[INDEX(clk_id)].enabled = enable;
-
 	return 0;
 }
 
@@ -434,17 +432,6 @@ const char *cc_scmi_clk_get_name(uint32_t scmi_clk_id)
 	return cc_scmi_clk[INDEX(scmi_clk_id)].name;
 }
 
-bool cc_scmi_clk_is_enabled(uint32_t scmi_clk_id)
-{
-	if (scmi_clk_id < S32GEN1_SCMI_CLK_BASE_ID)
-		return false;
-
-	if (scmi_clk_id >= S32GEN1_SCMI_PLAT_CLK_BASE_ID)
-		return plat_scmi_clk_is_enabled(scmi_clk_id);
-
-	return cc_scmi_clk[INDEX(scmi_clk_id)].enabled;
-}
-
 int cc_scmi_clk_get_rates(struct clk *clk, unsigned long *rates,
 			  size_t *nrates)
 {
diff --git a/drivers/nxp/s32/clk/s32r_scmi_ids.c b/drivers/nxp/s32/clk/s32r_scmi_ids.c
index 45c204cbf..2f504aea8 100644
--- a/drivers/nxp/s32/clk/s32r_scmi_ids.c
+++ b/drivers/nxp/s32/clk/s32r_scmi_ids.c
@@ -215,8 +215,6 @@ int plat_compound_clk_enable(struct clk *clk, int enable)
 		return ret;
 	}
 
-	s32r45_scmi_clk[INDEX(clk_id)].enabled = enable;
-
 	return 0;
 }
 
@@ -288,14 +286,6 @@ const char *plat_scmi_clk_get_name(uint32_t scmi_clk_id)
 	return s32r45_scmi_clk[INDEX(scmi_clk_id)].name;
 }
 
-bool plat_scmi_clk_is_enabled(uint32_t scmi_clk_id)
-{
-	if (INDEX(scmi_clk_id) >= ARRAY_SIZE(s32r45_scmi_clk))
-		return false;
-
-	return s32r45_scmi_clk[INDEX(scmi_clk_id)].enabled;
-}
-
 int plat_scmi_clk_get_rates(struct clk *clk, unsigned long *rates,
 			    size_t *nrates)
 {
diff --git a/include/drivers/nxp/s32/clk/s32gen1_scmi_clk.h b/include/drivers/nxp/s32/clk/s32gen1_scmi_clk.h
index e860d3d46..992a56a20 100644
--- a/include/drivers/nxp/s32/clk/s32gen1_scmi_clk.h
+++ b/include/drivers/nxp/s32/clk/s32gen1_scmi_clk.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: BSD-3-Clause */
 /*
- * Copyright 2020-2021 NXP
+ * Copyright 2020-2022 NXP
  */
 #ifndef S32GEN1_SCMI_CLK_H
 #define S32GEN1_SCMI_CLK_H
@@ -17,7 +17,6 @@
 struct s32gen1_scmi_clk {
 	uint32_t plat_id;
 	const char *name;
-	bool enabled;
 };
 
 int cc_scmi_id2clk(uint32_t scmi_clk_id, uint32_t *clk_id);
@@ -28,7 +27,6 @@ int cc_compound_clk_enable(struct clk *clk, int enable);
 int cc_set_mux_parent(struct clk *clk, uint32_t mux_id, uint32_t mux_source);
 uint32_t cc_get_nclocks(void);
 const char *cc_scmi_clk_get_name(uint32_t scmi_clk_id);
-bool cc_scmi_clk_is_enabled(uint32_t scmi_clk_id);
 int cc_scmi_clk_get_rates(struct clk *clk, unsigned long *rates,
 			  size_t *nrates);
 unsigned long cc_scmi_clk_set_rate(struct clk *clk, unsigned long rate);
@@ -41,7 +39,6 @@ int plat_compound_clk_enable(struct clk *clk, int enable);
 int plat_compound_clk_set_parents(struct clk *clk);
 uint32_t plat_get_nclocks(void);
 const char *plat_scmi_clk_get_name(uint32_t scmi_clk_id);
-bool plat_scmi_clk_is_enabled(uint32_t scmi_clk_id);
 int plat_scmi_clk_get_rates(struct clk *clk, unsigned long *rates,
 			    size_t *nrates);
 unsigned long plat_scmi_clk_set_rate(struct clk *clk, unsigned long rate);
@@ -53,7 +50,6 @@ int s32gen1_scmi_set_parent(struct clk *clk, struct clk *parent);
 int s32gen1_scmi_enable(struct clk *clk, int enable);
 uint32_t s32gen1_scmi_nclocks(void);
 const char *s32gen1_scmi_clk_get_name(uint32_t scmi_clk_id);
-bool s32gen1_scmi_clk_is_enabled(uint32_t scmi_clk_id);
 int s32gen1_scmi_clk_get_rates(struct clk *clk, unsigned long *rates,
 			       size_t *nrates);
 unsigned long s32gen1_scmi_clk_get_rate(struct clk *clk);
diff --git a/plat/nxp/s32/s32_scmi_clk.c b/plat/nxp/s32/s32_scmi_clk.c
index afbdfa2d4..ea7d02f69 100644
--- a/plat/nxp/s32/s32_scmi_clk.c
+++ b/plat/nxp/s32/s32_scmi_clk.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020-2021 NXP
+ * Copyright 2020-2022 NXP
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
@@ -22,25 +22,29 @@ static uint8_t clk_states[S32GEN1_CLK_MAX_AGENTS][S32GEN1_SCMI_CLK_MAX_ID];
 static bool is_agent_valid(unsigned int agent_id)
 {
 	if (agent_id >= ARRAY_SIZE(clk_states)) {
-		ERROR("Unable to register agent %d due to %s size\n",
-		      agent_id, __STRING(S32GEN1_CLK_MAX_AGENTS));
+		ERROR("Agent %d is invalid!\n", agent_id);
 		return false;
 	}
 
 	return true;
 }
 
-static bool valid_agent_clk(unsigned int agent_id, unsigned int clk_id,
-			    bool enable)
+static bool are_agent_clk_valid(unsigned int agent_id, unsigned int clk_id)
 {
 	if (!is_agent_valid(agent_id))
 		return false;
 
-	if (clk_id >= ARRAY_SIZE(clk_states[0])) {
-		ERROR("Unable to register clock %d due to %s size\n",
-		      clk_id, __STRING(S32GEN1_SCMI_CLK_MAX_ID));
+	if (clk_id >= ARRAY_SIZE(clk_states[0]))
+		return false;
+
+	return true;
+}
+
+static bool can_set_clk_state(unsigned int agent_id, unsigned int clk_id,
+			      bool enable)
+{
+	if (!are_agent_clk_valid(agent_id, clk_id))
 		return false;
-	}
 
 	if (!enable && !clk_states[agent_id][clk_id]) {
 		ERROR("Trying to disable a disabled clock %s\n",
@@ -57,6 +61,11 @@ static bool valid_agent_clk(unsigned int agent_id, unsigned int clk_id,
 	return true;
 }
 
+static bool is_clk_enabled(unsigned int agent_id, unsigned int clk_id)
+{
+	return clk_states[agent_id][clk_id] > 0;
+}
+
 int32_t plat_scmi_clock_agent_reset(unsigned int agent_id)
 {
 	size_t i, j;
@@ -84,14 +93,20 @@ static void update_clk_refcnt(unsigned int agent_id, unsigned int clk_id,
 		clk_states[agent_id][clk_id]++;
 }
 
-size_t plat_scmi_clock_count(unsigned int agent_id __unused)
+size_t plat_scmi_clock_count(unsigned int agent_id)
 {
+	if (!is_agent_valid(agent_id))
+		return 0;
+
 	return s32gen1_scmi_nclocks();
 }
 
 const char *plat_scmi_clock_get_name(unsigned int agent_id,
 				     unsigned int scmi_id)
 {
+	if (!are_agent_clk_valid(agent_id, scmi_id))
+		return NULL;
+
 	return s32gen1_scmi_clk_get_name(scmi_id);
 }
 
@@ -102,6 +117,9 @@ int32_t plat_scmi_clock_rates_array(unsigned int agent_id, unsigned int scmi_id,
 	struct clk clk;
 	int ret;
 
+	if (!are_agent_clk_valid(agent_id, scmi_id))
+		return SCMI_INVALID_PARAMETERS;
+
 	*nb_elts = 2;
 
 	if (rates == NULL)
@@ -131,6 +149,9 @@ unsigned long plat_scmi_clock_get_rate(unsigned int agent_id,
 	struct clk_driver *drv;
 	struct clk clk;
 
+	if (!are_agent_clk_valid(agent_id, scmi_id))
+		return 0;
+
 	drv = get_clk_driver_by_name(S32GEN1_CLK_DRV_NAME);
 	clk.drv = drv;
 	clk.id = scmi_id;
@@ -145,8 +166,11 @@ int32_t plat_scmi_clock_set_rate(unsigned int agent_id, unsigned int scmi_id,
 	struct clk clk;
 	int ret;
 
+	if (!are_agent_clk_valid(agent_id, scmi_id))
+		return SCMI_INVALID_PARAMETERS;
+
 	/* Already running at the requested frequency */
-	if (s32gen1_scmi_clk_is_enabled(scmi_id) &&
+	if (is_clk_enabled(agent_id, scmi_id) &&
 	    plat_scmi_clock_get_rate(agent_id, scmi_id) == rate)
 		return SCMI_SUCCESS;
 
@@ -158,7 +182,7 @@ int32_t plat_scmi_clock_set_rate(unsigned int agent_id, unsigned int scmi_id,
 	 * Limitation: The rate of a clock cannot be
 	 * changed once it's enabled.
 	 */
-	if (s32gen1_scmi_clk_is_enabled(scmi_id)) {
+	if (is_clk_enabled(agent_id, scmi_id)) {
 		/**
 		 * Best effort. It will only succeed if the
 		 * rate change is limited to a single divider.
@@ -176,7 +200,10 @@ int32_t plat_scmi_clock_set_rate(unsigned int agent_id, unsigned int scmi_id,
 
 int32_t plat_scmi_clock_get_state(unsigned int agent_id, unsigned int scmi_id)
 {
-	if (s32gen1_scmi_clk_is_enabled(scmi_id))
+	if (!are_agent_clk_valid(agent_id, scmi_id))
+		return SCMI_INVALID_PARAMETERS;
+
+	if (is_clk_enabled(agent_id, scmi_id))
 		return 1;
 
 	return 0;
@@ -189,11 +216,14 @@ int32_t plat_scmi_clock_set_state(unsigned int agent_id, unsigned int scmi_id,
 	struct clk clk;
 	int ret;
 
+	if (!are_agent_clk_valid(agent_id, scmi_id))
+		return SCMI_INVALID_PARAMETERS;
+
 	drv = get_clk_driver_by_name(S32GEN1_CLK_DRV_NAME);
 	clk.drv = drv;
 	clk.id = scmi_id;
 
-	if (!valid_agent_clk(agent_id, scmi_id, enable_not_disable))
+	if (!can_set_clk_state(agent_id, scmi_id, enable_not_disable))
 		return SCMI_INVALID_PARAMETERS;
 
 	ret = s32gen1_scmi_enable(&clk, enable_not_disable);
-- 
2.17.1

