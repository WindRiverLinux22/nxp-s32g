From 02558c3bb78cca6a40633f32323bd18152494e33 Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Wed, 28 Sep 2022 15:37:06 +0300
Subject: [PATCH 16/30] s32cc: Initialize SCP SCMI layer

ATF will act as a SCMI proxy in case S32CC_USE_SCP=1 is added
to compilation line. All SCMI calls coming through SMCC interface
will be forwarded to SCP server which should be running on M7 core.

Issue: ALB-9298
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32/include/s32_bl_common.h          |  6 +++
 plat/nxp/s32/include/s32_platform_def.h       |  6 +++
 plat/nxp/s32/s32_bl31.c                       |  9 ++++
 plat/nxp/s32/s32_common.mk                    |  5 ++
 plat/nxp/s32/s32_scp_scmi.c                   | 54 +++++++++++++++++++
 plat/nxp/s32/s32g/include/s32g_platform_def.h |  2 +-
 .../s32g/s32g2/include/s32g2_platform_def.h   |  2 +
 .../s32g/s32g3/include/s32g3_platform_def.h   |  2 +
 plat/nxp/s32/s32r/include/s32r_platform_def.h |  4 +-
 9 files changed, 88 insertions(+), 2 deletions(-)
 create mode 100644 plat/nxp/s32/s32_scp_scmi.c

diff --git a/plat/nxp/s32/include/s32_bl_common.h b/plat/nxp/s32/include/s32_bl_common.h
index c22a77a61..e711cd1be 100644
--- a/plat/nxp/s32/include/s32_bl_common.h
+++ b/plat/nxp/s32/include/s32_bl_common.h
@@ -53,6 +53,7 @@ void update_core_state(uint32_t core, uint32_t state);
 bool is_last_core(void);
 bool is_cluster0_off(void);
 bool is_cluster1_off(void);
+void scp_scmi_init(void);
 
 struct s32_i2c_driver *s32_add_i2c_module(void *fdt, int fdt_node);
 
@@ -71,4 +72,9 @@ static inline uintptr_t get_fip_hdr_base(void)
 	return get_bl2_dtb_base() - fip_hdr_size;
 }
 
+static inline bool is_scp_used(void)
+{
+	return S32CC_USE_SCP;
+}
+
 #endif /* S32_BL_COMMON_H */
diff --git a/plat/nxp/s32/include/s32_platform_def.h b/plat/nxp/s32/include/s32_platform_def.h
index 415a5f53e..c88c77c5e 100644
--- a/plat/nxp/s32/include/s32_platform_def.h
+++ b/plat/nxp/s32/include/s32_platform_def.h
@@ -180,5 +180,11 @@
 #define USDHC_BASE_ADDR		(0x402f0000ull)
 #define USDHC_SIZE		(0x160)
 
+#define MSCM_BASE_ADDR		(0x40198000U)
+#define MSCM_SIZE		(0xfa0u)
+
+#define SCMI_PAYLOAD_BASE	(0x34000000U)
+#define SCMI_PAYLOAD_SIZE	(128)
+
 #endif /* S32_PLATFORM_H */
 
diff --git a/plat/nxp/s32/s32_bl31.c b/plat/nxp/s32/s32_bl31.c
index 2719c3c01..9e7fb8e53 100644
--- a/plat/nxp/s32/s32_bl31.c
+++ b/plat/nxp/s32/s32_bl31.c
@@ -91,6 +91,12 @@ static const mmap_region_t s32_mmap[] = {
 			MT_MEMORY | MT_RW | MT_SECURE),
 	MAP_REGION_FLAT(S32_SCMI_SHARED_MEM, S32_SCMI_SHARED_MEM_SIZE,
 			MT_NON_CACHEABLE | MT_RW | MT_SECURE),
+	/* SCP entries */
+	MAP_REGION_FLAT(MSCM_BASE_ADDR, MMU_ROUND_UP_TO_4K(MSCM_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(SCMI_PAYLOAD_BASE,
+			MMU_ROUND_UP_TO_PAGE(SCMI_PAYLOAD_SIZE),
+			MT_NON_CACHEABLE | MT_RW | MT_SECURE),
 #if defined(MC_CGM6_BASE_ADDR)
 	MAP_REGION_FLAT(MC_CGM6_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(MC_CGM6_SIZE),
 			MT_DEVICE | MT_RW),
@@ -328,6 +334,9 @@ void bl31_plat_arch_setup(void)
 #if (S32_USE_LINFLEX_IN_BL31 == 1)
 	console_s32_register();
 #endif
+
+	if (is_scp_used())
+		scp_scmi_init();
 }
 
 static unsigned int plat_s32_mpidr_to_core_pos(unsigned long mpidr)
diff --git a/plat/nxp/s32/s32_common.mk b/plat/nxp/s32/s32_common.mk
index cf0e4dc8a..09821c965 100644
--- a/plat/nxp/s32/s32_common.mk
+++ b/plat/nxp/s32/s32_common.mk
@@ -34,6 +34,9 @@ $(eval $(call add_define_val,S32CC_EMU,$(S32CC_EMU)))
 S32GEN1_DRAM_INLINE_ECC	?= 1
 $(eval $(call add_define_val,S32GEN1_DRAM_INLINE_ECC,$(S32GEN1_DRAM_INLINE_ECC)))
 
+S32CC_USE_SCP		?= 0
+$(eval $(call add_define_val,S32CC_USE_SCP,$(S32CC_USE_SCP)))
+
 BL2_AT_EL3		:= 1
 
 PLAT_INCLUDES 	+= \
@@ -111,6 +114,8 @@ BL31_SOURCES += \
 			${S32_PLAT}/s32_scmi_rst.c \
 			${S32_PLAT}/s32_svc.c \
 			${S32_PLAT}/s32_psci.c \
+			${S32_PLAT}/s32_scp_scmi.c \
+			drivers/arm/css/scmi/scmi_common.c \
 
 DTC_FLAGS		+= -Wno-unit_address_vs_reg
 
diff --git a/plat/nxp/s32/s32_scp_scmi.c b/plat/nxp/s32/s32_scp_scmi.c
new file mode 100644
index 000000000..d1d50cf67
--- /dev/null
+++ b/plat/nxp/s32/s32_scp_scmi.c
@@ -0,0 +1,54 @@
+/*
+ * Copyright 2022 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#include <common/debug.h>
+#include <drivers/arm/css/scmi.h>
+#include <lib/mmio.h>
+#include <libc/assert.h>
+
+DEFINE_BAKERY_LOCK(s32_scmi_lock);
+
+void mscm_ring_doorbell(struct scmi_channel_plat_info *plat_info);
+
+static scmi_channel_plat_info_t s32_scmi_plat_info = {
+	.scmi_mbx_mem = SCMI_PAYLOAD_BASE,
+	.db_reg_addr = MSCM_BASE_ADDR,
+	.db_preserve_mask = 0xfffffffe,
+	.db_modify_mask = 0x1,
+	.ring_doorbell = &mscm_ring_doorbell,
+};
+
+/*
+ * The global handle for invoking the SCMI driver APIs after the driver
+ * has been initialized.
+ */
+static void *s32_scmi_handle;
+
+/* The SCMI channel global object */
+static scmi_channel_t channel = {
+	.info = &s32_scmi_plat_info,
+	.lock = &s32_scmi_lock,
+};
+
+void mscm_ring_doorbell(struct scmi_channel_plat_info *plat_info)
+{
+	uintptr_t reg;
+
+	/* Request for M7 Core0, Interrupt 0 */
+	assert(!check_uptr_overflow(plat_info->db_reg_addr,
+				    MSCM_IRCP4IGR0 - 1));
+	reg = plat_info->db_reg_addr + MSCM_IRCP4IGR0;
+
+	mmio_write_32(reg, 1);
+}
+
+void scp_scmi_init(void)
+{
+	s32_scmi_handle = scmi_init(&channel);
+	if (s32_scmi_handle == NULL) {
+		ERROR("SCMI Initialization failed\n");
+		panic();
+	}
+}
diff --git a/plat/nxp/s32/s32g/include/s32g_platform_def.h b/plat/nxp/s32/s32g/include/s32g_platform_def.h
index 1a86018f5..35ad77ad5 100644
--- a/plat/nxp/s32/s32g/include/s32g_platform_def.h
+++ b/plat/nxp/s32/s32g/include/s32g_platform_def.h
@@ -65,7 +65,7 @@
 
 #if defined IMAGE_BL31
 /* To limit usage, keep these in sync with sizeof(s32_mmap) */
-#define MAX_MMAP_REGIONS		37
+#define MAX_MMAP_REGIONS		39
 #define MAX_XLAT_TABLES			15
 #endif
 
diff --git a/plat/nxp/s32/s32g/s32g2/include/s32g2_platform_def.h b/plat/nxp/s32/s32g/s32g2/include/s32g2_platform_def.h
index a38bf53d7..0306d724a 100644
--- a/plat/nxp/s32/s32g/s32g2/include/s32g2_platform_def.h
+++ b/plat/nxp/s32/s32g/s32g2/include/s32g2_platform_def.h
@@ -26,6 +26,8 @@
 
 #define S32_SRAM_SIZE			0x00800000
 
+#define MSCM_IRCP4IGR0		(0x284)
+
 #if defined IMAGE_BL1
 /* To use in blX_platform_setup() */
 #define FIRMWARE_WELCOME_STR_S32G	"This is S32G2 BL1\n"
diff --git a/plat/nxp/s32/s32g/s32g3/include/s32g3_platform_def.h b/plat/nxp/s32/s32g/s32g3/include/s32g3_platform_def.h
index 3d28535be..08d86b66a 100644
--- a/plat/nxp/s32/s32g/s32g3/include/s32g3_platform_def.h
+++ b/plat/nxp/s32/s32g/s32g3/include/s32g3_platform_def.h
@@ -36,6 +36,8 @@
 
 #define S32_SRAM_SIZE			0x1400000
 
+#define MSCM_IRCP4IGR0		(0xC24)
+
 #if defined IMAGE_BL1
 /* To use in blX_platform_setup() */
 #define FIRMWARE_WELCOME_STR_S32G	"This is S32G3 BL1\n"
diff --git a/plat/nxp/s32/s32r/include/s32r_platform_def.h b/plat/nxp/s32/s32r/include/s32r_platform_def.h
index e81d3e12a..8a72ffb79 100644
--- a/plat/nxp/s32/s32r/include/s32r_platform_def.h
+++ b/plat/nxp/s32/s32r/include/s32r_platform_def.h
@@ -15,12 +15,14 @@
 #define MC_CGM2_BASE_ADDR		(0x440C0000ul)
 #define MC_CGM2_SIZE			(0x408)
 
+#define MSCM_IRCP4IGR0			(0x284)
+
 #define S32_MPIDR_CPU_MASK		0x1
 #define S32_MPIDR_CPU_MASK_BITS	0x1
 
 #if defined IMAGE_BL31
 /* To limit usage, keep these in sync with sizeof(s32_mmap) */
-#define MAX_MMAP_REGIONS		29
+#define MAX_MMAP_REGIONS		31
 #define MAX_XLAT_TABLES			15
 #endif
 
-- 
2.17.1

