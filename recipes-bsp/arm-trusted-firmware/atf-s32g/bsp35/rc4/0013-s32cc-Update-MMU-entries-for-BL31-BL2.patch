From 9578d4bf853a9d9265c2bcbc7cffb41ae25d858f Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Fri, 9 Sep 2022 17:08:58 +0300
Subject: [PATCH 13/30] s32cc: Update MMU entries for BL31 & BL2

Issue: ALB-9287
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32/s32_bl2_el3.c                    | 52 +++++++----
 plat/nxp/s32/s32_bl31.c                       | 89 +++++++++++++++----
 plat/nxp/s32/s32g/include/s32g_platform_def.h |  6 +-
 plat/nxp/s32/s32r/include/s32r_platform_def.h | 10 +--
 4 files changed, 117 insertions(+), 40 deletions(-)

diff --git a/plat/nxp/s32/s32_bl2_el3.c b/plat/nxp/s32/s32_bl2_el3.c
index 5af7b2e13..9492a0dc4 100644
--- a/plat/nxp/s32/s32_bl2_el3.c
+++ b/plat/nxp/s32/s32_bl2_el3.c
@@ -189,28 +189,32 @@ static uintptr_t get_fip_hdr_page(void)
 }
 
 static mmap_region_t s32_mmap[] = {
-#if !defined(PLAT_s32r)
-	MAP_REGION_FLAT(S32G_SSRAM_BASE, S32G_SSRAM_LIMIT - S32G_SSRAM_BASE,
-			 MT_MEMORY | MT_RW | MT_SECURE),
-#endif
 	MAP_REGION_FLAT(S32_UART_BASE, S32_UART_SIZE,
 			MT_DEVICE | MT_RW | MT_NS),
-	MAP_REGION_FLAT(S32_MC_ME_BASE_ADDR, S32_MC_ME_SIZE,
+	MAP_REGION_FLAT(SIUL2_0_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SIUL2_0_SIZE),
 			MT_DEVICE | MT_RW),
-	MAP_REGION_FLAT(MC_CGM0_BASE_ADDR,
-			MMU_ROUND_UP_TO_PAGE(S32_DFS_ADDR(S32_DFS_NR)),
+	MAP_REGION_FLAT(SIUL2_1_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SIUL2_1_SIZE),
 			MT_DEVICE | MT_RW),
-	/* This will cover both the MC_RGM and the GPR accesses, while reducing
-	 * the number of used up MMU regions.
-	 */
-	MAP_REGION_FLAT(S32_MC_RGM_BASE_ADDR, S32_MC_RGM_SIZE,
+	MAP_REGION_FLAT(I2C4_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(I2C4_SIZE),
 			MT_DEVICE | MT_RW),
-	MAP_REGION_FLAT(SRAMC0_BASE_ADDR, SRAMC_SIZE,
+	MAP_REGION_FLAT(OCOTP_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(OCOTP_SIZE),
 			MT_DEVICE | MT_RW),
-#if !defined(PLAT_s32r)
-	MAP_REGION_FLAT(SSRAMC_BASE_ADDR, SRAMC_SIZE,
+	MAP_REGION_FLAT(SRAMC0_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SRAMC_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(SRAMC1_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SRAMC_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(FCCU_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(FCCU_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(DDRSS_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(DDRSS_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(GPR_BASE_PAGE_ADDR, MMU_ROUND_UP_TO_PAGE(GPR_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(MC_CGM5_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(MC_CGM5_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(S32_MC_RGM_BASE_ADDR, S32_MC_RGM_SIZE,
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(USDHC_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(USDHC_SIZE),
 			MT_DEVICE | MT_RW),
-#endif
 	MAP_REGION2(S32_BL32_BASE, S32_BL32_BASE,
 			MMU_ROUND_UP_TO_PAGE(S32_BL32_SIZE),
 			MT_MEMORY | MT_RW, PAGE_SIZE),
@@ -223,11 +227,27 @@ static mmap_region_t s32_mmap[] = {
 			MT_NON_CACHEABLE | MT_RW | MT_SECURE),
 	MAP_REGION_FLAT(S32_QSPI_BASE, S32_QSPI_SIZE, MT_DEVICE | MT_RW),
 	MAP_REGION_FLAT(FIP_BASE, FIP_MAXIMUM_SIZE, MT_RW | MT_SECURE),
+	MAP_REGION_FLAT(S32_FLASH_BASE, FIP_MAXIMUM_SIZE, MT_RW | MT_SECURE),
 #if (ERRATA_S32_050543 == 1)
 	MAP_REGION_FLAT(DDR_ERRATA_REGION_BASE, DDR_ERRATA_REGION_SIZE,
 			MT_NON_CACHEABLE | MT_RW),
 #endif
-	MAP_REGION_FLAT(S32_FLASH_BASE, FIP_MAXIMUM_SIZE, MT_RW | MT_SECURE),
+#if defined(SRAMC2_BASE_ADDR)
+	MAP_REGION_FLAT(SRAMC2_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SRAMC_SIZE),
+			MT_DEVICE | MT_RW),
+#endif
+#if defined(SRAMC3_BASE_ADDR)
+	MAP_REGION_FLAT(SRAMC3_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SRAMC_SIZE),
+			MT_DEVICE | MT_RW),
+#endif
+#if defined(SSRAMC_BASE_ADDR)
+	MAP_REGION_FLAT(SSRAMC_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SRAMC_SIZE),
+			MT_DEVICE | MT_RW),
+#endif
+#if defined(S32G_SSRAM_BASE)
+	MAP_REGION_FLAT(S32G_SSRAM_BASE, S32G_SSRAM_LIMIT - S32G_SSRAM_BASE,
+			 MT_MEMORY | MT_RW | MT_SECURE),
+#endif
 	{0},
 };
 
diff --git a/plat/nxp/s32/s32_bl31.c b/plat/nxp/s32/s32_bl31.c
index 56fbcfa4e..2719c3c01 100644
--- a/plat/nxp/s32/s32_bl31.c
+++ b/plat/nxp/s32/s32_bl31.c
@@ -29,38 +29,61 @@ static gicv3_redist_ctx_t rdisif_ctxs[PLATFORM_CORE_COUNT];
 static gicv3_dist_ctx_t dist_ctx;
 
 static const mmap_region_t s32_mmap[] = {
-#if !defined(PLAT_s32r)
-	MAP_REGION_FLAT(S32G_SSRAM_BASE, S32G_SSRAM_LIMIT - S32G_SSRAM_BASE,
-			 MT_MEMORY | MT_RW | MT_SECURE),
-#endif
 	MAP_REGION_FLAT(S32_UART_BASE, S32_UART_SIZE,
 			MT_DEVICE | MT_RW | MT_NS),
 	MAP_REGION_FLAT(S32GEN1_GIC_BASE, S32GEN1_GIC_SIZE,
 			MT_DEVICE | MT_RW),
 	MAP_REGION_FLAT(S32_MC_ME_BASE_ADDR, S32_MC_ME_SIZE,
 			MT_DEVICE | MT_RW),
-	MAP_REGION_FLAT(MC_CGM0_BASE_ADDR,
-			MMU_ROUND_UP_TO_4K(S32_DFS_ADDR(S32_DFS_NR)),
+	MAP_REGION_FLAT(MC_CGM0_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(MC_CGM0_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(MC_CGM1_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(MC_CGM1_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(MC_CGM2_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(MC_CGM2_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(MC_CGM5_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(MC_CGM5_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(ARM_PLL_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(ARM_PLL_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(PERIPH_PLL_BASE_ADDR,
+			MMU_ROUND_UP_TO_PAGE(PERIPH_PLL_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(ACCEL_PLL_BASE_ADDR,
+			MMU_ROUND_UP_TO_PAGE(ACCEL_PLL_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(DRAM_PLL_BASE_ADDR,
+			MMU_ROUND_UP_TO_PAGE(DRAM_PLL_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(S32_FXOSC_BASE_ADDR,
+			MMU_ROUND_UP_TO_PAGE(S32_FXOSC_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(ARM_DFS_BASE_ADDR,
+			MMU_ROUND_UP_TO_PAGE(ARM_DFS_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(PERIPH_DFS_BASE_ADDR,
+			MMU_ROUND_UP_TO_PAGE(PERIPH_DFS_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(GPR_BASE_PAGE_ADDR, MMU_ROUND_UP_TO_PAGE(GPR_SIZE),
 			MT_DEVICE | MT_RW),
-	/* This will cover both the MC_RGM and the GPR accesses, while reducing
-	 * the number of used up MMU regions.
-	 */
 	MAP_REGION_FLAT(S32_MC_RGM_BASE_ADDR, S32_MC_RGM_SIZE,
 			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(RDC_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(RDC_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(I2C4_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(I2C4_SIZE),
+			MT_DEVICE | MT_RW),
 	/* When we execute at System Monitor on behalf of EL2/EL1, we might
 	 * have to reconfigure Ncore
 	 */
 	MAP_REGION_FLAT(NCORE_BASE_ADDR, S32_NCORE_SIZE,
 			MT_DEVICE | MT_RW),
-	MAP_REGION_FLAT(SRAMC0_BASE_ADDR, SRAMC_SIZE,
+	MAP_REGION_FLAT(SRAMC0_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SRAMC_SIZE),
 			MT_DEVICE | MT_RW),
-#if !defined(PLAT_s32r)
-	MAP_REGION_FLAT(SSRAMC_BASE_ADDR, SRAMC_SIZE,
+	MAP_REGION_FLAT(SRAMC1_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SRAMC_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(SIUL2_0_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SIUL2_0_SIZE),
+			MT_DEVICE | MT_RW),
+	MAP_REGION_FLAT(SIUL2_1_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SIUL2_1_SIZE),
 			MT_DEVICE | MT_RW),
-	MAP_REGION2(BL31SRAM_BASE, BL31SRAM_BASE,
-		    MMU_ROUND_UP_TO_4K(BL31SRAM_SIZE),
-		    MT_MEMORY | MT_RW, PAGE_SIZE),
-#endif
 	MAP_REGION2(BL33_DTB, BL33_DTB,
 			MMU_ROUND_UP_TO_4K(S32_BL33_IMAGE_SIZE),
 			MT_MEMORY | MT_RW, PAGE_SIZE),
@@ -68,6 +91,40 @@ static const mmap_region_t s32_mmap[] = {
 			MT_MEMORY | MT_RW | MT_SECURE),
 	MAP_REGION_FLAT(S32_SCMI_SHARED_MEM, S32_SCMI_SHARED_MEM_SIZE,
 			MT_NON_CACHEABLE | MT_RW | MT_SECURE),
+#if defined(MC_CGM6_BASE_ADDR)
+	MAP_REGION_FLAT(MC_CGM6_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(MC_CGM6_SIZE),
+			MT_DEVICE | MT_RW),
+#endif
+#if defined(SRAMC2_BASE_ADDR)
+	MAP_REGION_FLAT(SRAMC2_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SRAMC_SIZE),
+			MT_DEVICE | MT_RW),
+#endif
+#if defined(SRAMC3_BASE_ADDR)
+	MAP_REGION_FLAT(SRAMC3_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SRAMC_SIZE),
+			MT_DEVICE | MT_RW),
+#endif
+#if defined(SSRAMC_BASE_ADDR)
+	MAP_REGION_FLAT(SSRAMC_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(SRAMC_SIZE),
+			MT_DEVICE | MT_RW),
+#endif
+#if defined(WKPU_BASE_ADDR)
+	MAP_REGION_FLAT(WKPU_BASE_ADDR, MMU_ROUND_UP_TO_PAGE(WKPU_SIZE),
+			MT_DEVICE | MT_RW),
+#endif
+#if defined(S32G_RTC_BASE)
+	MAP_REGION_FLAT(S32G_RTC_BASE,
+			MMU_ROUND_UP_TO_PAGE(S32G_RTC_SIZE),
+			MT_DEVICE | MT_RW),
+#endif
+#if defined(S32G_SSRAM_BASE)
+	MAP_REGION_FLAT(S32G_SSRAM_BASE, S32G_SSRAM_LIMIT - S32G_SSRAM_BASE,
+			 MT_MEMORY | MT_RW | MT_SECURE),
+#endif
+#if defined(BL31SRAM_BASE)
+	MAP_REGION2(BL31SRAM_BASE, BL31SRAM_BASE,
+		    MMU_ROUND_UP_TO_4K(BL31SRAM_SIZE),
+		    MT_MEMORY | MT_RW, PAGE_SIZE),
+#endif
 	{0},
 };
 
diff --git a/plat/nxp/s32/s32g/include/s32g_platform_def.h b/plat/nxp/s32/s32g/include/s32g_platform_def.h
index 0eff8ae13..1a86018f5 100644
--- a/plat/nxp/s32/s32g/include/s32g_platform_def.h
+++ b/plat/nxp/s32/s32g/include/s32g_platform_def.h
@@ -65,16 +65,16 @@
 
 #if defined IMAGE_BL31
 /* To limit usage, keep these in sync with sizeof(s32_mmap) */
-#define MAX_MMAP_REGIONS		16
+#define MAX_MMAP_REGIONS		37
 #define MAX_XLAT_TABLES			15
 #endif
 
 #if defined IMAGE_BL2
 #if (ERRATA_S32_050543 == 1)
-#define MAX_MMAP_REGIONS        18
+#define MAX_MMAP_REGIONS		28
 #define MAX_XLAT_TABLES			27
 #else
-#define MAX_MMAP_REGIONS		17
+#define MAX_MMAP_REGIONS		27
 #define MAX_XLAT_TABLES			26
 #endif
 #endif /* IMAGE_BL2 */
diff --git a/plat/nxp/s32/s32r/include/s32r_platform_def.h b/plat/nxp/s32/s32r/include/s32r_platform_def.h
index a2b9c775b..e81d3e12a 100644
--- a/plat/nxp/s32/s32r/include/s32r_platform_def.h
+++ b/plat/nxp/s32/s32r/include/s32r_platform_def.h
@@ -20,17 +20,17 @@
 
 #if defined IMAGE_BL31
 /* To limit usage, keep these in sync with sizeof(s32_mmap) */
-#define MAX_MMAP_REGIONS		13
-#define MAX_XLAT_TABLES			13
+#define MAX_MMAP_REGIONS		29
+#define MAX_XLAT_TABLES			15
 #endif
 
 #if defined IMAGE_BL2
 #if (ERRATA_S32_050543 == 1)
-#define MAX_MMAP_REGIONS		16
+#define MAX_MMAP_REGIONS		24
 #define MAX_XLAT_TABLES			25
 #else
-#define MAX_MMAP_REGIONS		15
-#define MAX_XLAT_TABLES			24
+#define MAX_MMAP_REGIONS		23
+#define MAX_XLAT_TABLES			25
 #endif
 #endif /* IMAGE_BL2 */
 
-- 
2.17.1

