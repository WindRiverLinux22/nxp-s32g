From 988576af0372057f7a4d597fa13f0e56a37c462a Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Mon, 17 Oct 2022 14:19:34 +0300
Subject: [PATCH 12/49] s32cc: Allow the turn-off of M7 cores using a mask

Useful for the users / integrators who would like to turn off
a subset of M7 cores.

Issue: ALB-9414
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32/include/s32_mc_me.h      |  2 +-
 plat/nxp/s32/s32g/s32g3/s32g3_mc_me.c | 16 ++++++++++------
 plat/nxp/s32/s32g/s32g_plat_funcs.c   |  2 +-
 plat/nxp/s32/s32gen1_mc_me.c          | 15 ++++++++++-----
 4 files changed, 22 insertions(+), 13 deletions(-)

diff --git a/plat/nxp/s32/include/s32_mc_me.h b/plat/nxp/s32/include/s32_mc_me.h
index 92015cce7..57c63c973 100644
--- a/plat/nxp/s32/include/s32_mc_me.h
+++ b/plat/nxp/s32/include/s32_mc_me.h
@@ -101,7 +101,7 @@ bool is_a53_core_in_reset(uint32_t core);
 void s32_set_core_entrypoint(uint32_t core, uint64_t entrypoint);
 void s32_kick_secondary_ca53_core(uint32_t core);
 void s32_turn_off_core(uint8_t part, uint8_t core);
-void s32_turn_off_mcores(void);
+void s32_turn_off_mcores(uint32_t skip_cores);
 void s32_reset_core(uint8_t part, uint8_t core);
 void s32_disable_cofb_clk(uint8_t part, uint32_t keep_blocks);
 const struct a53_haddr_mapping *s32_get_a53_haddr_mappings(size_t *size);
diff --git a/plat/nxp/s32/s32g/s32g3/s32g3_mc_me.c b/plat/nxp/s32/s32g/s32g3/s32g3_mc_me.c
index 0b82bce5c..15e7d36c8 100644
--- a/plat/nxp/s32/s32g/s32g3/s32g3_mc_me.c
+++ b/plat/nxp/s32/s32g/s32g3/s32g3_mc_me.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 NXP
+ * Copyright 2021-2022 NXP
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
@@ -64,12 +64,16 @@ uint8_t mc_me_core2prtn_core_id(uint8_t part, uint8_t id)
 	return mc_me_m7_core_id[id];
 }
 
-void s32_turn_off_mcores(void)
+void s32_turn_off_mcores(uint32_t skip_mask)
 {
-	s32_turn_off_core(S32_MC_ME_CM7_PART, 3);
-	s32_turn_off_core(S32_MC_ME_CM7_PART, 2);
-	s32_turn_off_core(S32_MC_ME_CM7_PART, 1);
-	s32_turn_off_core(S32_MC_ME_CM7_PART, 0);
+	int i;
+
+	for (i = PLATFORM_M7_CORE_COUNT - 1; i >= 0; i--) {
+		if (skip_mask & BIT_32(i))
+			continue;
+
+		s32_turn_off_core(S32_MC_ME_CM7_PART, i);
+	}
 }
 
 uint32_t mc_me_get_cluster_ptrn(uint32_t core)
diff --git a/plat/nxp/s32/s32g/s32g_plat_funcs.c b/plat/nxp/s32/s32g/s32g_plat_funcs.c
index dac4e363b..10fa29707 100644
--- a/plat/nxp/s32/s32g/s32g_plat_funcs.c
+++ b/plat/nxp/s32/s32g/s32g_plat_funcs.c
@@ -55,7 +55,7 @@ static void __dead2 platform_suspend(unsigned int current_cpu)
 
 	/* Shutting down cores */
 	/* M7 cores */
-	s32_turn_off_mcores();
+	s32_turn_off_mcores(0u);
 
 	if (is_lockstep_enabled())
 		ncores /= 2;
diff --git a/plat/nxp/s32/s32gen1_mc_me.c b/plat/nxp/s32/s32gen1_mc_me.c
index 2681ea980..d192a885e 100644
--- a/plat/nxp/s32/s32gen1_mc_me.c
+++ b/plat/nxp/s32/s32gen1_mc_me.c
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 NXP
+ * Copyright 2021-2022 NXP
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
@@ -25,11 +25,16 @@ uint8_t mc_me_core2prtn_core_id(uint8_t part, uint8_t id)
 	return id;
 }
 
-void s32_turn_off_mcores(void)
+void s32_turn_off_mcores(uint32_t skip_mask)
 {
-	s32_turn_off_core(S32_MC_ME_CM7_PART, 2);
-	s32_turn_off_core(S32_MC_ME_CM7_PART, 1);
-	s32_turn_off_core(S32_MC_ME_CM7_PART, 0);
+	int i;
+
+	for (i = PLATFORM_M7_CORE_COUNT - 1; i >= 0; i--) {
+		if (skip_mask & BIT_32(i))
+			continue;
+
+		s32_turn_off_core(S32_MC_ME_CM7_PART, i);
+	}
 }
 
 uint32_t mc_me_get_cluster_ptrn(uint32_t core)
-- 
2.25.1

