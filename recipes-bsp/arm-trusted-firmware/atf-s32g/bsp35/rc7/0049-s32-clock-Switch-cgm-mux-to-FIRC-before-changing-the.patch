From 52e5427743d641fcc3dc4a2100afec8fd34d16b8 Mon Sep 17 00:00:00 2001
From: Andra-Teodora Ilie <andra.ilie@nxp.com>
Date: Tue, 25 Oct 2022 11:20:42 +0300
Subject: [PATCH 49/49] s32: clock: Switch cgm mux to FIRC before changing the
 divisor value in pllout_div.

pllout divisor needs to be disabled before changing its value,
but disabling it leads to losing the a53 clock (see the clocking
diagram in S32* Reference Manual). This can be avoided by switching
the cgm1_mux0 to FIRC then back to its original source after the
divisor value was modified.

Issue: ALB-7596
Upstream-Status: Pending 

Signed-off-by: Andra-Teodora Ilie <andra.ilie@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32/clk/enable_clk.c                  |  6 ++++++
 drivers/nxp/s32/clk/s32gen1_clk.c                 |  6 +++++-
 drivers/nxp/s32/clk/set_par_rate.c                |  6 ------
 include/drivers/nxp/s32/clk/s32gen1_clk_modules.h | 15 ++++++++++++++-
 4 files changed, 25 insertions(+), 8 deletions(-)

diff --git a/drivers/nxp/s32/clk/enable_clk.c b/drivers/nxp/s32/clk/enable_clk.c
index b458c215d..f0adc7982 100644
--- a/drivers/nxp/s32/clk/enable_clk.c
+++ b/drivers/nxp/s32/clk/enable_clk.c
@@ -1089,8 +1089,14 @@ static int enable_pll_div(struct s32gen1_clk_obj *module,
 #endif
 	}
 
+	if (div->child_mux && module->refcount)
+		enable_cgm_mux(div->child_mux, priv, false);
+
 	config_pll_out_div(pll_addr, div->index, dc);
 
+	if (div->child_mux && module->refcount)
+		enable_cgm_mux(div->child_mux, priv, true);
+
 	return 0;
 }
 
diff --git a/drivers/nxp/s32/clk/s32gen1_clk.c b/drivers/nxp/s32/clk/s32gen1_clk.c
index 3389efdaa..d9ff61c92 100644
--- a/drivers/nxp/s32/clk/s32gen1_clk.c
+++ b/drivers/nxp/s32/clk/s32gen1_clk.c
@@ -59,8 +59,12 @@ static struct s32gen1_pll armpll = {
 static struct s32gen1_clk arm_pll_vco_clk =
 		S32GEN1_FREQ_MODULE_CLK(armpll, 1300 * MHZ,
 					S32GEN1_ARM_PLL_VCO_MAX_FREQ);
+/**
+ * cgm1_mux0 needs to be disabled before attempting to 
+ * modify arm_pll_phi0_div_value
+ */
 static struct s32gen1_pll_out_div arm_pll_phi0_div =
-		S32GEN1_PLL_OUT_DIV_INIT(armpll, 0);
+		S32GEN1_PLL_OUT_DIV_INIT_MUX(armpll, 0, &cgm1_mux0);
 static struct s32gen1_clk arm_pll_phi0_clk =
 		S32GEN1_FREQ_MODULE_CLK(arm_pll_phi0_div, 0,
 					S32GEN1_ARM_PLL_PHI0_MAX_FREQ);
diff --git a/drivers/nxp/s32/clk/set_par_rate.c b/drivers/nxp/s32/clk/set_par_rate.c
index e2d629ae6..d955538e4 100644
--- a/drivers/nxp/s32/clk/set_par_rate.c
+++ b/drivers/nxp/s32/clk/set_par_rate.c
@@ -41,12 +41,6 @@ static unsigned long set_pll_div_freq(struct s32gen1_clk_obj *module,
 		return 0;
 	}
 
-	if (div->freq && div->freq != rate) {
-		ERROR("PLL DIV frequency was already set to %lu pll: %u index: %" PRIu32 "\n",
-		      div->freq, pll->instance, div->index);
-		return 0;
-	}
-
 	div->freq = rate;
 	return rate;
 }
diff --git a/include/drivers/nxp/s32/clk/s32gen1_clk_modules.h b/include/drivers/nxp/s32/clk/s32gen1_clk_modules.h
index fb26ca97e..5e9c921bd 100644
--- a/include/drivers/nxp/s32/clk/s32gen1_clk_modules.h
+++ b/include/drivers/nxp/s32/clk/s32gen1_clk_modules.h
@@ -60,7 +60,19 @@
 		.type = s32gen1_pll_out_div_t,   \
 	},                                       \
 	.parent = &(PARENT).desc,                \
-	.index = (INDEX),                        \
+	.index = (INDEX),						\
+	.child_mux = NULL,						\
+}
+
+
+#define S32GEN1_PLL_OUT_DIV_INIT_MUX(PARENT, INDEX, MUX)  \
+{                                                \
+	.desc = {                                \
+		.type = s32gen1_pll_out_div_t,   \
+	},                                       \
+	.parent = &(PARENT).desc,                \
+	.index = (INDEX),                       \
+	.child_mux = (MUX),						\
 }
 
 #define S32GEN1_DFS_DIV_INIT(PARENT, INDEX)      \
@@ -272,6 +284,7 @@ struct s32gen1_mux {
 struct s32gen1_pll_out_div {
 	struct s32gen1_clk_obj desc;
 	struct s32gen1_clk_obj *parent;
+	struct s32gen1_mux *child_mux;
 	uint32_t index;
 	unsigned long freq;
 };
-- 
2.25.1

