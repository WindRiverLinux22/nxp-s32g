From 14e07e9974c5b1a2760afd0605784ebbda1a8b23 Mon Sep 17 00:00:00 2001
From: Radu Pirea <radu-nicolae.pirea@nxp.com>
Date: Fri, 28 Oct 2022 11:19:12 +0300
Subject: [PATCH 10/49] s32cc: clocks: early enable adc clock

Issue: ALB-9479

Upstream-Status: Pending 

Signed-off-by: Radu Pirea <radu-nicolae.pirea@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32/clk/early_clocks.c            | 21 ++++++++++--
 .../drivers/nxp/s32/clk/s32gen1_clk_funcs.h   |  2 ++
 .../dt-bindings/clock/s32gen1-clock-freq.h    |  2 ++
 .../s32g399ardb3/s32g399ardb3_ddr_fixup.c     | 34 +++++++++++++++++++
 4 files changed, 56 insertions(+), 3 deletions(-)

diff --git a/drivers/nxp/s32/clk/early_clocks.c b/drivers/nxp/s32/clk/early_clocks.c
index 6744eed2f..ed92cac65 100644
--- a/drivers/nxp/s32/clk/early_clocks.c
+++ b/drivers/nxp/s32/clk/early_clocks.c
@@ -19,6 +19,8 @@
 #define ARM_DFS_BASE_ADDR		S32_DFS_ADDR(S32_CORE_DFS)
 #define PERIPH_DFS_BASE_ADDR	S32_DFS_ADDR(S32_PERIPH_DFS)
 
+#pragma weak enable_board_early_clocks
+
 static struct s32gen1_clk_priv s32_priv = {
 	.accelpll = (void *)ACCEL_PLL_BASE_ADDR,
 	.armdfs = (void *)ARM_DFS_BASE_ADDR,
@@ -80,6 +82,16 @@ static struct clk ddr = CLK_INIT(S32GEN1_CLK_DDR);
 
 static struct siul2_freq_mapping early_freqs;
 
+int enable_board_early_clocks(void)
+{
+	return 0;
+}
+
+inline struct clk_driver *s32gen1_get_early_clk_driver(void)
+{
+	return &fake_clk_dev;
+}
+
 static int switch_xbar_to_firc(void)
 {
 	int ret;
@@ -287,8 +299,11 @@ int s32_plat_clock_init(bool skip_ddr_clk)
 			return ret;
 	}
 
-	if (!skip_ddr_clk)
-		return s32_enable_ddr_clock();
+	if (!skip_ddr_clk) {
+		ret = s32_enable_ddr_clock();
+		if (ret)
+			return ret;
+	}
 
-	return 0;
+	return enable_board_early_clocks();
 }
diff --git a/include/drivers/nxp/s32/clk/s32gen1_clk_funcs.h b/include/drivers/nxp/s32/clk/s32gen1_clk_funcs.h
index 5411f78d0..ff5726c31 100644
--- a/include/drivers/nxp/s32/clk/s32gen1_clk_funcs.h
+++ b/include/drivers/nxp/s32/clk/s32gen1_clk_funcs.h
@@ -43,4 +43,6 @@ int cc_compound_clk_get_pid(uint32_t id, uint32_t *parent_id);
 
 int s32gen1_get_early_clks_freqs(struct siul2_freq_mapping *mapping);
 
+extern struct clk_driver *s32gen1_get_early_clk_driver(void);
+
 #endif /* S32GEN1_CLK_FUNCS_H */
diff --git a/include/dt-bindings/clock/s32gen1-clock-freq.h b/include/dt-bindings/clock/s32gen1-clock-freq.h
index 78be8be33..e1b013b74 100644
--- a/include/dt-bindings/clock/s32gen1-clock-freq.h
+++ b/include/dt-bindings/clock/s32gen1-clock-freq.h
@@ -11,6 +11,8 @@
 #define S32GEN1_PERIPH_PLL_VCO_FREQ		(2000 * MHZ)
 #define S32GEN1_FXOSC_FREQ			(40 * MHZ)
 #define S32GEN1_FIRC_FREQ			(48 * MHZ)
+#define S32GEN1_PERIPH_PLL_PHI1_FREQ		(80 * MHZ)
+#define S32GEN1_PER_FREQ			(80 * MHZ)
 #define S32GEN1_LIN_BAUD_CLK_FREQ		(125 * MHZ)
 #define S32GEN1_SDHC_CLK_FREQ			(400 * MHZ)
 #define S32GEN1_DDR_PLL_VCO_FREQ		(1600 * MHZ)
diff --git a/plat/nxp/s32/s32g/s32g3/s32g399ardb3/s32g399ardb3_ddr_fixup.c b/plat/nxp/s32/s32g/s32g3/s32g399ardb3/s32g399ardb3_ddr_fixup.c
index 844941b99..297c66f1d 100644
--- a/plat/nxp/s32/s32g/s32g3/s32g399ardb3/s32g399ardb3_ddr_fixup.c
+++ b/plat/nxp/s32/s32g/s32g3/s32g399ardb3/s32g399ardb3_ddr_fixup.c
@@ -3,10 +3,14 @@
  * Copyright 2022 NXP
  */
 #include <stdint.h>
+#include <clk/clk.h>
+#include <clk/s32gen1_clk_funcs.h>
 #include <common/debug.h>
 #include <common/fdt_wrappers.h>
 #include <drivers/nxp/s32/adc/s32_adc.h>
 #include <drivers/nxp/s32/ddr/ddr_init.h>
+#include <dt-bindings/clock/s32gen1-clock-freq.h>
+#include <dt-bindings/clock/s32gen1-clock.h>
 #include <lib/libc/errno.h>
 #include <libfdt.h>
 #include "s32_dt.h"
@@ -131,3 +135,33 @@ int ddr_config_fixup(void)
 
 	return 0;
 }
+
+int enable_board_early_clocks(void)
+{
+	struct clk periph_pll_phi1 = (struct clk) {
+		.id = (S32GEN1_CLK_PERIPH_PLL_PHI1),
+		.drv = s32gen1_get_early_clk_driver()};
+	struct clk mc_cgm0_mux3 = (struct clk) {
+		.id = (S32GEN1_CLK_MC_CGM0_MUX3),
+		.drv = s32gen1_get_early_clk_driver()};
+	struct clk per = (struct clk) {
+		.id = (S32GEN1_CLK_PER),
+		.drv = s32gen1_get_early_clk_driver()};
+	unsigned long rate;
+	int ret;
+
+	ret = s32gen1_set_parent(&mc_cgm0_mux3, &periph_pll_phi1);
+	if (ret)
+		return ret;
+
+	rate = s32gen1_set_rate(&periph_pll_phi1,
+				S32GEN1_PERIPH_PLL_PHI1_FREQ);
+	if (rate != S32GEN1_PERIPH_PLL_PHI1_FREQ)
+		return -EINVAL;
+
+	rate = s32gen1_set_rate(&per, S32GEN1_PER_FREQ);
+	if (rate != S32GEN1_PER_FREQ)
+		return -EINVAL;
+
+	return s32gen1_enable(&per, 1);
+}
-- 
2.25.1

