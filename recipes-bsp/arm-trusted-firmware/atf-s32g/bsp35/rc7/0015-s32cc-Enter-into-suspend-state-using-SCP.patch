From d1fb23a997f40512e9cfaeee72be0e6dea595eee Mon Sep 17 00:00:00 2001
From: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Date: Mon, 17 Oct 2022 15:11:20 +0300
Subject: [PATCH 15/49] s32cc: Enter into suspend state using SCP

Issue: ALB-9414
Upstream-Status: Pending 

Signed-off-by: Ghennadi Procopciuc <ghennadi.procopciuc@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 plat/nxp/s32/include/s32_bl_common.h        |  1 +
 plat/nxp/s32/s32_common.mk                  |  1 +
 plat/nxp/s32/s32_scp_scmi.c                 | 36 ++++++++++++-
 plat/nxp/s32/s32g/bl31_sram/bl31_sram.mk    |  4 ++
 plat/nxp/s32/s32g/bl31_sram/bl31sram_main.c | 40 +++++++++++---
 plat/nxp/s32/s32g/include/s32g_mc_me.h      |  4 +-
 plat/nxp/s32/s32g/s32g_mc_me.c              |  4 +-
 plat/nxp/s32/s32g/s32g_plat_funcs.c         | 59 ++++++++++++---------
 plat/nxp/s32/s32g/s32g_resume.c             | 12 ++---
 9 files changed, 113 insertions(+), 48 deletions(-)

diff --git a/plat/nxp/s32/include/s32_bl_common.h b/plat/nxp/s32/include/s32_bl_common.h
index 55df74360..c971c244c 100644
--- a/plat/nxp/s32/include/s32_bl_common.h
+++ b/plat/nxp/s32/include/s32_bl_common.h
@@ -73,6 +73,7 @@ void scp_set_core_reset_addr(uintptr_t addr);
 int scp_get_cpu_state(uint32_t core);
 int scp_cpu_on(uint32_t core);
 int scp_cpu_off(uint32_t core);
+void scp_suspend_platform(void);
 
 struct s32_i2c_driver *s32_add_i2c_module(void *fdt, int fdt_node);
 
diff --git a/plat/nxp/s32/s32_common.mk b/plat/nxp/s32/s32_common.mk
index 5d46c04ed..a50281a1f 100644
--- a/plat/nxp/s32/s32_common.mk
+++ b/plat/nxp/s32/s32_common.mk
@@ -121,6 +121,7 @@ BL31_SOURCES += \
 			drivers/arm/css/scmi/scmi_common.c \
 			drivers/arm/css/scmi/scmi_ap_core_proto.c \
 			drivers/arm/css/scmi/scmi_pwr_dmn_proto.c \
+			drivers/arm/css/scmi/scmi_sys_pwr_proto.c \
 
 DTC_FLAGS		+= -Wno-unit_address_vs_reg
 
diff --git a/plat/nxp/s32/s32_scp_scmi.c b/plat/nxp/s32/s32_scp_scmi.c
index 77a2877c1..441b17392 100644
--- a/plat/nxp/s32/s32_scp_scmi.c
+++ b/plat/nxp/s32/s32_scp_scmi.c
@@ -166,7 +166,18 @@ int scp_cpu_on(uint32_t core)
 
 int scp_cpu_off(uint32_t core)
 {
-	return scp_cpu_set_state(core, S32GEN1_SCMI_PD_OFF);
+	int ret;
+
+	ret = scp_cpu_set_state(core, S32GEN1_SCMI_PD_OFF);
+	if (ret)
+		return ret;
+
+	/* Wait to be killed by SCP */
+	while (true) {
+		isb();
+		dsb();
+		wfi();
+	}
 }
 
 int scp_get_cpu_state(uint32_t core)
@@ -190,6 +201,29 @@ int scp_get_cpu_state(uint32_t core)
 	return S32GEN1_SCMI_PD_GET_LEVEL0_STATE(pwr_state);
 }
 
+void scp_suspend_platform(void)
+{
+	int ret;
+	void *handle = get_scmi_handle();
+
+	if (!handle) {
+		ERROR("%s: Failed to get SCMI handle", __func__);
+		panic();
+	}
+
+	ret = scmi_sys_pwr_state_set(handle, SCMI_SYS_PWR_FORCEFUL_REQ,
+				     SCMI_SYS_PWR_SUSPEND);
+	if (ret != SCMI_E_SUCCESS) {
+		ERROR("Failed to transition the system to suspend state\n");
+		panic();
+	}
+
+	while (true) {
+		dsb();
+		wfi();
+	}
+}
+
 static bool is_proto_allowed(mailbox_mem_t *mbx_mem)
 {
 	uint32_t proto = SCMI_MSG_GET_PROTO(mbx_mem->msg_header);
diff --git a/plat/nxp/s32/s32g/bl31_sram/bl31_sram.mk b/plat/nxp/s32/s32g/bl31_sram/bl31_sram.mk
index 44966e705..fe4e193c5 100644
--- a/plat/nxp/s32/s32g/bl31_sram/bl31_sram.mk
+++ b/plat/nxp/s32/s32g/bl31_sram/bl31_sram.mk
@@ -9,7 +9,11 @@ BL31SRAM_SOURCES = plat/common/aarch64/platform_up_stack.S \
 		   plat/nxp/s32/s32g/bl31_sram/bl31sram_main.c \
 		   plat/nxp/s32/s32g/s32g_clocks.c \
 		   plat/nxp/s32/s32g/s32g_mc_me.c \
+		   plat/nxp/s32/s32_scp_scmi.c \
+		   drivers/arm/css/scmi/scmi_common.c \
+		   drivers/arm/css/scmi/scmi_sys_pwr_proto.c \
 		   ${COMMON_DDR_DRV}/ddr_lp.c \
+		   ${LIBC_SRCS} \
 
 BL31SRAM_ARRAY_NAME ?= bl31sram
 BL31SRAM_ARRAY_LEN  ?= bl31sram_len
diff --git a/plat/nxp/s32/s32g/bl31_sram/bl31sram_main.c b/plat/nxp/s32/s32g/bl31_sram/bl31sram_main.c
index c3c1d73c1..52e61f779 100644
--- a/plat/nxp/s32/s32g/bl31_sram/bl31sram_main.c
+++ b/plat/nxp/s32/s32g/bl31_sram/bl31sram_main.c
@@ -10,6 +10,21 @@
 #include "ddr/ddr_lp.h"
 #include "s32g_clocks.h"
 #include "s32g_mc_me.h"
+#include "s32_bl_common.h"
+#include <lib/bakery_lock.h>
+
+/**
+ * Dummy implementation for lock get and release operations.
+ *
+ * No concurrent access is expected during platform suspend operation.
+ */
+void bakery_lock_get(bakery_lock_t *bakery)
+{
+}
+
+void bakery_lock_release(bakery_lock_t *bakery)
+{
+}
 
 static void disable_ddr_clk(void)
 {
@@ -22,18 +37,27 @@ void bl31sram_main(void)
 {
 	disable_mmu_el3();
 	ddrss_to_io_retention_mode();
+
 	disable_ddr_clk();
 
-	s32g_disable_fxosc();
+	if (!is_scp_used()) {
+		s32g_disable_fxosc();
 
-	/* Set standby master core and request the standby transition */
-	s32g_set_stby_master_core(S32G_STBY_MASTER_PART, plat_my_core_pos());
+		/* Set standby master core and request the standby transition */
+		s32g_set_stby_master_core(S32G_STBY_MASTER_PART,
+					  plat_my_core_pos());
+	} else {
+		scp_scmi_init();
+		scp_suspend_platform();
+	}
 
-	/*
-	 * A torn-apart variant of psci_power_down_wfi()
-	 */
-	dsb();
-	wfi();
+	while (true) {
+		/*
+		 * A torn-apart variant of psci_power_down_wfi()
+		 */
+		dsb();
+		wfi();
+	}
 
 	plat_panic_handler();
 }
diff --git a/plat/nxp/s32/s32g/include/s32g_mc_me.h b/plat/nxp/s32/s32g/include/s32g_mc_me.h
index f7753387f..7d133816e 100644
--- a/plat/nxp/s32/s32g/include/s32g_mc_me.h
+++ b/plat/nxp/s32/s32g/include/s32g_mc_me.h
@@ -1,7 +1,7 @@
 /*
  * MC Mode Entry definitions for S32G274A and compatible SoCs
  *
- * Copyright 2019-2021 NXP
+ * Copyright 2019-2022 NXP
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
@@ -28,6 +28,6 @@
 #define S32G_STBY_MASTER_CORE	0
 #define S32G_STBY_MASTER_PART	1
 
-void s32g_set_stby_master_core(uint8_t part, uint8_t core);
+void s32g_set_stby_master_core(uint8_t part, unsigned int core);
 
 #endif /* __S32G_MC_ME_H__ */
diff --git a/plat/nxp/s32/s32g/s32g_mc_me.c b/plat/nxp/s32/s32g/s32g_mc_me.c
index da3fa77b0..a1831b2de 100644
--- a/plat/nxp/s32/s32g/s32g_mc_me.c
+++ b/plat/nxp/s32/s32g/s32g_mc_me.c
@@ -1,12 +1,12 @@
 /*
- * Copyright 2019-2021 NXP
+ * Copyright 2019-2022 NXP
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
 #include <lib/mmio.h>
 #include "s32g_mc_me.h"
 
-void s32g_set_stby_master_core(uint8_t part, uint8_t core)
+void s32g_set_stby_master_core(uint8_t part, unsigned int core)
 {
 	/* Set the master core for the standby sequence */
 	mmio_write_32(MC_ME_MAIN_COREID,
diff --git a/plat/nxp/s32/s32g/s32g_plat_funcs.c b/plat/nxp/s32/s32g/s32g_plat_funcs.c
index 10fa29707..b7f782f3c 100644
--- a/plat/nxp/s32/s32g/s32g_plat_funcs.c
+++ b/plat/nxp/s32/s32g/s32g_plat_funcs.c
@@ -19,14 +19,7 @@
 #include <lib/xlat_tables/xlat_tables_v2.h>
 #include <plat/nxp/s32g/bl31_ssram/ssram_mailbox.h>
 #include <plat/common/platform.h>
-
-static void bl31sram_entry(void)
-{
-	bl31_sram_entry_t entry;
-
-	entry = (void *)BL31SRAM_BASE;
-	entry();
-}
+#include <string.h>
 
 static void set_warm_entry(void)
 {
@@ -40,22 +33,10 @@ static void set_warm_entry(void)
 	mmio_write_8(short_boot, (uint8_t)s32gen1_is_wkp_short_boot());
 }
 
-static void __dead2 platform_suspend(unsigned int current_cpu)
+static void turn_off_cores_and_per(unsigned int current_cpu)
 {
-	size_t i;
 	size_t ncores = PLATFORM_CORE_COUNT;
-
-	for (i = 0; i < PLATFORM_CORE_COUNT; i++)
-		gicv3_cpuif_disable(i);
-
-	plat_gic_save();
-	set_warm_entry();
-	pmic_prepare_for_suspend();
-	s32gen1_wkpu_enable_irqs();
-
-	/* Shutting down cores */
-	/* M7 cores */
-	s32_turn_off_mcores(0u);
+	size_t i;
 
 	if (is_lockstep_enabled())
 		ncores /= 2;
@@ -83,9 +64,6 @@ static void __dead2 platform_suspend(unsigned int current_cpu)
 	s32g_disable_pll(S32_ACCEL_PLL, 2);
 	s32g_disable_pll(S32_PERIPH_PLL, 8);
 	s32g_disable_pll(S32_CORE_PLL, 2);
-
-	bl31sram_entry();
-	plat_panic_handler();
 }
 
 static void copy_bl31sram_image(void)
@@ -119,8 +97,37 @@ static void copy_bl31sram_image(void)
 #endif
 }
 
-void s32_plat_suspend(unsigned int cpu)
+static void bl31sram_entry(void)
 {
+	bl31_sram_entry_t entry;
+
 	copy_bl31sram_image();
+
+	entry = (void *)BL31SRAM_BASE;
+	entry();
+}
+
+static void __dead2 platform_suspend(unsigned int current_cpu)
+{
+	set_warm_entry();
+
+	if (!is_scp_used()) {
+		/* M7 cores */
+		s32_turn_off_mcores(0);
+
+		turn_off_cores_and_per(current_cpu);
+	}
+
+	bl31sram_entry();
+	plat_panic_handler();
+}
+
+void s32_plat_suspend(unsigned int cpu)
+{
+	plat_gic_save();
+	set_warm_entry();
+	pmic_prepare_for_suspend();
+	s32gen1_wkpu_enable_irqs();
+
 	platform_suspend(cpu);
 }
diff --git a/plat/nxp/s32/s32g/s32g_resume.c b/plat/nxp/s32/s32g/s32g_resume.c
index af13e9ccc..41f1d1849 100644
--- a/plat/nxp/s32/s32g/s32g_resume.c
+++ b/plat/nxp/s32/s32g/s32g_resume.c
@@ -3,15 +3,9 @@
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
-#include "s32g_bl_common.h"
-#include "s32_linflexuart.h"
-#include "s32g_lowlevel.h"
-#include "s32g_resume.h"
-#include "s32gen1-wkpu.h"
+#include <s32gen1-wkpu.h>
+#include <s32_linflexuart.h>
 #include <bl31/bl31.h>		/* for bl31_warm_entrypoint() */
-#include <lib/el3_runtime/context_mgmt.h>
-#include <lib/el3_runtime/cpu_data.h>
-#include <lib/mmio.h>
 
 void s32g_resume_entrypoint(void)
 {
@@ -20,6 +14,6 @@ void s32g_resume_entrypoint(void)
 #if (S32_USE_LINFLEX_IN_BL31 == 1)
 	console_s32_register();
 #endif
-	plat_gic_restore();
+
 	bl31_warm_entrypoint();
 }
-- 
2.25.1

