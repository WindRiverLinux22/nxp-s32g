From bf398286eb3c7ff626c86e2fcf49f3ce29ecd412 Mon Sep 17 00:00:00 2001
From: Andra-Teodora Ilie <andra.ilie@nxp.com>
Date: Wed, 12 Oct 2022 19:43:11 +0300
Subject: [PATCH 34/49] s32: plat: clock: Do not allow frequency scaling for
 XBAR based clocks and ACCEL based clocks.

XBAR rate cannot be easily changed without affecting many other clock
rates. Also disable frequency scaling for ACCEL clocks on S32R45.

Issue: ALB-8876
Upstream-Status: Pending 

Signed-off-by: Andra-Teodora Ilie <andra.ilie@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32/clk/get_rate.c                   |  3 +++
 drivers/nxp/s32/clk/s32g_clk.c                   |  4 ++--
 drivers/nxp/s32/clk/s32gen1_clk.c                | 10 +++++-----
 drivers/nxp/s32/clk/s32r45_clk.c                 |  8 ++++----
 .../drivers/nxp/s32/clk/s32gen1_clk_modules.h    | 16 ++++++++++++++--
 5 files changed, 28 insertions(+), 13 deletions(-)

diff --git a/drivers/nxp/s32/clk/get_rate.c b/drivers/nxp/s32/clk/get_rate.c
index f64d10e20..7fff977d0 100644
--- a/drivers/nxp/s32/clk/get_rate.c
+++ b/drivers/nxp/s32/clk/get_rate.c
@@ -706,6 +706,9 @@ int s32gen1_get_rates(struct clk *c, struct s32gen1_clk_rates *clk_rates)
 	if (min_rate == max_rate)
 		return 0;
 
+	if (!clk->freq_scaling)
+		return 0;
+
 	return get_clk_frequencies(&clk->desc, priv, clk_rates);
 }
 
diff --git a/drivers/nxp/s32/clk/s32g_clk.c b/drivers/nxp/s32/clk/s32g_clk.c
index 7ccd01baa..7a92d52db 100644
--- a/drivers/nxp/s32/clk/s32g_clk.c
+++ b/drivers/nxp/s32/clk/s32g_clk.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-3-Clause
 /*
- * Copyright 2020-2021 NXP
+ * Copyright 2020-2022 NXP
  */
 #include <dt-bindings/clock/s32g-clock.h>
 #include <clk/s32g_clk_funcs.h>
@@ -12,7 +12,7 @@ static struct s32gen1_part_block llce_block =
 		S32GEN1_PART_BLOCK_NO_STATUS(cgm0_mux0_clk, 3,
 					     s32gen1_part_block0);
 struct s32gen1_clk xbar_2x_clk =
-		S32GEN1_FREQ_MODULE_CLK(llce_block, 48 * MHZ, 800 * MHZ);
+		S32GEN1_FREQ_MODULE_CLK_NO_FREQ_SCALING(llce_block, 48 * MHZ, 800 * MHZ);
 
 /* PER_CLK */
 static struct s32gen1_clk per_clk =
diff --git a/drivers/nxp/s32/clk/s32gen1_clk.c b/drivers/nxp/s32/clk/s32gen1_clk.c
index b38806149..3389efdaa 100644
--- a/drivers/nxp/s32/clk/s32gen1_clk.c
+++ b/drivers/nxp/s32/clk/s32gen1_clk.c
@@ -115,27 +115,27 @@ struct s32gen1_clk cgm0_mux0_clk =
 static struct s32gen1_fixed_div xbar_div2 =
 		S32GEN1_FIXED_DIV_INIT(cgm0_mux0_clk, 2);
 static struct s32gen1_clk xbar_clk =
-		S32GEN1_FREQ_MODULE_CLK(xbar_div2, 24 * MHZ, 400 * MHZ);
+		S32GEN1_FREQ_MODULE_CLK_NO_FREQ_SCALING(xbar_div2, 24 * MHZ, 400 * MHZ);
 /* XBAR_DIV2 */
 static struct s32gen1_fixed_div xbar_div4 =
 		S32GEN1_FIXED_DIV_INIT(cgm0_mux0_clk, 4);
 static struct s32gen1_clk xbar_div2_clk =
-		S32GEN1_FREQ_MODULE_CLK(xbar_div4, 12 * MHZ, 200 * MHZ);
+		S32GEN1_FREQ_MODULE_CLK_NO_FREQ_SCALING(xbar_div4, 12 * MHZ, 200 * MHZ);
 /* XBAR_DIV3 */
 static struct s32gen1_fixed_div xbar_div6 =
 		S32GEN1_FIXED_DIV_INIT(cgm0_mux0_clk, 6);
 static struct s32gen1_clk xbar_div3_clk =
-		S32GEN1_FREQ_MODULE_CLK(xbar_div6, 8 * MHZ, 133333333);
+		S32GEN1_FREQ_MODULE_CLK_NO_FREQ_SCALING(xbar_div6, 8 * MHZ, 133333333);
 /* XBAR_DIV4 */
 static struct s32gen1_fixed_div xbar_div8 =
 		S32GEN1_FIXED_DIV_INIT(cgm0_mux0_clk, 8);
 static struct s32gen1_clk xbar_div4_clk =
-		S32GEN1_FREQ_MODULE_CLK(xbar_div8, 6 * MHZ, 100 * MHZ);
+		S32GEN1_FREQ_MODULE_CLK_NO_FREQ_SCALING(xbar_div8, 6 * MHZ, 100 * MHZ);
 /* XBAR_DIV6 */
 static struct s32gen1_fixed_div xbar_div12 =
 		S32GEN1_FIXED_DIV_INIT(cgm0_mux0_clk, 12);
 static struct s32gen1_clk xbar_div6_clk =
-		S32GEN1_FREQ_MODULE_CLK(xbar_div12, 4 * MHZ, 66666666);
+		S32GEN1_FREQ_MODULE_CLK_NO_FREQ_SCALING(xbar_div12, 4 * MHZ, 66666666);
 
 /* PERIPH PLL */
 static struct s32gen1_mux periph_pll_mux =
diff --git a/drivers/nxp/s32/clk/s32r45_clk.c b/drivers/nxp/s32/clk/s32r45_clk.c
index a3e2cbb4b..fbaf15331 100644
--- a/drivers/nxp/s32/clk/s32r45_clk.c
+++ b/drivers/nxp/s32/clk/s32r45_clk.c
@@ -32,7 +32,7 @@ static struct s32gen1_part_block mipi23_block =
 static struct s32gen1_part_block fdma_block =
 		S32GEN1_PART_BLOCK(mipi23_block, 0, s32gen1_part_block9);
 struct s32gen1_clk xbar_2x_clk =
-		S32GEN1_FREQ_MODULE_CLK(fdma_block, 48 * MHZ, 800 * MHZ);
+		S32GEN1_FREQ_MODULE_CLK_NO_FREQ_SCALING(fdma_block, 48 * MHZ, 800 * MHZ);
 
 /* PER_CLK */
 static struct s32gen1_part_block per_block =
@@ -74,11 +74,11 @@ static struct s32gen1_part_block bbe32ep_block =
 static struct s32gen1_part_block spt_block =
 		S32GEN1_PART_BLOCK(bbe32ep_block, 3, s32gen1_part_block5);
 static struct s32gen1_clk accel3_clk =
-		S32GEN1_FREQ_MODULE_CLK(spt_block, 0, 600 * MHZ);
+		S32GEN1_FREQ_MODULE_CLK_NO_FREQ_SCALING(spt_block, 0, 600 * MHZ);
 static struct s32gen1_fixed_div accle3_div3_div =
 		S32GEN1_FIXED_DIV_INIT(accel3_clk, 2);
 static struct s32gen1_clk accel3_div3_clk =
-		S32GEN1_FREQ_MODULE_CLK(accle3_div3_div, 0, 200 * MHZ);
+		S32GEN1_FREQ_MODULE_CLK_NO_FREQ_SCALING(accle3_div3_div, 0, 200 * MHZ);
 
 /* ACCEL4_CLK (LAX) */
 static struct s32gen1_mux cgm2_mux1 =
@@ -94,7 +94,7 @@ static struct s32gen1_part_block lax0_block =
 static struct s32gen1_part_block lax1_block =
 		S32GEN1_PART_BLOCK(lax0_block, 2, s32gen1_part_block1);
 static struct s32gen1_clk accel4_clk =
-		S32GEN1_FREQ_MODULE_CLK(lax1_block, 0, 400 * MHZ);
+		S32GEN1_FREQ_MODULE_CLK_NO_FREQ_SCALING(lax1_block, 0, 400 * MHZ);
 
 /* GMAC_TS_CLK */
 static struct s32gen1_fixed_clock gmac_ext_ts =
diff --git a/include/drivers/nxp/s32/clk/s32gen1_clk_modules.h b/include/drivers/nxp/s32/clk/s32gen1_clk_modules.h
index 0eb00fb0b..fb26ca97e 100644
--- a/include/drivers/nxp/s32/clk/s32gen1_clk_modules.h
+++ b/include/drivers/nxp/s32/clk/s32gen1_clk_modules.h
@@ -81,7 +81,7 @@
 	.index = (INDEX),                        \
 }
 
-#define S32GEN1_FREQ_MODULE_CLK(PARENT_MODULE, MIN, MAX) \
+#define S32GEN1_FREQ_MODULE(PARENT_MODULE, MIN, MAX, FREQ_SCALING) \
 {                                                        \
 	.desc = {                                        \
 		.type = s32gen1_clk_t,                   \
@@ -89,12 +89,19 @@
 	.module = &(PARENT_MODULE).desc,                 \
 	.min_freq = (MIN),                               \
 	.max_freq = (MAX),                               \
+	.freq_scaling = (FREQ_SCALING),					 \
 }
 
+#define S32GEN1_FREQ_MODULE_CLK_NO_FREQ_SCALING(PARENT_MODULE, MIN, MAX) \
+	S32GEN1_FREQ_MODULE(PARENT_MODULE, MIN, MAX, false)
+
+#define S32GEN1_FREQ_MODULE_CLK(PARENT_MODULE, MIN, MAX)		\
+	S32GEN1_FREQ_MODULE(PARENT_MODULE, MIN, MAX, true)
+
 #define S32GEN1_MODULE_CLK(PARENT_MODULE) \
 	S32GEN1_FREQ_MODULE_CLK(PARENT_MODULE, 0, 0)
 
-#define S32GEN1_CHILD_CLK(PARENT, MIN, MAX) \
+#define S32GEN1_CHILD(PARENT, MIN, MAX, FREQ_SCALING) \
 {                                           \
 	.desc = {                           \
 		.type = s32gen1_clk_t,      \
@@ -102,8 +109,12 @@
 	.pclock = &(PARENT),                \
 	.min_freq = (MIN),                  \
 	.max_freq = (MAX),                  \
+	.freq_scaling = (FREQ_SCALING),		\
 }
 
+#define S32GEN1_CHILD_CLK(PARENT, MIN, MAX) \
+	S32GEN1_CHILD(PARENT, MIN, MAX, true)
+
 #define S32GEN1_PART_BLOCK_STATUS(PARENT, PART, BLOCK, STATUS) \
 {                                                              \
 	.desc = {                                              \
@@ -210,6 +221,7 @@ struct s32gen1_clk {
 	struct s32gen1_clk *pclock;
 	unsigned long min_freq;
 	unsigned long max_freq;
+	bool freq_scaling;
 };
 
 struct s32gen1_osc {
-- 
2.25.1

