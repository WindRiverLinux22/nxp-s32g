From f59dc49ca36981533fa3baaf5eaef83cfe017d4a Mon Sep 17 00:00:00 2001
From: Andra-Teodora Ilie <andra.ilie@nxp.com>
Date: Fri, 8 Jul 2022 18:02:46 +0300
Subject: [PATCH 39/49] scmi: perf: Implement PERFORMANCE_DESCRIBE_LEVELS
 command

This will be used to retrieve available rates for
a given clock.

Issue: ALB-7158
Upstream-Status: Pending 

Signed-off-by: Andra-Teodora Ilie <andra.ilie@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/scmi-msg/perf.c    | 54 ++++++++++++++++++++++++++++++++++++++
 drivers/scmi-msg/perf.h    | 33 +++++++++++++++++++++++
 include/drivers/scmi-msg.h | 19 ++++++++++++++
 3 files changed, 106 insertions(+)

diff --git a/drivers/scmi-msg/perf.c b/drivers/scmi-msg/perf.c
index 82c6b3f91..816db2454 100644
--- a/drivers/scmi-msg/perf.c
+++ b/drivers/scmi-msg/perf.c
@@ -22,6 +22,7 @@ static bool message_id_is_supported(size_t message_id);
 #pragma weak plat_scmi_perf_get_attributes
 #pragma weak plat_scmi_perf_get_sustained_freq
 #pragma weak plat_scmi_perf_get_sustained_perf_lvl
+#pragma weak plat_scmi_perf_describe_levels
 
 size_t plat_scmi_perf_domain_count(unsigned int agent_id __unused)
 {
@@ -63,6 +64,14 @@ unsigned int plat_scmi_perf_get_sustained_perf_lvl(unsigned int agent_id __unuse
 	return 0U;
 }
 
+int32_t plat_scmi_perf_describe_levels(unsigned int agent_id __unused,
+				    unsigned int domain_id __unused, size_t lvl_index __unused,
+				    struct scmi_perf_level *levels __unused,
+				    size_t *num_levels __unused)
+{
+	return SCMI_NOT_SUPPORTED;
+}
+
 static void report_version(struct scmi_msg *msg)
 {
 	struct scmi_protocol_version_p2a return_values = {
@@ -164,11 +173,56 @@ static void scmi_performance_domain_attributes(struct scmi_msg *msg)
 	scmi_write_response(msg, &return_values, sizeof(return_values));
 }
 
+#define LEVELS_SIZE_MAX		(SCMI_PLAYLOAD_MAX - \
+				 sizeof(struct scmi_performance_describe_levels_p2a))
+
+#define PERF_LEVEL_SIZE		sizeof(struct scmi_perf_level)
+
+#define MAX_LEVELS			((LEVELS_SIZE_MAX) / (PERF_LEVEL_SIZE))
+
+static void scmi_performance_describe_levels(struct scmi_msg *msg)
+{
+	struct scmi_performance_describe_levels_a2p *in_args = (void *)msg->in;
+	struct scmi_performance_describe_levels_p2a p2a = {
+		.status = SCMI_SUCCESS,
+	};
+	unsigned int domain_id = 0U;
+	int32_t status;
+	size_t num_levels;
+	struct scmi_perf_level plat_levels[MAX_LEVELS];
+
+	if (msg->in_size != sizeof(*in_args)) {
+		scmi_status_response(msg, SCMI_PROTOCOL_ERROR);
+		return;
+	}
+
+	domain_id = SPECULATION_SAFE_VALUE(in_args->domain_id);
+	if (domain_id > plat_scmi_perf_domain_count(msg->agent_id)) {
+		scmi_status_response(msg, SCMI_INVALID_PARAMETERS);
+		return;
+	}
+
+	num_levels = MAX_LEVELS;
+	status = plat_scmi_perf_describe_levels(msg->agent_id, domain_id,
+					in_args->level_index, plat_levels, &num_levels);
+	if (status == SCMI_SUCCESS) {
+		size_t ret_nb = MIN(num_levels - in_args->level_index, MAX_LEVELS);
+		size_t rem_nb = num_levels - in_args->level_index - ret_nb;
+
+		p2a.num_levels = SCMI_PERF_DESCRIBE_LEVELS_NUM_LEVELS_FLAGS(ret_nb, rem_nb);
+		memcpy(msg->out, &p2a, sizeof(p2a));
+		memcpy(msg->out + sizeof(p2a), plat_levels, ret_nb * PERF_LEVEL_SIZE);
+		msg->out_size_out = sizeof(p2a) + ret_nb * PERF_LEVEL_SIZE;
+	} else
+		scmi_status_response(msg, status);
+}
+
 static const scmi_msg_handler_t scmi_perf_handler_table[] = {
 	[SCMI_PROTOCOL_VERSION] = report_version,
 	[SCMI_PROTOCOL_ATTRIBUTES] = report_attributes,
 	[SCMI_PROTOCOL_MESSAGE_ATTRIBUTES] = report_message_attributes,
 	[SCMI_PERFORMANCE_DOMAIN_ATTRIBUTES] = scmi_performance_domain_attributes,
+	[SCMI_PERFORMANCE_DESCRIBE_LEVELS] = scmi_performance_describe_levels,
 };
 
 static bool message_id_is_supported(size_t message_id)
diff --git a/drivers/scmi-msg/perf.h b/drivers/scmi-msg/perf.h
index c03685678..fd032ef41 100644
--- a/drivers/scmi-msg/perf.h
+++ b/drivers/scmi-msg/perf.h
@@ -14,6 +14,7 @@
  */
 enum scmi_perf_command_id {
 	SCMI_PERFORMANCE_DOMAIN_ATTRIBUTES = 0x3,
+	SCMI_PERFORMANCE_DESCRIBE_LEVELS = 0x4,
 };
 
 /* Protocol attributes */
@@ -52,4 +53,36 @@ struct scmi_performance_domain_attributes_p2a {
 	char name[SCMI_DOMAIN_NAME_LENGTH_MAX];
 };
 
+/*
+ * Describe Levels
+ */
+#define SCMI_PERF_DESCRIBE_LEVELS_REMAINING_MASK	GENMASK_32(31, 16)
+#define SCMI_PERF_DESCRIBE_LEVELS_REMAINING_POS		16
+
+#define SCMI_PERF_DESCRIBE_LEVELS_COUNT_MASK		GENMASK_32(11, 0)
+
+#define SCMI_PERF_DESCRIBE_LEVELS_NUM_LEVELS_FLAGS(_count, _rem_rates) \
+	( \
+		((_count) & SCMI_PERF_DESCRIBE_LEVELS_COUNT_MASK) | \
+		(((_rem_rates) << SCMI_PERF_DESCRIBE_LEVELS_REMAINING_POS) & \
+		 SCMI_PERF_DESCRIBE_LEVELS_REMAINING_MASK) \
+	)
+
+struct scmi_performance_describe_levels_a2p {
+	uint32_t domain_id;
+	uint32_t level_index;
+};
+
+struct scmi_perf_level {
+	uint32_t perf_value;
+	uint32_t power_cost;
+	uint32_t attributes;
+};
+
+struct scmi_performance_describe_levels_p2a {
+	int32_t status;
+	uint32_t num_levels;
+	struct scmi_perf_level perf_levels[];
+};
+
 #endif /* SCMI_MSG_PERF_H */
diff --git a/include/drivers/scmi-msg.h b/include/drivers/scmi-msg.h
index 37e2e13c4..c1601b434 100644
--- a/include/drivers/scmi-msg.h
+++ b/include/drivers/scmi-msg.h
@@ -18,6 +18,9 @@
 /* A channel abstract a communication path between agent and server */
 struct scmi_msg_channel;
 
+/* Performance level */
+struct scmi_perf_level;
+
 /*
  * struct scmi_msg_channel - Shared memory buffer for a agent-to-server channel
  *
@@ -194,6 +197,22 @@ size_t plat_scmi_perf_domain_count(unsigned int agent_id);
 const char *plat_scmi_perf_get_name(unsigned int agent_id,
 				  unsigned int domain_id);
 
+/*
+ * Get possible performance levels as an array
+ *
+ * @agent_id: SCMI agent ID
+ * @domain_id: SCMI performance domain ID
+ * @lvl_index: index in the @levels array representing performance
+ * levels of interest
+ * @levels: performance levels array
+ * @num_levels: Array size of @levels.
+ * Return an SCMI compliant error code
+ */
+int32_t plat_scmi_perf_describe_levels(unsigned int agent_id,
+				    unsigned int domain_id, size_t lvl_index,
+				    struct scmi_perf_level *levels,
+				    size_t *num_levels);
+
 /* Handlers for SCMI Reset Domain protocol services */
 
 /*
-- 
2.25.1

