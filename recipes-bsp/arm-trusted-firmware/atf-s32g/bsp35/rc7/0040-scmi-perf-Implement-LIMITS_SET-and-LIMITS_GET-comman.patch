From e6c78fca513883f32e8839bd2aa9f862fae9ea12 Mon Sep 17 00:00:00 2001
From: Andra-Teodora Ilie <andra.ilie@nxp.com>
Date: Mon, 11 Jul 2022 19:07:01 +0300
Subject: [PATCH 40/49] scmi: perf: Implement LIMITS_SET and LIMITS_GET
 commands

Issue: ALB-7158
Upstream-Status: Pending 

Signed-off-by: Andra-Teodora Ilie <andra.ilie@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/scmi-msg/perf.c | 81 +++++++++++++++++++++++++++++++++++++++++
 drivers/scmi-msg/perf.h | 24 ++++++++++++
 2 files changed, 105 insertions(+)

diff --git a/drivers/scmi-msg/perf.c b/drivers/scmi-msg/perf.c
index 816db2454..9501733ac 100644
--- a/drivers/scmi-msg/perf.c
+++ b/drivers/scmi-msg/perf.c
@@ -23,6 +23,8 @@ static bool message_id_is_supported(size_t message_id);
 #pragma weak plat_scmi_perf_get_sustained_freq
 #pragma weak plat_scmi_perf_get_sustained_perf_lvl
 #pragma weak plat_scmi_perf_describe_levels
+#pragma weak plat_scmi_perf_set_limits
+#pragma weak plat_scmi_perf_get_limits
 
 size_t plat_scmi_perf_domain_count(unsigned int agent_id __unused)
 {
@@ -72,6 +74,24 @@ int32_t plat_scmi_perf_describe_levels(unsigned int agent_id __unused,
 	return SCMI_NOT_SUPPORTED;
 }
 
+int32_t plat_scmi_perf_set_limits(unsigned int agent_id __unused,
+				    unsigned int domain_id __unused,
+				    unsigned int range_max __unused,
+				    unsigned int range_min __unused)
+{
+	return SCMI_NOT_SUPPORTED;
+}
+
+int32_t plat_scmi_perf_get_limits(unsigned int agent_id __unused,
+				    unsigned int domain_id __unused,
+				    unsigned int *range_max __unused,
+				    unsigned int *range_min __unused)
+{
+	return SCMI_NOT_SUPPORTED;
+}
+
+
+
 static void report_version(struct scmi_msg *msg)
 {
 	struct scmi_protocol_version_p2a return_values = {
@@ -217,12 +237,73 @@ static void scmi_performance_describe_levels(struct scmi_msg *msg)
 		scmi_status_response(msg, status);
 }
 
+static void scmi_performance_limits_set(struct scmi_msg *msg)
+{
+	const struct scmi_performance_limits_set_a2p *in_args = (void *)msg->in;
+	int32_t status;
+	unsigned int domain_id = 0U;
+	unsigned int range_min = 0U, range_max = 0U;
+
+	if (msg->in_size != sizeof(*in_args)) {
+		scmi_status_response(msg, SCMI_PROTOCOL_ERROR);
+		return;
+	}
+
+	domain_id = SPECULATION_SAFE_VALUE(in_args->domain_id);
+	if (domain_id > plat_scmi_perf_domain_count(msg->agent_id)) {
+		scmi_status_response(msg, SCMI_INVALID_PARAMETERS);
+		return;
+	}
+
+	range_max = SPECULATION_SAFE_VALUE(in_args->range_max);
+	range_min = SPECULATION_SAFE_VALUE(in_args->range_min);
+
+	status = plat_scmi_perf_set_limits(msg->agent_id, domain_id, range_max, range_min);
+
+	scmi_status_response(msg, status);
+}
+
+static void scmi_performance_limits_get(struct scmi_msg *msg)
+{
+	const struct scmi_performance_limits_get_a2p *in_args = (void *)msg->in;
+	struct scmi_performance_limits_set_p2a return_values = {
+		.status = SCMI_SUCCESS,
+	};
+	int32_t status;
+	unsigned int domain_id = 0U;
+	unsigned int range_max = 0U, range_min = 0U;
+
+	if (msg->in_size != sizeof(*in_args)) {
+		scmi_status_response(msg, SCMI_PROTOCOL_ERROR);
+		return;
+	}
+
+	domain_id = SPECULATION_SAFE_VALUE(in_args->domain_id);
+	if (domain_id > plat_scmi_perf_domain_count(msg->agent_id)) {
+		scmi_status_response(msg, SCMI_INVALID_PARAMETERS);
+		return;
+	}
+
+	status = plat_scmi_perf_get_limits(msg->agent_id, domain_id, &range_max, &range_min);
+	if (status != SCMI_SUCCESS) {
+		scmi_status_response(msg, status);
+		return;
+	}
+
+	return_values.range_max = range_max;
+	return_values.range_min = range_min;
+
+	scmi_write_response(msg, &return_values, sizeof(return_values));
+}
+
 static const scmi_msg_handler_t scmi_perf_handler_table[] = {
 	[SCMI_PROTOCOL_VERSION] = report_version,
 	[SCMI_PROTOCOL_ATTRIBUTES] = report_attributes,
 	[SCMI_PROTOCOL_MESSAGE_ATTRIBUTES] = report_message_attributes,
 	[SCMI_PERFORMANCE_DOMAIN_ATTRIBUTES] = scmi_performance_domain_attributes,
 	[SCMI_PERFORMANCE_DESCRIBE_LEVELS] = scmi_performance_describe_levels,
+	[SCMI_PERFORMANCE_LIMITS_SET] = scmi_performance_limits_set,
+	[SCMI_PERFORMANCE_LIMITS_GET] = scmi_performance_limits_get,
 };
 
 static bool message_id_is_supported(size_t message_id)
diff --git a/drivers/scmi-msg/perf.h b/drivers/scmi-msg/perf.h
index fd032ef41..dbd9b2909 100644
--- a/drivers/scmi-msg/perf.h
+++ b/drivers/scmi-msg/perf.h
@@ -15,6 +15,8 @@
 enum scmi_perf_command_id {
 	SCMI_PERFORMANCE_DOMAIN_ATTRIBUTES = 0x3,
 	SCMI_PERFORMANCE_DESCRIBE_LEVELS = 0x4,
+	SCMI_PERFORMANCE_LIMITS_SET = 0x5,
+	SCMI_PERFORMANCE_LIMITS_GET = 0x6,
 };
 
 /* Protocol attributes */
@@ -85,4 +87,26 @@ struct scmi_performance_describe_levels_p2a {
 	struct scmi_perf_level perf_levels[];
 };
 
+/*
+ * Limits Set
+ */
+struct scmi_performance_limits_set_a2p {
+	uint32_t domain_id;
+	uint32_t range_max;
+	uint32_t range_min;
+};
+
+/*
+ * Limits Get
+ */
+struct scmi_performance_limits_get_a2p {
+	uint32_t domain_id;
+};
+
+struct scmi_performance_limits_set_p2a {
+	int32_t status;
+	uint32_t range_max;
+	uint32_t range_min;
+};
+
 #endif /* SCMI_MSG_PERF_H */
-- 
2.25.1

