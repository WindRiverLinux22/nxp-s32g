From 0bacf12309009edb7882c3bb5dfbf20350fd716e Mon Sep 17 00:00:00 2001
From: Andra-Teodora Ilie <andra.ilie@nxp.com>
Date: Fri, 14 Oct 2022 16:49:42 +0300
Subject: [PATCH 45/49] s32: perf: Implement platform specific function to
 handle performance levels description

Issue: ALB-7158
Upstream-Status: Pending 

Signed-off-by: Andra-Teodora Ilie <andra.ilie@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/nxp/s32/perf/s32gen1_scmi_perf.c      | 41 ++++++++++++++++++-
 .../drivers/nxp/s32/clk/s32gen1_scmi_perf.h   |  3 ++
 plat/nxp/s32/s32_scmi_perf.c                  | 21 ++++++++++
 3 files changed, 64 insertions(+), 1 deletion(-)

diff --git a/drivers/nxp/s32/perf/s32gen1_scmi_perf.c b/drivers/nxp/s32/perf/s32gen1_scmi_perf.c
index 30f360c51..470deb84f 100644
--- a/drivers/nxp/s32/perf/s32gen1_scmi_perf.c
+++ b/drivers/nxp/s32/perf/s32gen1_scmi_perf.c
@@ -4,6 +4,7 @@
  */
 #include <clk/s32gen1_scmi_perf.h>
 #include <drivers/scmi.h>
+#include <drivers/scmi-msg.h>
 #include <dt-bindings/perf/s32gen1-scmi-perf.h>
 #include <lib/utils_def.h>
 #include <lib/spinlock.h>
@@ -19,7 +20,7 @@ struct opp {
 static struct opp opps[S32GEN1_SCMI_PERF_MAX_ID][S32GEN1_SCMI_MAX_LEVELS];
 static spinlock_t opps_lock;
 
-int32_t populate_opps_table(unsigned int domain_id, size_t lvl_index,
+static int32_t populate_opps_table(unsigned int domain_id, size_t lvl_index,
 		unsigned long *rates, size_t num_rates)
 {
 	size_t i = 0;
@@ -87,3 +88,41 @@ unsigned long find_rate_by_perf_level(unsigned int domain_id, uint32_t perf_leve
 	return rate;
 }
 
+/**
+ * Copy the available clock rates returned by calling `plat_scmi_clock_rates_array`
+ * into the buffer describing possible performance levels for a given clock.
+ */
+int32_t s32gen1_scmi_get_perf_levels(unsigned int agent_id, unsigned int clock_id,
+	unsigned int domain_id, size_t lvl_index, uint32_t *levels, size_t *num_levels)
+{
+	unsigned long rates[S32GEN1_MAX_NUM_FREQ] = {0};
+	size_t num_rates = 0, i;
+	int32_t ret = SCMI_SUCCESS;
+
+	ret = plat_scmi_clock_rates_array(agent_id, clock_id, rates, &num_rates);
+	if (ret != SCMI_SUCCESS)
+		return ret;
+
+	ret = populate_opps_table(domain_id, lvl_index, rates, num_rates);
+	if (ret != SCMI_SUCCESS)
+		return ret;
+
+	/* copy requested performance levels to buffer */
+	for (i = 0; i < *num_levels && i < num_rates; i++) {
+
+		if (i + lvl_index >= ARRAY_SIZE(opps[domain_id]))
+			break;
+
+		spin_lock(&opps_lock);
+		levels[3 * i] = opps[domain_id][i + lvl_index].level;
+		spin_unlock(&opps_lock);
+		levels[3 * i + 1] = 0; /* power cost */
+		levels[3 * i + 2] = 0; /* attributes */
+	}
+
+	/* return the number of all available perf levels */
+	*num_levels = num_rates;
+
+	return ret;
+}
+
diff --git a/include/drivers/nxp/s32/clk/s32gen1_scmi_perf.h b/include/drivers/nxp/s32/clk/s32gen1_scmi_perf.h
index 6ae2b9661..9980d3658 100644
--- a/include/drivers/nxp/s32/clk/s32gen1_scmi_perf.h
+++ b/include/drivers/nxp/s32/clk/s32gen1_scmi_perf.h
@@ -19,4 +19,7 @@
 #define rate2khz(rate)				((rate) / KHZ)
 #define rate2level(rate)			((rate) - (rate) % KHZ)
 
+int32_t s32gen1_scmi_get_perf_levels(unsigned int agent_id, unsigned int clock_id,
+	unsigned int domain_id, size_t lvl_index, uint32_t *levels, size_t *num_levels);
+
 #endif
diff --git a/plat/nxp/s32/s32_scmi_perf.c b/plat/nxp/s32/s32_scmi_perf.c
index 0c86e4f4d..2032c02f4 100644
--- a/plat/nxp/s32/s32_scmi_perf.c
+++ b/plat/nxp/s32/s32_scmi_perf.c
@@ -81,3 +81,24 @@ unsigned int plat_scmi_perf_get_sustained_perf_lvl(unsigned int agent_id,
 	return rate2level(rate);
 }
 
+int32_t plat_scmi_perf_describe_levels(unsigned int agent_id,
+				    unsigned int domain_id, size_t lvl_index,
+				    struct scmi_perf_level *levels,
+				    size_t *num_levels)
+{
+	unsigned int clock_id;
+	uint32_t *buf = (uint32_t *)(uintptr_t)levels;
+
+	if (domain_id >= ARRAY_SIZE(domains))
+		return SCMI_NOT_FOUND;
+
+	if (levels == NULL)
+		return SCMI_INVALID_PARAMETERS;
+
+	clock_id = domains[domain_id].clock_id;
+
+	return s32gen1_scmi_get_perf_levels(agent_id, clock_id, domain_id,
+					lvl_index, buf, num_levels);
+}
+
+
-- 
2.25.1

