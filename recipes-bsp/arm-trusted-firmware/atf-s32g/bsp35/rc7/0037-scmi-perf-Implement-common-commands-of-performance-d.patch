From 77b48aa7123f20bafd65c85d40a4dd527983d5f3 Mon Sep 17 00:00:00 2001
From: Andra-Teodora Ilie <andra.ilie@nxp.com>
Date: Mon, 20 Jun 2022 19:09:48 +0300
Subject: [PATCH 37/49] scmi: perf: Implement common commands of performance
 domain management protocol

Issue: ALB-7158
Upstream-Status: Pending 

Signed-off-by: Andra-Teodora Ilie <andra.ilie@nxp.com>
Signed-off-by: Zhantao Tang <zhantao.tang@windriver.com>
---
 drivers/scmi-msg/common.h  |   9 +++
 drivers/scmi-msg/entry.c   |   4 ++
 drivers/scmi-msg/perf.c    | 125 +++++++++++++++++++++++++++++++++++++
 drivers/scmi-msg/perf.h    |  29 +++++++++
 include/drivers/scmi-msg.h |  11 +++-
 plat/nxp/s32/s32_common.mk |   1 +
 6 files changed, 178 insertions(+), 1 deletion(-)
 create mode 100644 drivers/scmi-msg/perf.c
 create mode 100644 drivers/scmi-msg/perf.h

diff --git a/drivers/scmi-msg/common.h b/drivers/scmi-msg/common.h
index ef5953b3d..5f2e4d2b4 100644
--- a/drivers/scmi-msg/common.h
+++ b/drivers/scmi-msg/common.h
@@ -2,6 +2,7 @@
 /*
  * Copyright (c) 2015-2019, Arm Limited and Contributors. All rights reserved.
  * Copyright (c) 2019-2020, Linaro Limited
+ * Copyright 2022 NXP
  */
 #ifndef SCMI_MSG_COMMON_H
 #define SCMI_MSG_COMMON_H
@@ -13,6 +14,7 @@
 
 #include "base.h"
 #include "clock.h"
+#include "perf.h"
 #include "reset_domain.h"
 
 #define SCMI_VERSION			0x20000U
@@ -103,6 +105,13 @@ scmi_msg_handler_t scmi_msg_get_base_handler(struct scmi_msg *msg);
  */
 scmi_msg_handler_t scmi_msg_get_clock_handler(struct scmi_msg *msg);
 
+/*
+ * scmi_msg_get_perf_handler - Return a handler for a performance domain message
+ * @msg - message to process
+ * Return a function handler for the message or NULL
+ */
+scmi_msg_handler_t scmi_msg_get_perf_handler(struct scmi_msg *msg);
+
 /*
  * scmi_msg_get_rstd_handler - Return a handler for a reset domain message
  * @msg - message to process
diff --git a/drivers/scmi-msg/entry.c b/drivers/scmi-msg/entry.c
index ea3efa24b..6cd809dcc 100644
--- a/drivers/scmi-msg/entry.c
+++ b/drivers/scmi-msg/entry.c
@@ -2,6 +2,7 @@
 /*
  * Copyright (c) 2015-2020, Arm Limited and Contributors. All rights reserved.
  * Copyright (c) 2019-2020, Linaro Limited
+ * Copyright 2022 NXP
  */
 
 #include <assert.h>
@@ -44,6 +45,9 @@ void scmi_process_message(struct scmi_msg *msg)
 	case SCMI_PROTOCOL_ID_CLOCK:
 		handler = scmi_msg_get_clock_handler(msg);
 		break;
+	case SCMI_PROTOCOL_ID_PERF:
+		handler = scmi_msg_get_perf_handler(msg);
+		break;
 	case SCMI_PROTOCOL_ID_RESET_DOMAIN:
 		handler = scmi_msg_get_rstd_handler(msg);
 		break;
diff --git a/drivers/scmi-msg/perf.c b/drivers/scmi-msg/perf.c
new file mode 100644
index 000000000..777c702b1
--- /dev/null
+++ b/drivers/scmi-msg/perf.c
@@ -0,0 +1,125 @@
+/*
+ * Copyright 2022 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#include <cdefs.h>
+#include <string.h>
+
+#include <drivers/scmi-msg.h>
+#include <drivers/scmi.h>
+#include <lib/utils.h>
+#include <lib/utils_def.h>
+
+#include "common.h"
+
+static bool message_id_is_supported(size_t message_id);
+
+#pragma weak plat_scmi_perf_domain_count
+#pragma weak plat_scmi_perf_is_power_mw
+#pragma weak plat_scmi_perf_statistics
+
+size_t plat_scmi_perf_domain_count(unsigned int agent_id __unused)
+{
+	return 0U;
+}
+
+bool plat_scmi_perf_is_power_mw(unsigned int agent_id __unused)
+{
+	return false;
+}
+
+unsigned int plat_scmi_perf_statistics(unsigned int agent_id __unused,
+				     unsigned long *addr __unused)
+{
+	return 0U;
+}
+
+static void report_version(struct scmi_msg *msg)
+{
+	struct scmi_protocol_version_p2a return_values = {
+		.status = SCMI_SUCCESS,
+		.version = SCMI_PROTOCOL_VERSION_PERF,
+	};
+
+	if (msg->in_size != 0U) {
+		scmi_status_response(msg, SCMI_PROTOCOL_ERROR);
+		return;
+	}
+
+	scmi_write_response(msg, &return_values, sizeof(return_values));
+}
+
+static void report_attributes(struct scmi_msg *msg)
+{
+	size_t domain_count = plat_scmi_perf_domain_count(msg->agent_id);
+	bool power_mw = plat_scmi_perf_is_power_mw(msg->agent_id);
+	unsigned long addr = 0UL;
+	unsigned int len;
+
+	struct scmi_protocol_attributes_p2a_perf return_values = {
+		.status = SCMI_SUCCESS,
+		.attributes = SCMI_PERF_PROTOCOL_ATTRIBUTES(power_mw, domain_count),
+	};
+
+	if (msg->in_size != 0) {
+		scmi_status_response(msg, SCMI_PROTOCOL_ERROR);
+		return;
+	}
+
+	len = plat_scmi_perf_statistics(msg->agent_id, &addr);
+	if (len != 0U) {
+		return_values.statistics_addr_low = (unsigned int)addr;
+		return_values.statistics_addr_high = (uint32_t)(addr >> 32);
+		return_values.statistics_len = len;
+	}
+
+	scmi_write_response(msg, &return_values, sizeof(return_values));
+}
+
+static void report_message_attributes(struct scmi_msg *msg)
+{
+	struct scmi_protocol_message_attributes_a2p *in_args = (void *)msg->in;
+	struct scmi_protocol_message_attributes_p2a return_values = {
+		.status = SCMI_SUCCESS,
+		.attributes = 0U, /* FastChannels unsupported */
+	};
+
+	if (msg->in_size != sizeof(*in_args)) {
+		scmi_status_response(msg, SCMI_PROTOCOL_ERROR);
+		return;
+	}
+
+	if (!message_id_is_supported(in_args->message_id)) {
+		scmi_status_response(msg, SCMI_NOT_FOUND);
+		return;
+	}
+
+	scmi_write_response(msg, &return_values, sizeof(return_values));
+}
+
+
+static const scmi_msg_handler_t scmi_perf_handler_table[] = {
+	[SCMI_PROTOCOL_VERSION] = report_version,
+	[SCMI_PROTOCOL_ATTRIBUTES] = report_attributes,
+	[SCMI_PROTOCOL_MESSAGE_ATTRIBUTES] = report_message_attributes,
+};
+
+static bool message_id_is_supported(size_t message_id)
+{
+	return (message_id < ARRAY_SIZE(scmi_perf_handler_table)) &&
+	       (scmi_perf_handler_table[message_id] != NULL);
+}
+
+scmi_msg_handler_t scmi_msg_get_perf_handler(struct scmi_msg *msg)
+{
+	unsigned int message_id = SPECULATION_SAFE_VALUE(msg->message_id);
+
+	if (message_id >= ARRAY_SIZE(scmi_perf_handler_table)) {
+		VERBOSE("Performance management domain handle not found %u\n", msg->message_id);
+		return NULL;
+	}
+
+	return scmi_perf_handler_table[message_id];
+}
+
diff --git a/drivers/scmi-msg/perf.h b/drivers/scmi-msg/perf.h
new file mode 100644
index 000000000..007554fd8
--- /dev/null
+++ b/drivers/scmi-msg/perf.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2022 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef SCMI_MSG_PERF_H
+#define SCMI_MSG_PERF_H
+
+#define SCMI_PROTOCOL_VERSION_PERF  0x20000U
+
+/* Protocol attributes */
+#define SCMI_PERF_PERF_DOMAIN_COUNT_MASK	GENMASK(15, 0)
+#define SCMI_PERF_POWER_MW_MASK				BIT(16)
+#define SCMI_PERF_POWER_MW_POS				16
+
+#define SCMI_PERF_PROTOCOL_ATTRIBUTES(_power_mw, _perf_domain_count) \
+	((((_power_mw) << SCMI_PERF_POWER_MW_POS) & SCMI_PERF_POWER_MW_MASK) | \
+	((_perf_domain_count) & SCMI_PERF_PERF_DOMAIN_COUNT_MASK))
+
+struct scmi_protocol_attributes_p2a_perf {
+	int32_t status;
+	uint32_t attributes;
+	uint32_t statistics_addr_low;
+	uint32_t statistics_addr_high;
+	uint32_t statistics_len;
+};
+
+#endif /* SCMI_MSG_PERF_H */
diff --git a/include/drivers/scmi-msg.h b/include/drivers/scmi-msg.h
index 81730769d..fd7a8bc8f 100644
--- a/include/drivers/scmi-msg.h
+++ b/include/drivers/scmi-msg.h
@@ -2,7 +2,7 @@
 /*
  * Copyright (c) 2015-2019, Arm Limited and Contributors. All rights reserved.
  * Copyright (c) 2019, Linaro Limited
- * Copyright 2020 NXP
+ * Copyright 2020, 2022 NXP
  */
 
 #ifndef SCMI_MSG_H
@@ -176,6 +176,15 @@ int32_t plat_scmi_clock_get_state(unsigned int agent_id, unsigned int scmi_id);
 int32_t plat_scmi_clock_set_state(unsigned int agent_id, unsigned int scmi_id,
 				  bool enable_not_disable);
 
+/* Handlers for SCMI Performance Domain protocol services */
+
+/*
+ * Return number of performance domains for the agent
+ * @agent_id: SCMI agent ID
+ * Return number of performance domains
+ */
+size_t plat_scmi_perf_domain_count(unsigned int agent_id);
+
 /* Handlers for SCMI Reset Domain protocol services */
 
 /*
diff --git a/plat/nxp/s32/s32_common.mk b/plat/nxp/s32/s32_common.mk
index 949c8288e..6ec40efa5 100644
--- a/plat/nxp/s32/s32_common.mk
+++ b/plat/nxp/s32/s32_common.mk
@@ -104,6 +104,7 @@ BL31_SOURCES += \
 			drivers/scmi-msg/base.c \
 			drivers/scmi-msg/clock.c \
 			drivers/scmi-msg/entry.c \
+			drivers/scmi-msg/perf.c \
 			drivers/scmi-msg/reset_domain.c \
 			${S32_DRIVERS}/clk/clk.c \
 			${S32_DRIVERS}/clk/fixed_clk.c \
-- 
2.25.1

